'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("dtsBD_SICEP"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dtsBD_SICEP
    Inherits System.Data.DataSet
    
    Private tabletb_usuario As tb_usuarioDataTable
    
    Private tabletb_perfil As tb_perfilDataTable
    
    Private tabletb_paciente As tb_pacienteDataTable
    
    Private tabletb_microarea As tb_microareaDataTable
    
    Private tabletb_medicamento As tb_medicamentoDataTable
    
    Private tabletb_ent_secretaria As tb_ent_secretariaDataTable
    
    Private tabletb_sai_secretaria As tb_sai_secretariaDataTable
    
    Private tabletb_regiao As tb_regiaoDataTable
    
    Private tablevw_ENTRADAS_SECRETARIA As vw_ENTRADAS_SECRETARIADataTable
    
    Private tablevw_SAIDAS_SECRETARIA As vw_SAIDAS_SECRETARIADataTable
    
    Private tablevw_ENTRADAS_POLICLINICA As vw_ENTRADAS_POLICLINICADataTable
    
    Private tabletb_sai_policlinica As tb_sai_policlinicaDataTable
    
    Private tabletb_ent_policlinica As tb_ent_policlinicaDataTable
    
    Private tablevw_SAIDAS_POLICLINICA As vw_SAIDAS_POLICLINICADataTable
    
    Private relationFK_tb_usuario_tb_perfil As System.Data.DataRelation
    
    Private relationtb_microarea_tb_paciente As System.Data.DataRelation
    
    Private relationtb_usuario_tb_ent_secretaria As System.Data.DataRelation
    
    Private relationtb_medicamento_tb_ent_secretaria As System.Data.DataRelation
    
    Private relationtb_usuario_tb_sai_secretaria As System.Data.DataRelation
    
    Private relationtb_regiao_tb_sai_secretaria As System.Data.DataRelation
    
    Private relationtb_medicamento_tb_sai_secretaria As System.Data.DataRelation
    
    Private relationtb_medicamento_tb_sai_policlinica As System.Data.DataRelation
    
    Private relationtb_usuario_tb_sai_policlinica As System.Data.DataRelation
    
    Private relationtb_paciente_tb_sai_policlinica As System.Data.DataRelation
    
    Private relationtb_medicamento_tb_ent_policlinica As System.Data.DataRelation
    
    Private relationtb_usuario_tb_ent_policlinica As System.Data.DataRelation
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("tb_usuario")) Is Nothing) Then
                MyBase.Tables.Add(New tb_usuarioDataTable(ds.Tables("tb_usuario")))
            End If
            If (Not (ds.Tables("tb_perfil")) Is Nothing) Then
                MyBase.Tables.Add(New tb_perfilDataTable(ds.Tables("tb_perfil")))
            End If
            If (Not (ds.Tables("tb_paciente")) Is Nothing) Then
                MyBase.Tables.Add(New tb_pacienteDataTable(ds.Tables("tb_paciente")))
            End If
            If (Not (ds.Tables("tb_microarea")) Is Nothing) Then
                MyBase.Tables.Add(New tb_microareaDataTable(ds.Tables("tb_microarea")))
            End If
            If (Not (ds.Tables("tb_medicamento")) Is Nothing) Then
                MyBase.Tables.Add(New tb_medicamentoDataTable(ds.Tables("tb_medicamento")))
            End If
            If (Not (ds.Tables("tb_ent_secretaria")) Is Nothing) Then
                MyBase.Tables.Add(New tb_ent_secretariaDataTable(ds.Tables("tb_ent_secretaria")))
            End If
            If (Not (ds.Tables("tb_sai_secretaria")) Is Nothing) Then
                MyBase.Tables.Add(New tb_sai_secretariaDataTable(ds.Tables("tb_sai_secretaria")))
            End If
            If (Not (ds.Tables("tb_regiao")) Is Nothing) Then
                MyBase.Tables.Add(New tb_regiaoDataTable(ds.Tables("tb_regiao")))
            End If
            If (Not (ds.Tables("vw_ENTRADAS_SECRETARIA")) Is Nothing) Then
                MyBase.Tables.Add(New vw_ENTRADAS_SECRETARIADataTable(ds.Tables("vw_ENTRADAS_SECRETARIA")))
            End If
            If (Not (ds.Tables("vw_SAIDAS_SECRETARIA")) Is Nothing) Then
                MyBase.Tables.Add(New vw_SAIDAS_SECRETARIADataTable(ds.Tables("vw_SAIDAS_SECRETARIA")))
            End If
            If (Not (ds.Tables("vw_ENTRADAS_POLICLINICA")) Is Nothing) Then
                MyBase.Tables.Add(New vw_ENTRADAS_POLICLINICADataTable(ds.Tables("vw_ENTRADAS_POLICLINICA")))
            End If
            If (Not (ds.Tables("tb_sai_policlinica")) Is Nothing) Then
                MyBase.Tables.Add(New tb_sai_policlinicaDataTable(ds.Tables("tb_sai_policlinica")))
            End If
            If (Not (ds.Tables("tb_ent_policlinica")) Is Nothing) Then
                MyBase.Tables.Add(New tb_ent_policlinicaDataTable(ds.Tables("tb_ent_policlinica")))
            End If
            If (Not (ds.Tables("vw_SAIDAS_POLICLINICA")) Is Nothing) Then
                MyBase.Tables.Add(New vw_SAIDAS_POLICLINICADataTable(ds.Tables("vw_SAIDAS_POLICLINICA")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tb_usuario() As tb_usuarioDataTable
        Get
            Return Me.tabletb_usuario
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tb_perfil() As tb_perfilDataTable
        Get
            Return Me.tabletb_perfil
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tb_paciente() As tb_pacienteDataTable
        Get
            Return Me.tabletb_paciente
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tb_microarea() As tb_microareaDataTable
        Get
            Return Me.tabletb_microarea
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tb_medicamento() As tb_medicamentoDataTable
        Get
            Return Me.tabletb_medicamento
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tb_ent_secretaria() As tb_ent_secretariaDataTable
        Get
            Return Me.tabletb_ent_secretaria
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tb_sai_secretaria() As tb_sai_secretariaDataTable
        Get
            Return Me.tabletb_sai_secretaria
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tb_regiao() As tb_regiaoDataTable
        Get
            Return Me.tabletb_regiao
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property vw_ENTRADAS_SECRETARIA() As vw_ENTRADAS_SECRETARIADataTable
        Get
            Return Me.tablevw_ENTRADAS_SECRETARIA
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property vw_SAIDAS_SECRETARIA() As vw_SAIDAS_SECRETARIADataTable
        Get
            Return Me.tablevw_SAIDAS_SECRETARIA
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property vw_ENTRADAS_POLICLINICA() As vw_ENTRADAS_POLICLINICADataTable
        Get
            Return Me.tablevw_ENTRADAS_POLICLINICA
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tb_sai_policlinica() As tb_sai_policlinicaDataTable
        Get
            Return Me.tabletb_sai_policlinica
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tb_ent_policlinica() As tb_ent_policlinicaDataTable
        Get
            Return Me.tabletb_ent_policlinica
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property vw_SAIDAS_POLICLINICA() As vw_SAIDAS_POLICLINICADataTable
        Get
            Return Me.tablevw_SAIDAS_POLICLINICA
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As dtsBD_SICEP = CType(MyBase.Clone,dtsBD_SICEP)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("tb_usuario")) Is Nothing) Then
                MyBase.Tables.Add(New tb_usuarioDataTable(ds.Tables("tb_usuario")))
            End If
            If (Not (ds.Tables("tb_perfil")) Is Nothing) Then
                MyBase.Tables.Add(New tb_perfilDataTable(ds.Tables("tb_perfil")))
            End If
            If (Not (ds.Tables("tb_paciente")) Is Nothing) Then
                MyBase.Tables.Add(New tb_pacienteDataTable(ds.Tables("tb_paciente")))
            End If
            If (Not (ds.Tables("tb_microarea")) Is Nothing) Then
                MyBase.Tables.Add(New tb_microareaDataTable(ds.Tables("tb_microarea")))
            End If
            If (Not (ds.Tables("tb_medicamento")) Is Nothing) Then
                MyBase.Tables.Add(New tb_medicamentoDataTable(ds.Tables("tb_medicamento")))
            End If
            If (Not (ds.Tables("tb_ent_secretaria")) Is Nothing) Then
                MyBase.Tables.Add(New tb_ent_secretariaDataTable(ds.Tables("tb_ent_secretaria")))
            End If
            If (Not (ds.Tables("tb_sai_secretaria")) Is Nothing) Then
                MyBase.Tables.Add(New tb_sai_secretariaDataTable(ds.Tables("tb_sai_secretaria")))
            End If
            If (Not (ds.Tables("tb_regiao")) Is Nothing) Then
                MyBase.Tables.Add(New tb_regiaoDataTable(ds.Tables("tb_regiao")))
            End If
            If (Not (ds.Tables("vw_ENTRADAS_SECRETARIA")) Is Nothing) Then
                MyBase.Tables.Add(New vw_ENTRADAS_SECRETARIADataTable(ds.Tables("vw_ENTRADAS_SECRETARIA")))
            End If
            If (Not (ds.Tables("vw_SAIDAS_SECRETARIA")) Is Nothing) Then
                MyBase.Tables.Add(New vw_SAIDAS_SECRETARIADataTable(ds.Tables("vw_SAIDAS_SECRETARIA")))
            End If
            If (Not (ds.Tables("vw_ENTRADAS_POLICLINICA")) Is Nothing) Then
                MyBase.Tables.Add(New vw_ENTRADAS_POLICLINICADataTable(ds.Tables("vw_ENTRADAS_POLICLINICA")))
            End If
            If (Not (ds.Tables("tb_sai_policlinica")) Is Nothing) Then
                MyBase.Tables.Add(New tb_sai_policlinicaDataTable(ds.Tables("tb_sai_policlinica")))
            End If
            If (Not (ds.Tables("tb_ent_policlinica")) Is Nothing) Then
                MyBase.Tables.Add(New tb_ent_policlinicaDataTable(ds.Tables("tb_ent_policlinica")))
            End If
            If (Not (ds.Tables("vw_SAIDAS_POLICLINICA")) Is Nothing) Then
                MyBase.Tables.Add(New vw_SAIDAS_POLICLINICADataTable(ds.Tables("vw_SAIDAS_POLICLINICA")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tabletb_usuario = CType(MyBase.Tables("tb_usuario"),tb_usuarioDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletb_usuario) Is Nothing) Then
                Me.tabletb_usuario.InitVars
            End If
        End If
        Me.tabletb_perfil = CType(MyBase.Tables("tb_perfil"),tb_perfilDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletb_perfil) Is Nothing) Then
                Me.tabletb_perfil.InitVars
            End If
        End If
        Me.tabletb_paciente = CType(MyBase.Tables("tb_paciente"),tb_pacienteDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletb_paciente) Is Nothing) Then
                Me.tabletb_paciente.InitVars
            End If
        End If
        Me.tabletb_microarea = CType(MyBase.Tables("tb_microarea"),tb_microareaDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletb_microarea) Is Nothing) Then
                Me.tabletb_microarea.InitVars
            End If
        End If
        Me.tabletb_medicamento = CType(MyBase.Tables("tb_medicamento"),tb_medicamentoDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletb_medicamento) Is Nothing) Then
                Me.tabletb_medicamento.InitVars
            End If
        End If
        Me.tabletb_ent_secretaria = CType(MyBase.Tables("tb_ent_secretaria"),tb_ent_secretariaDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletb_ent_secretaria) Is Nothing) Then
                Me.tabletb_ent_secretaria.InitVars
            End If
        End If
        Me.tabletb_sai_secretaria = CType(MyBase.Tables("tb_sai_secretaria"),tb_sai_secretariaDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletb_sai_secretaria) Is Nothing) Then
                Me.tabletb_sai_secretaria.InitVars
            End If
        End If
        Me.tabletb_regiao = CType(MyBase.Tables("tb_regiao"),tb_regiaoDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletb_regiao) Is Nothing) Then
                Me.tabletb_regiao.InitVars
            End If
        End If
        Me.tablevw_ENTRADAS_SECRETARIA = CType(MyBase.Tables("vw_ENTRADAS_SECRETARIA"),vw_ENTRADAS_SECRETARIADataTable)
        If (initTable = true) Then
            If (Not (Me.tablevw_ENTRADAS_SECRETARIA) Is Nothing) Then
                Me.tablevw_ENTRADAS_SECRETARIA.InitVars
            End If
        End If
        Me.tablevw_SAIDAS_SECRETARIA = CType(MyBase.Tables("vw_SAIDAS_SECRETARIA"),vw_SAIDAS_SECRETARIADataTable)
        If (initTable = true) Then
            If (Not (Me.tablevw_SAIDAS_SECRETARIA) Is Nothing) Then
                Me.tablevw_SAIDAS_SECRETARIA.InitVars
            End If
        End If
        Me.tablevw_ENTRADAS_POLICLINICA = CType(MyBase.Tables("vw_ENTRADAS_POLICLINICA"),vw_ENTRADAS_POLICLINICADataTable)
        If (initTable = true) Then
            If (Not (Me.tablevw_ENTRADAS_POLICLINICA) Is Nothing) Then
                Me.tablevw_ENTRADAS_POLICLINICA.InitVars
            End If
        End If
        Me.tabletb_sai_policlinica = CType(MyBase.Tables("tb_sai_policlinica"),tb_sai_policlinicaDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletb_sai_policlinica) Is Nothing) Then
                Me.tabletb_sai_policlinica.InitVars
            End If
        End If
        Me.tabletb_ent_policlinica = CType(MyBase.Tables("tb_ent_policlinica"),tb_ent_policlinicaDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletb_ent_policlinica) Is Nothing) Then
                Me.tabletb_ent_policlinica.InitVars
            End If
        End If
        Me.tablevw_SAIDAS_POLICLINICA = CType(MyBase.Tables("vw_SAIDAS_POLICLINICA"),vw_SAIDAS_POLICLINICADataTable)
        If (initTable = true) Then
            If (Not (Me.tablevw_SAIDAS_POLICLINICA) Is Nothing) Then
                Me.tablevw_SAIDAS_POLICLINICA.InitVars
            End If
        End If
        Me.relationFK_tb_usuario_tb_perfil = Me.Relations("FK_tb_usuario_tb_perfil")
        Me.relationtb_microarea_tb_paciente = Me.Relations("tb_microarea_tb_paciente")
        Me.relationtb_usuario_tb_ent_secretaria = Me.Relations("tb_usuario_tb_ent_secretaria")
        Me.relationtb_medicamento_tb_ent_secretaria = Me.Relations("tb_medicamento_tb_ent_secretaria")
        Me.relationtb_usuario_tb_sai_secretaria = Me.Relations("tb_usuario_tb_sai_secretaria")
        Me.relationtb_regiao_tb_sai_secretaria = Me.Relations("tb_regiao_tb_sai_secretaria")
        Me.relationtb_medicamento_tb_sai_secretaria = Me.Relations("tb_medicamento_tb_sai_secretaria")
        Me.relationtb_medicamento_tb_sai_policlinica = Me.Relations("tb_medicamento_tb_sai_policlinica")
        Me.relationtb_usuario_tb_sai_policlinica = Me.Relations("tb_usuario_tb_sai_policlinica")
        Me.relationtb_paciente_tb_sai_policlinica = Me.Relations("tb_paciente_tb_sai_policlinica")
        Me.relationtb_medicamento_tb_ent_policlinica = Me.Relations("tb_medicamento_tb_ent_policlinica")
        Me.relationtb_usuario_tb_ent_policlinica = Me.Relations("tb_usuario_tb_ent_policlinica")
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dtsBD_SICEP"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dtsBD_SICEP.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tabletb_usuario = New tb_usuarioDataTable
        MyBase.Tables.Add(Me.tabletb_usuario)
        Me.tabletb_perfil = New tb_perfilDataTable
        MyBase.Tables.Add(Me.tabletb_perfil)
        Me.tabletb_paciente = New tb_pacienteDataTable
        MyBase.Tables.Add(Me.tabletb_paciente)
        Me.tabletb_microarea = New tb_microareaDataTable
        MyBase.Tables.Add(Me.tabletb_microarea)
        Me.tabletb_medicamento = New tb_medicamentoDataTable
        MyBase.Tables.Add(Me.tabletb_medicamento)
        Me.tabletb_ent_secretaria = New tb_ent_secretariaDataTable
        MyBase.Tables.Add(Me.tabletb_ent_secretaria)
        Me.tabletb_sai_secretaria = New tb_sai_secretariaDataTable
        MyBase.Tables.Add(Me.tabletb_sai_secretaria)
        Me.tabletb_regiao = New tb_regiaoDataTable
        MyBase.Tables.Add(Me.tabletb_regiao)
        Me.tablevw_ENTRADAS_SECRETARIA = New vw_ENTRADAS_SECRETARIADataTable
        MyBase.Tables.Add(Me.tablevw_ENTRADAS_SECRETARIA)
        Me.tablevw_SAIDAS_SECRETARIA = New vw_SAIDAS_SECRETARIADataTable
        MyBase.Tables.Add(Me.tablevw_SAIDAS_SECRETARIA)
        Me.tablevw_ENTRADAS_POLICLINICA = New vw_ENTRADAS_POLICLINICADataTable
        MyBase.Tables.Add(Me.tablevw_ENTRADAS_POLICLINICA)
        Me.tabletb_sai_policlinica = New tb_sai_policlinicaDataTable
        MyBase.Tables.Add(Me.tabletb_sai_policlinica)
        Me.tabletb_ent_policlinica = New tb_ent_policlinicaDataTable
        MyBase.Tables.Add(Me.tabletb_ent_policlinica)
        Me.tablevw_SAIDAS_POLICLINICA = New vw_SAIDAS_POLICLINICADataTable
        MyBase.Tables.Add(Me.tablevw_SAIDAS_POLICLINICA)
        Me.relationFK_tb_usuario_tb_perfil = New System.Data.DataRelation("FK_tb_usuario_tb_perfil", New System.Data.DataColumn() {Me.tabletb_perfil.cod_perfilColumn}, New System.Data.DataColumn() {Me.tabletb_usuario.FKcod_perfilColumn}, false)
        Me.Relations.Add(Me.relationFK_tb_usuario_tb_perfil)
        Me.relationtb_microarea_tb_paciente = New System.Data.DataRelation("tb_microarea_tb_paciente", New System.Data.DataColumn() {Me.tabletb_microarea.cod_microareaColumn}, New System.Data.DataColumn() {Me.tabletb_paciente.FKcod_microareaColumn}, false)
        Me.Relations.Add(Me.relationtb_microarea_tb_paciente)
        Me.relationtb_usuario_tb_ent_secretaria = New System.Data.DataRelation("tb_usuario_tb_ent_secretaria", New System.Data.DataColumn() {Me.tabletb_usuario.cod_usuarioColumn}, New System.Data.DataColumn() {Me.tabletb_ent_secretaria.FKcod_usuarioColumn}, false)
        Me.Relations.Add(Me.relationtb_usuario_tb_ent_secretaria)
        Me.relationtb_medicamento_tb_ent_secretaria = New System.Data.DataRelation("tb_medicamento_tb_ent_secretaria", New System.Data.DataColumn() {Me.tabletb_medicamento.cod_medicamentoColumn}, New System.Data.DataColumn() {Me.tabletb_ent_secretaria.FKcod_medicamentoColumn}, false)
        Me.Relations.Add(Me.relationtb_medicamento_tb_ent_secretaria)
        Me.relationtb_usuario_tb_sai_secretaria = New System.Data.DataRelation("tb_usuario_tb_sai_secretaria", New System.Data.DataColumn() {Me.tabletb_usuario.cod_usuarioColumn}, New System.Data.DataColumn() {Me.tabletb_sai_secretaria.FKcod_usuarioColumn}, false)
        Me.Relations.Add(Me.relationtb_usuario_tb_sai_secretaria)
        Me.relationtb_regiao_tb_sai_secretaria = New System.Data.DataRelation("tb_regiao_tb_sai_secretaria", New System.Data.DataColumn() {Me.tabletb_regiao.cod_regiaoColumn}, New System.Data.DataColumn() {Me.tabletb_sai_secretaria.FKcod_regiaoColumn}, false)
        Me.Relations.Add(Me.relationtb_regiao_tb_sai_secretaria)
        Me.relationtb_medicamento_tb_sai_secretaria = New System.Data.DataRelation("tb_medicamento_tb_sai_secretaria", New System.Data.DataColumn() {Me.tabletb_medicamento.cod_medicamentoColumn}, New System.Data.DataColumn() {Me.tabletb_sai_secretaria.FKcod_medicamentoColumn}, false)
        Me.Relations.Add(Me.relationtb_medicamento_tb_sai_secretaria)
        Me.relationtb_medicamento_tb_sai_policlinica = New System.Data.DataRelation("tb_medicamento_tb_sai_policlinica", New System.Data.DataColumn() {Me.tabletb_medicamento.cod_medicamentoColumn}, New System.Data.DataColumn() {Me.tabletb_sai_policlinica.FKcod_medicamentoColumn}, false)
        Me.Relations.Add(Me.relationtb_medicamento_tb_sai_policlinica)
        Me.relationtb_usuario_tb_sai_policlinica = New System.Data.DataRelation("tb_usuario_tb_sai_policlinica", New System.Data.DataColumn() {Me.tabletb_usuario.cod_usuarioColumn}, New System.Data.DataColumn() {Me.tabletb_sai_policlinica.FKcod_usuarioColumn}, false)
        Me.Relations.Add(Me.relationtb_usuario_tb_sai_policlinica)
        Me.relationtb_paciente_tb_sai_policlinica = New System.Data.DataRelation("tb_paciente_tb_sai_policlinica", New System.Data.DataColumn() {Me.tabletb_paciente.cod_pacienteColumn}, New System.Data.DataColumn() {Me.tabletb_sai_policlinica.FKcod_pacienteColumn}, false)
        Me.Relations.Add(Me.relationtb_paciente_tb_sai_policlinica)
        Me.relationtb_medicamento_tb_ent_policlinica = New System.Data.DataRelation("tb_medicamento_tb_ent_policlinica", New System.Data.DataColumn() {Me.tabletb_medicamento.cod_medicamentoColumn}, New System.Data.DataColumn() {Me.tabletb_ent_policlinica.FKcod_medicamentoColumn}, false)
        Me.Relations.Add(Me.relationtb_medicamento_tb_ent_policlinica)
        Me.relationtb_usuario_tb_ent_policlinica = New System.Data.DataRelation("tb_usuario_tb_ent_policlinica", New System.Data.DataColumn() {Me.tabletb_usuario.cod_usuarioColumn}, New System.Data.DataColumn() {Me.tabletb_ent_policlinica.FKcod_usuarioColumn}, false)
        Me.Relations.Add(Me.relationtb_usuario_tb_ent_policlinica)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetb_usuario() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetb_perfil() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetb_paciente() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetb_microarea() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetb_medicamento() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetb_ent_secretaria() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetb_sai_secretaria() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetb_regiao() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializevw_ENTRADAS_SECRETARIA() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializevw_SAIDAS_SECRETARIA() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializevw_ENTRADAS_POLICLINICA() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetb_sai_policlinica() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetb_ent_policlinica() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializevw_SAIDAS_POLICLINICA() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dtsBD_SICEP = New dtsBD_SICEP
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub tb_usuarioRowChangeEventHandler(ByVal sender As Object, ByVal e As tb_usuarioRowChangeEvent)
    
    Public Delegate Sub tb_perfilRowChangeEventHandler(ByVal sender As Object, ByVal e As tb_perfilRowChangeEvent)
    
    Public Delegate Sub tb_pacienteRowChangeEventHandler(ByVal sender As Object, ByVal e As tb_pacienteRowChangeEvent)
    
    Public Delegate Sub tb_microareaRowChangeEventHandler(ByVal sender As Object, ByVal e As tb_microareaRowChangeEvent)
    
    Public Delegate Sub tb_medicamentoRowChangeEventHandler(ByVal sender As Object, ByVal e As tb_medicamentoRowChangeEvent)
    
    Public Delegate Sub tb_ent_secretariaRowChangeEventHandler(ByVal sender As Object, ByVal e As tb_ent_secretariaRowChangeEvent)
    
    Public Delegate Sub tb_sai_secretariaRowChangeEventHandler(ByVal sender As Object, ByVal e As tb_sai_secretariaRowChangeEvent)
    
    Public Delegate Sub tb_regiaoRowChangeEventHandler(ByVal sender As Object, ByVal e As tb_regiaoRowChangeEvent)
    
    Public Delegate Sub vw_ENTRADAS_SECRETARIARowChangeEventHandler(ByVal sender As Object, ByVal e As vw_ENTRADAS_SECRETARIARowChangeEvent)
    
    Public Delegate Sub vw_SAIDAS_SECRETARIARowChangeEventHandler(ByVal sender As Object, ByVal e As vw_SAIDAS_SECRETARIARowChangeEvent)
    
    Public Delegate Sub vw_ENTRADAS_POLICLINICARowChangeEventHandler(ByVal sender As Object, ByVal e As vw_ENTRADAS_POLICLINICARowChangeEvent)
    
    Public Delegate Sub tb_sai_policlinicaRowChangeEventHandler(ByVal sender As Object, ByVal e As tb_sai_policlinicaRowChangeEvent)
    
    Public Delegate Sub tb_ent_policlinicaRowChangeEventHandler(ByVal sender As Object, ByVal e As tb_ent_policlinicaRowChangeEvent)
    
    Public Delegate Sub vw_SAIDAS_POLICLINICARowChangeEventHandler(ByVal sender As Object, ByVal e As vw_SAIDAS_POLICLINICARowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tb_usuarioDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_usuario As System.Data.DataColumn
        
        Private columnnome_usuario As System.Data.DataColumn
        
        Private columncargo_usuario As System.Data.DataColumn
        
        Private columnend_usuario As System.Data.DataColumn
        
        Private columntel_res_usuario As System.Data.DataColumn
        
        Private columntel_cel_usuario As System.Data.DataColumn
        
        Private columnemail_usuario As System.Data.DataColumn
        
        Private columnCPF_usuario As System.Data.DataColumn
        
        Private columnRG_usuario As System.Data.DataColumn
        
        Private columnlogin_usuario As System.Data.DataColumn
        
        Private columnsenha_usuario As System.Data.DataColumn
        
        Private columndata_cad_usuario As System.Data.DataColumn
        
        Private columnFKcod_perfil As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tb_usuario"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cod_usuarioColumn() As System.Data.DataColumn
            Get
                Return Me.columncod_usuario
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nome_usuarioColumn() As System.Data.DataColumn
            Get
                Return Me.columnnome_usuario
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cargo_usuarioColumn() As System.Data.DataColumn
            Get
                Return Me.columncargo_usuario
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property end_usuarioColumn() As System.Data.DataColumn
            Get
                Return Me.columnend_usuario
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tel_res_usuarioColumn() As System.Data.DataColumn
            Get
                Return Me.columntel_res_usuario
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tel_cel_usuarioColumn() As System.Data.DataColumn
            Get
                Return Me.columntel_cel_usuario
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property email_usuarioColumn() As System.Data.DataColumn
            Get
                Return Me.columnemail_usuario
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CPF_usuarioColumn() As System.Data.DataColumn
            Get
                Return Me.columnCPF_usuario
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RG_usuarioColumn() As System.Data.DataColumn
            Get
                Return Me.columnRG_usuario
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property login_usuarioColumn() As System.Data.DataColumn
            Get
                Return Me.columnlogin_usuario
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property senha_usuarioColumn() As System.Data.DataColumn
            Get
                Return Me.columnsenha_usuario
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property data_cad_usuarioColumn() As System.Data.DataColumn
            Get
                Return Me.columndata_cad_usuario
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FKcod_perfilColumn() As System.Data.DataColumn
            Get
                Return Me.columnFKcod_perfil
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tb_usuarioRow
            Get
                Return CType(Me.Rows(index),tb_usuarioRow)
            End Get
        End Property
        
        Public Event tb_usuarioRowChanging As tb_usuarioRowChangeEventHandler
        
        Public Event tb_usuarioRowChanged As tb_usuarioRowChangeEventHandler
        
        Public Event tb_usuarioRowDeleting As tb_usuarioRowChangeEventHandler
        
        Public Event tb_usuarioRowDeleted As tb_usuarioRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addtb_usuarioRow(ByVal row As tb_usuarioRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addtb_usuarioRow(ByVal nome_usuario As String, ByVal cargo_usuario As String, ByVal end_usuario As String, ByVal tel_res_usuario As String, ByVal tel_cel_usuario As String, ByVal email_usuario As String, ByVal CPF_usuario As String, ByVal RG_usuario As String, ByVal login_usuario As String, ByVal senha_usuario As String, ByVal data_cad_usuario As Date, ByVal parenttb_perfilRowByFK_tb_usuario_tb_perfil As tb_perfilRow) As tb_usuarioRow
            Dim rowtb_usuarioRow As tb_usuarioRow = CType(Me.NewRow,tb_usuarioRow)
            rowtb_usuarioRow.ItemArray = New Object() {Nothing, nome_usuario, cargo_usuario, end_usuario, tel_res_usuario, tel_cel_usuario, email_usuario, CPF_usuario, RG_usuario, login_usuario, senha_usuario, data_cad_usuario, parenttb_perfilRowByFK_tb_usuario_tb_perfil(0)}
            Me.Rows.Add(rowtb_usuarioRow)
            Return rowtb_usuarioRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBycod_usuario(ByVal cod_usuario As Long) As tb_usuarioRow
            Return CType(Me.Rows.Find(New Object() {cod_usuario}),tb_usuarioRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As tb_usuarioDataTable = CType(MyBase.Clone,tb_usuarioDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New tb_usuarioDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncod_usuario = MyBase.Columns("cod_usuario")
            Me.columnnome_usuario = MyBase.Columns("nome_usuario")
            Me.columncargo_usuario = MyBase.Columns("cargo_usuario")
            Me.columnend_usuario = MyBase.Columns("end_usuario")
            Me.columntel_res_usuario = MyBase.Columns("tel_res_usuario")
            Me.columntel_cel_usuario = MyBase.Columns("tel_cel_usuario")
            Me.columnemail_usuario = MyBase.Columns("email_usuario")
            Me.columnCPF_usuario = MyBase.Columns("CPF_usuario")
            Me.columnRG_usuario = MyBase.Columns("RG_usuario")
            Me.columnlogin_usuario = MyBase.Columns("login_usuario")
            Me.columnsenha_usuario = MyBase.Columns("senha_usuario")
            Me.columndata_cad_usuario = MyBase.Columns("data_cad_usuario")
            Me.columnFKcod_perfil = MyBase.Columns("FKcod_perfil")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncod_usuario = New System.Data.DataColumn("cod_usuario", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncod_usuario)
            Me.columnnome_usuario = New System.Data.DataColumn("nome_usuario", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnome_usuario)
            Me.columncargo_usuario = New System.Data.DataColumn("cargo_usuario", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncargo_usuario)
            Me.columnend_usuario = New System.Data.DataColumn("end_usuario", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnend_usuario)
            Me.columntel_res_usuario = New System.Data.DataColumn("tel_res_usuario", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntel_res_usuario)
            Me.columntel_cel_usuario = New System.Data.DataColumn("tel_cel_usuario", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntel_cel_usuario)
            Me.columnemail_usuario = New System.Data.DataColumn("email_usuario", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnemail_usuario)
            Me.columnCPF_usuario = New System.Data.DataColumn("CPF_usuario", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCPF_usuario)
            Me.columnRG_usuario = New System.Data.DataColumn("RG_usuario", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRG_usuario)
            Me.columnlogin_usuario = New System.Data.DataColumn("login_usuario", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlogin_usuario)
            Me.columnsenha_usuario = New System.Data.DataColumn("senha_usuario", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsenha_usuario)
            Me.columndata_cad_usuario = New System.Data.DataColumn("data_cad_usuario", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndata_cad_usuario)
            Me.columnFKcod_perfil = New System.Data.DataColumn("FKcod_perfil", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFKcod_perfil)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columncod_usuario}, true))
            Me.columncod_usuario.AutoIncrement = true
            Me.columncod_usuario.AllowDBNull = false
            Me.columncod_usuario.ReadOnly = true
            Me.columncod_usuario.Unique = true
            Me.columnnome_usuario.AllowDBNull = false
            Me.columnnome_usuario.MaxLength = 100
            Me.columncargo_usuario.AllowDBNull = false
            Me.columncargo_usuario.MaxLength = 100
            Me.columnend_usuario.MaxLength = 100
            Me.columntel_res_usuario.MaxLength = 13
            Me.columntel_cel_usuario.MaxLength = 13
            Me.columnemail_usuario.MaxLength = 100
            Me.columnCPF_usuario.AllowDBNull = false
            Me.columnCPF_usuario.MaxLength = 15
            Me.columnRG_usuario.AllowDBNull = false
            Me.columnRG_usuario.MaxLength = 20
            Me.columnlogin_usuario.AllowDBNull = false
            Me.columnlogin_usuario.MaxLength = 20
            Me.columnsenha_usuario.AllowDBNull = false
            Me.columnsenha_usuario.MaxLength = 20
            Me.columndata_cad_usuario.AllowDBNull = false
            Me.columnFKcod_perfil.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newtb_usuarioRow() As tb_usuarioRow
            Return CType(Me.NewRow,tb_usuarioRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New tb_usuarioRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tb_usuarioRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tb_usuarioRowChangedEvent) Is Nothing) Then
                RaiseEvent tb_usuarioRowChanged(Me, New tb_usuarioRowChangeEvent(CType(e.Row,tb_usuarioRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tb_usuarioRowChangingEvent) Is Nothing) Then
                RaiseEvent tb_usuarioRowChanging(Me, New tb_usuarioRowChangeEvent(CType(e.Row,tb_usuarioRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tb_usuarioRowDeletedEvent) Is Nothing) Then
                RaiseEvent tb_usuarioRowDeleted(Me, New tb_usuarioRowChangeEvent(CType(e.Row,tb_usuarioRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tb_usuarioRowDeletingEvent) Is Nothing) Then
                RaiseEvent tb_usuarioRowDeleting(Me, New tb_usuarioRowChangeEvent(CType(e.Row,tb_usuarioRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removetb_usuarioRow(ByVal row As tb_usuarioRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtsBD_SICEP = New dtsBD_SICEP
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tb_usuarioDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tb_perfilDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_perfil As System.Data.DataColumn
        
        Private columnnome_perfil As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tb_perfil"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cod_perfilColumn() As System.Data.DataColumn
            Get
                Return Me.columncod_perfil
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nome_perfilColumn() As System.Data.DataColumn
            Get
                Return Me.columnnome_perfil
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tb_perfilRow
            Get
                Return CType(Me.Rows(index),tb_perfilRow)
            End Get
        End Property
        
        Public Event tb_perfilRowChanging As tb_perfilRowChangeEventHandler
        
        Public Event tb_perfilRowChanged As tb_perfilRowChangeEventHandler
        
        Public Event tb_perfilRowDeleting As tb_perfilRowChangeEventHandler
        
        Public Event tb_perfilRowDeleted As tb_perfilRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addtb_perfilRow(ByVal row As tb_perfilRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addtb_perfilRow(ByVal nome_perfil As String) As tb_perfilRow
            Dim rowtb_perfilRow As tb_perfilRow = CType(Me.NewRow,tb_perfilRow)
            rowtb_perfilRow.ItemArray = New Object() {Nothing, nome_perfil}
            Me.Rows.Add(rowtb_perfilRow)
            Return rowtb_perfilRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBycod_perfil(ByVal cod_perfil As Long) As tb_perfilRow
            Return CType(Me.Rows.Find(New Object() {cod_perfil}),tb_perfilRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As tb_perfilDataTable = CType(MyBase.Clone,tb_perfilDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New tb_perfilDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncod_perfil = MyBase.Columns("cod_perfil")
            Me.columnnome_perfil = MyBase.Columns("nome_perfil")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncod_perfil = New System.Data.DataColumn("cod_perfil", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncod_perfil)
            Me.columnnome_perfil = New System.Data.DataColumn("nome_perfil", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnome_perfil)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columncod_perfil}, true))
            Me.columncod_perfil.AutoIncrement = true
            Me.columncod_perfil.AllowDBNull = false
            Me.columncod_perfil.ReadOnly = true
            Me.columncod_perfil.Unique = true
            Me.columnnome_perfil.AllowDBNull = false
            Me.columnnome_perfil.MaxLength = 50
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newtb_perfilRow() As tb_perfilRow
            Return CType(Me.NewRow,tb_perfilRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New tb_perfilRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tb_perfilRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tb_perfilRowChangedEvent) Is Nothing) Then
                RaiseEvent tb_perfilRowChanged(Me, New tb_perfilRowChangeEvent(CType(e.Row,tb_perfilRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tb_perfilRowChangingEvent) Is Nothing) Then
                RaiseEvent tb_perfilRowChanging(Me, New tb_perfilRowChangeEvent(CType(e.Row,tb_perfilRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tb_perfilRowDeletedEvent) Is Nothing) Then
                RaiseEvent tb_perfilRowDeleted(Me, New tb_perfilRowChangeEvent(CType(e.Row,tb_perfilRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tb_perfilRowDeletingEvent) Is Nothing) Then
                RaiseEvent tb_perfilRowDeleting(Me, New tb_perfilRowChangeEvent(CType(e.Row,tb_perfilRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removetb_perfilRow(ByVal row As tb_perfilRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtsBD_SICEP = New dtsBD_SICEP
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tb_perfilDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tb_pacienteDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_paciente As System.Data.DataColumn
        
        Private columndata_cad_paciente As System.Data.DataColumn
        
        Private columnnome_paciente As System.Data.DataColumn
        
        Private columnend_paciente As System.Data.DataColumn
        
        Private columndata_nasc_paciente As System.Data.DataColumn
        
        Private columnsexo_paciente As System.Data.DataColumn
        
        Private columntel_paciente As System.Data.DataColumn
        
        Private columnnome_mae_paciente As System.Data.DataColumn
        
        Private columnCPF_paciente As System.Data.DataColumn
        
        Private columnRG_paciente As System.Data.DataColumn
        
        Private columnFKcod_microarea As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tb_paciente"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cod_pacienteColumn() As System.Data.DataColumn
            Get
                Return Me.columncod_paciente
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property data_cad_pacienteColumn() As System.Data.DataColumn
            Get
                Return Me.columndata_cad_paciente
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nome_pacienteColumn() As System.Data.DataColumn
            Get
                Return Me.columnnome_paciente
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property end_pacienteColumn() As System.Data.DataColumn
            Get
                Return Me.columnend_paciente
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property data_nasc_pacienteColumn() As System.Data.DataColumn
            Get
                Return Me.columndata_nasc_paciente
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sexo_pacienteColumn() As System.Data.DataColumn
            Get
                Return Me.columnsexo_paciente
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tel_pacienteColumn() As System.Data.DataColumn
            Get
                Return Me.columntel_paciente
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nome_mae_pacienteColumn() As System.Data.DataColumn
            Get
                Return Me.columnnome_mae_paciente
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CPF_pacienteColumn() As System.Data.DataColumn
            Get
                Return Me.columnCPF_paciente
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RG_pacienteColumn() As System.Data.DataColumn
            Get
                Return Me.columnRG_paciente
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FKcod_microareaColumn() As System.Data.DataColumn
            Get
                Return Me.columnFKcod_microarea
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tb_pacienteRow
            Get
                Return CType(Me.Rows(index),tb_pacienteRow)
            End Get
        End Property
        
        Public Event tb_pacienteRowChanging As tb_pacienteRowChangeEventHandler
        
        Public Event tb_pacienteRowChanged As tb_pacienteRowChangeEventHandler
        
        Public Event tb_pacienteRowDeleting As tb_pacienteRowChangeEventHandler
        
        Public Event tb_pacienteRowDeleted As tb_pacienteRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addtb_pacienteRow(ByVal row As tb_pacienteRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addtb_pacienteRow(ByVal data_cad_paciente As Date, ByVal nome_paciente As String, ByVal end_paciente As String, ByVal data_nasc_paciente As String, ByVal sexo_paciente As String, ByVal tel_paciente As String, ByVal nome_mae_paciente As String, ByVal CPF_paciente As String, ByVal RG_paciente As String, ByVal parenttb_microareaRowBytb_microarea_tb_paciente As tb_microareaRow) As tb_pacienteRow
            Dim rowtb_pacienteRow As tb_pacienteRow = CType(Me.NewRow,tb_pacienteRow)
            rowtb_pacienteRow.ItemArray = New Object() {Nothing, data_cad_paciente, nome_paciente, end_paciente, data_nasc_paciente, sexo_paciente, tel_paciente, nome_mae_paciente, CPF_paciente, RG_paciente, parenttb_microareaRowBytb_microarea_tb_paciente(0)}
            Me.Rows.Add(rowtb_pacienteRow)
            Return rowtb_pacienteRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBycod_paciente(ByVal cod_paciente As Long) As tb_pacienteRow
            Return CType(Me.Rows.Find(New Object() {cod_paciente}),tb_pacienteRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As tb_pacienteDataTable = CType(MyBase.Clone,tb_pacienteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New tb_pacienteDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncod_paciente = MyBase.Columns("cod_paciente")
            Me.columndata_cad_paciente = MyBase.Columns("data_cad_paciente")
            Me.columnnome_paciente = MyBase.Columns("nome_paciente")
            Me.columnend_paciente = MyBase.Columns("end_paciente")
            Me.columndata_nasc_paciente = MyBase.Columns("data_nasc_paciente")
            Me.columnsexo_paciente = MyBase.Columns("sexo_paciente")
            Me.columntel_paciente = MyBase.Columns("tel_paciente")
            Me.columnnome_mae_paciente = MyBase.Columns("nome_mae_paciente")
            Me.columnCPF_paciente = MyBase.Columns("CPF_paciente")
            Me.columnRG_paciente = MyBase.Columns("RG_paciente")
            Me.columnFKcod_microarea = MyBase.Columns("FKcod_microarea")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncod_paciente = New System.Data.DataColumn("cod_paciente", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncod_paciente)
            Me.columndata_cad_paciente = New System.Data.DataColumn("data_cad_paciente", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndata_cad_paciente)
            Me.columnnome_paciente = New System.Data.DataColumn("nome_paciente", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnome_paciente)
            Me.columnend_paciente = New System.Data.DataColumn("end_paciente", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnend_paciente)
            Me.columndata_nasc_paciente = New System.Data.DataColumn("data_nasc_paciente", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndata_nasc_paciente)
            Me.columnsexo_paciente = New System.Data.DataColumn("sexo_paciente", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsexo_paciente)
            Me.columntel_paciente = New System.Data.DataColumn("tel_paciente", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntel_paciente)
            Me.columnnome_mae_paciente = New System.Data.DataColumn("nome_mae_paciente", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnome_mae_paciente)
            Me.columnCPF_paciente = New System.Data.DataColumn("CPF_paciente", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCPF_paciente)
            Me.columnRG_paciente = New System.Data.DataColumn("RG_paciente", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRG_paciente)
            Me.columnFKcod_microarea = New System.Data.DataColumn("FKcod_microarea", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFKcod_microarea)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columncod_paciente}, true))
            Me.columncod_paciente.AutoIncrement = true
            Me.columncod_paciente.AllowDBNull = false
            Me.columncod_paciente.ReadOnly = true
            Me.columncod_paciente.Unique = true
            Me.columndata_cad_paciente.AllowDBNull = false
            Me.columnnome_paciente.AllowDBNull = false
            Me.columnnome_paciente.MaxLength = 100
            Me.columnend_paciente.AllowDBNull = false
            Me.columnend_paciente.MaxLength = 100
            Me.columndata_nasc_paciente.AllowDBNull = false
            Me.columndata_nasc_paciente.MaxLength = 10
            Me.columnsexo_paciente.AllowDBNull = false
            Me.columnsexo_paciente.MaxLength = 1
            Me.columntel_paciente.AllowDBNull = false
            Me.columntel_paciente.MaxLength = 13
            Me.columnnome_mae_paciente.AllowDBNull = false
            Me.columnnome_mae_paciente.MaxLength = 100
            Me.columnCPF_paciente.AllowDBNull = false
            Me.columnCPF_paciente.MaxLength = 15
            Me.columnRG_paciente.AllowDBNull = false
            Me.columnRG_paciente.MaxLength = 20
            Me.columnFKcod_microarea.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newtb_pacienteRow() As tb_pacienteRow
            Return CType(Me.NewRow,tb_pacienteRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New tb_pacienteRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tb_pacienteRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tb_pacienteRowChangedEvent) Is Nothing) Then
                RaiseEvent tb_pacienteRowChanged(Me, New tb_pacienteRowChangeEvent(CType(e.Row,tb_pacienteRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tb_pacienteRowChangingEvent) Is Nothing) Then
                RaiseEvent tb_pacienteRowChanging(Me, New tb_pacienteRowChangeEvent(CType(e.Row,tb_pacienteRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tb_pacienteRowDeletedEvent) Is Nothing) Then
                RaiseEvent tb_pacienteRowDeleted(Me, New tb_pacienteRowChangeEvent(CType(e.Row,tb_pacienteRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tb_pacienteRowDeletingEvent) Is Nothing) Then
                RaiseEvent tb_pacienteRowDeleting(Me, New tb_pacienteRowChangeEvent(CType(e.Row,tb_pacienteRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removetb_pacienteRow(ByVal row As tb_pacienteRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtsBD_SICEP = New dtsBD_SICEP
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tb_pacienteDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tb_microareaDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_microarea As System.Data.DataColumn
        
        Private columndata_cad_microarea As System.Data.DataColumn
        
        Private columnagente_microarea As System.Data.DataColumn
        
        Private columnobs_microarea As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tb_microarea"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cod_microareaColumn() As System.Data.DataColumn
            Get
                Return Me.columncod_microarea
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property data_cad_microareaColumn() As System.Data.DataColumn
            Get
                Return Me.columndata_cad_microarea
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property agente_microareaColumn() As System.Data.DataColumn
            Get
                Return Me.columnagente_microarea
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property obs_microareaColumn() As System.Data.DataColumn
            Get
                Return Me.columnobs_microarea
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tb_microareaRow
            Get
                Return CType(Me.Rows(index),tb_microareaRow)
            End Get
        End Property
        
        Public Event tb_microareaRowChanging As tb_microareaRowChangeEventHandler
        
        Public Event tb_microareaRowChanged As tb_microareaRowChangeEventHandler
        
        Public Event tb_microareaRowDeleting As tb_microareaRowChangeEventHandler
        
        Public Event tb_microareaRowDeleted As tb_microareaRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addtb_microareaRow(ByVal row As tb_microareaRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addtb_microareaRow(ByVal data_cad_microarea As Date, ByVal agente_microarea As String, ByVal obs_microarea As String) As tb_microareaRow
            Dim rowtb_microareaRow As tb_microareaRow = CType(Me.NewRow,tb_microareaRow)
            rowtb_microareaRow.ItemArray = New Object() {Nothing, data_cad_microarea, agente_microarea, obs_microarea}
            Me.Rows.Add(rowtb_microareaRow)
            Return rowtb_microareaRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBycod_microarea(ByVal cod_microarea As Long) As tb_microareaRow
            Return CType(Me.Rows.Find(New Object() {cod_microarea}),tb_microareaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As tb_microareaDataTable = CType(MyBase.Clone,tb_microareaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New tb_microareaDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncod_microarea = MyBase.Columns("cod_microarea")
            Me.columndata_cad_microarea = MyBase.Columns("data_cad_microarea")
            Me.columnagente_microarea = MyBase.Columns("agente_microarea")
            Me.columnobs_microarea = MyBase.Columns("obs_microarea")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncod_microarea = New System.Data.DataColumn("cod_microarea", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncod_microarea)
            Me.columndata_cad_microarea = New System.Data.DataColumn("data_cad_microarea", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndata_cad_microarea)
            Me.columnagente_microarea = New System.Data.DataColumn("agente_microarea", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnagente_microarea)
            Me.columnobs_microarea = New System.Data.DataColumn("obs_microarea", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnobs_microarea)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columncod_microarea}, true))
            Me.columncod_microarea.AutoIncrement = true
            Me.columncod_microarea.AllowDBNull = false
            Me.columncod_microarea.ReadOnly = true
            Me.columncod_microarea.Unique = true
            Me.columndata_cad_microarea.AllowDBNull = false
            Me.columnagente_microarea.AllowDBNull = false
            Me.columnagente_microarea.MaxLength = 100
            Me.columnobs_microarea.AllowDBNull = false
            Me.columnobs_microarea.MaxLength = 2000
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newtb_microareaRow() As tb_microareaRow
            Return CType(Me.NewRow,tb_microareaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New tb_microareaRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tb_microareaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tb_microareaRowChangedEvent) Is Nothing) Then
                RaiseEvent tb_microareaRowChanged(Me, New tb_microareaRowChangeEvent(CType(e.Row,tb_microareaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tb_microareaRowChangingEvent) Is Nothing) Then
                RaiseEvent tb_microareaRowChanging(Me, New tb_microareaRowChangeEvent(CType(e.Row,tb_microareaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tb_microareaRowDeletedEvent) Is Nothing) Then
                RaiseEvent tb_microareaRowDeleted(Me, New tb_microareaRowChangeEvent(CType(e.Row,tb_microareaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tb_microareaRowDeletingEvent) Is Nothing) Then
                RaiseEvent tb_microareaRowDeleting(Me, New tb_microareaRowChangeEvent(CType(e.Row,tb_microareaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removetb_microareaRow(ByVal row As tb_microareaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtsBD_SICEP = New dtsBD_SICEP
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tb_microareaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tb_medicamentoDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_medicamento As System.Data.DataColumn
        
        Private columndata_cad_medicamento As System.Data.DataColumn
        
        Private columnnome_medicamento As System.Data.DataColumn
        
        Private columncomposicao_medicamento As System.Data.DataColumn
        
        Private columninfo_medicamento As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tb_medicamento"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cod_medicamentoColumn() As System.Data.DataColumn
            Get
                Return Me.columncod_medicamento
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property data_cad_medicamentoColumn() As System.Data.DataColumn
            Get
                Return Me.columndata_cad_medicamento
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nome_medicamentoColumn() As System.Data.DataColumn
            Get
                Return Me.columnnome_medicamento
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property composicao_medicamentoColumn() As System.Data.DataColumn
            Get
                Return Me.columncomposicao_medicamento
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property info_medicamentoColumn() As System.Data.DataColumn
            Get
                Return Me.columninfo_medicamento
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tb_medicamentoRow
            Get
                Return CType(Me.Rows(index),tb_medicamentoRow)
            End Get
        End Property
        
        Public Event tb_medicamentoRowChanging As tb_medicamentoRowChangeEventHandler
        
        Public Event tb_medicamentoRowChanged As tb_medicamentoRowChangeEventHandler
        
        Public Event tb_medicamentoRowDeleting As tb_medicamentoRowChangeEventHandler
        
        Public Event tb_medicamentoRowDeleted As tb_medicamentoRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addtb_medicamentoRow(ByVal row As tb_medicamentoRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addtb_medicamentoRow(ByVal data_cad_medicamento As Date, ByVal nome_medicamento As String, ByVal composicao_medicamento As String, ByVal info_medicamento As String) As tb_medicamentoRow
            Dim rowtb_medicamentoRow As tb_medicamentoRow = CType(Me.NewRow,tb_medicamentoRow)
            rowtb_medicamentoRow.ItemArray = New Object() {Nothing, data_cad_medicamento, nome_medicamento, composicao_medicamento, info_medicamento}
            Me.Rows.Add(rowtb_medicamentoRow)
            Return rowtb_medicamentoRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBycod_medicamento(ByVal cod_medicamento As Long) As tb_medicamentoRow
            Return CType(Me.Rows.Find(New Object() {cod_medicamento}),tb_medicamentoRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As tb_medicamentoDataTable = CType(MyBase.Clone,tb_medicamentoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New tb_medicamentoDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncod_medicamento = MyBase.Columns("cod_medicamento")
            Me.columndata_cad_medicamento = MyBase.Columns("data_cad_medicamento")
            Me.columnnome_medicamento = MyBase.Columns("nome_medicamento")
            Me.columncomposicao_medicamento = MyBase.Columns("composicao_medicamento")
            Me.columninfo_medicamento = MyBase.Columns("info_medicamento")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncod_medicamento = New System.Data.DataColumn("cod_medicamento", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncod_medicamento)
            Me.columndata_cad_medicamento = New System.Data.DataColumn("data_cad_medicamento", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndata_cad_medicamento)
            Me.columnnome_medicamento = New System.Data.DataColumn("nome_medicamento", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnome_medicamento)
            Me.columncomposicao_medicamento = New System.Data.DataColumn("composicao_medicamento", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncomposicao_medicamento)
            Me.columninfo_medicamento = New System.Data.DataColumn("info_medicamento", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninfo_medicamento)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columncod_medicamento}, true))
            Me.columncod_medicamento.AutoIncrement = true
            Me.columncod_medicamento.AllowDBNull = false
            Me.columncod_medicamento.ReadOnly = true
            Me.columncod_medicamento.Unique = true
            Me.columndata_cad_medicamento.AllowDBNull = false
            Me.columnnome_medicamento.AllowDBNull = false
            Me.columnnome_medicamento.MaxLength = 100
            Me.columncomposicao_medicamento.AllowDBNull = false
            Me.columncomposicao_medicamento.MaxLength = 100
            Me.columninfo_medicamento.AllowDBNull = false
            Me.columninfo_medicamento.MaxLength = 2000
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newtb_medicamentoRow() As tb_medicamentoRow
            Return CType(Me.NewRow,tb_medicamentoRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New tb_medicamentoRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tb_medicamentoRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tb_medicamentoRowChangedEvent) Is Nothing) Then
                RaiseEvent tb_medicamentoRowChanged(Me, New tb_medicamentoRowChangeEvent(CType(e.Row,tb_medicamentoRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tb_medicamentoRowChangingEvent) Is Nothing) Then
                RaiseEvent tb_medicamentoRowChanging(Me, New tb_medicamentoRowChangeEvent(CType(e.Row,tb_medicamentoRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tb_medicamentoRowDeletedEvent) Is Nothing) Then
                RaiseEvent tb_medicamentoRowDeleted(Me, New tb_medicamentoRowChangeEvent(CType(e.Row,tb_medicamentoRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tb_medicamentoRowDeletingEvent) Is Nothing) Then
                RaiseEvent tb_medicamentoRowDeleting(Me, New tb_medicamentoRowChangeEvent(CType(e.Row,tb_medicamentoRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removetb_medicamentoRow(ByVal row As tb_medicamentoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtsBD_SICEP = New dtsBD_SICEP
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tb_medicamentoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tb_ent_secretariaDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_ent_sec As System.Data.DataColumn
        
        Private columndata_ent_sec As System.Data.DataColumn
        
        Private columnlote_ent_sec As System.Data.DataColumn
        
        Private columnnota_ent_sec As System.Data.DataColumn
        
        Private columnFKcod_medicamento As System.Data.DataColumn
        
        Private columnvalidade_ent_sec As System.Data.DataColumn
        
        Private columnquantidade_ent_sec As System.Data.DataColumn
        
        Private columnFKcod_usuario As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tb_ent_secretaria"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cod_ent_secColumn() As System.Data.DataColumn
            Get
                Return Me.columncod_ent_sec
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property data_ent_secColumn() As System.Data.DataColumn
            Get
                Return Me.columndata_ent_sec
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lote_ent_secColumn() As System.Data.DataColumn
            Get
                Return Me.columnlote_ent_sec
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nota_ent_secColumn() As System.Data.DataColumn
            Get
                Return Me.columnnota_ent_sec
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FKcod_medicamentoColumn() As System.Data.DataColumn
            Get
                Return Me.columnFKcod_medicamento
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property validade_ent_secColumn() As System.Data.DataColumn
            Get
                Return Me.columnvalidade_ent_sec
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property quantidade_ent_secColumn() As System.Data.DataColumn
            Get
                Return Me.columnquantidade_ent_sec
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FKcod_usuarioColumn() As System.Data.DataColumn
            Get
                Return Me.columnFKcod_usuario
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tb_ent_secretariaRow
            Get
                Return CType(Me.Rows(index),tb_ent_secretariaRow)
            End Get
        End Property
        
        Public Event tb_ent_secretariaRowChanging As tb_ent_secretariaRowChangeEventHandler
        
        Public Event tb_ent_secretariaRowChanged As tb_ent_secretariaRowChangeEventHandler
        
        Public Event tb_ent_secretariaRowDeleting As tb_ent_secretariaRowChangeEventHandler
        
        Public Event tb_ent_secretariaRowDeleted As tb_ent_secretariaRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addtb_ent_secretariaRow(ByVal row As tb_ent_secretariaRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addtb_ent_secretariaRow(ByVal data_ent_sec As Date, ByVal lote_ent_sec As String, ByVal nota_ent_sec As String, ByVal parenttb_medicamentoRowBytb_medicamento_tb_ent_secretaria As tb_medicamentoRow, ByVal validade_ent_sec As String, ByVal quantidade_ent_sec As Long, ByVal parenttb_usuarioRowBytb_usuario_tb_ent_secretaria As tb_usuarioRow) As tb_ent_secretariaRow
            Dim rowtb_ent_secretariaRow As tb_ent_secretariaRow = CType(Me.NewRow,tb_ent_secretariaRow)
            rowtb_ent_secretariaRow.ItemArray = New Object() {Nothing, data_ent_sec, lote_ent_sec, nota_ent_sec, parenttb_medicamentoRowBytb_medicamento_tb_ent_secretaria(0), validade_ent_sec, quantidade_ent_sec, parenttb_usuarioRowBytb_usuario_tb_ent_secretaria(0)}
            Me.Rows.Add(rowtb_ent_secretariaRow)
            Return rowtb_ent_secretariaRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBycod_ent_sec(ByVal cod_ent_sec As Long) As tb_ent_secretariaRow
            Return CType(Me.Rows.Find(New Object() {cod_ent_sec}),tb_ent_secretariaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As tb_ent_secretariaDataTable = CType(MyBase.Clone,tb_ent_secretariaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New tb_ent_secretariaDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncod_ent_sec = MyBase.Columns("cod_ent_sec")
            Me.columndata_ent_sec = MyBase.Columns("data_ent_sec")
            Me.columnlote_ent_sec = MyBase.Columns("lote_ent_sec")
            Me.columnnota_ent_sec = MyBase.Columns("nota_ent_sec")
            Me.columnFKcod_medicamento = MyBase.Columns("FKcod_medicamento")
            Me.columnvalidade_ent_sec = MyBase.Columns("validade_ent_sec")
            Me.columnquantidade_ent_sec = MyBase.Columns("quantidade_ent_sec")
            Me.columnFKcod_usuario = MyBase.Columns("FKcod_usuario")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncod_ent_sec = New System.Data.DataColumn("cod_ent_sec", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncod_ent_sec)
            Me.columndata_ent_sec = New System.Data.DataColumn("data_ent_sec", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndata_ent_sec)
            Me.columnlote_ent_sec = New System.Data.DataColumn("lote_ent_sec", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlote_ent_sec)
            Me.columnnota_ent_sec = New System.Data.DataColumn("nota_ent_sec", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnota_ent_sec)
            Me.columnFKcod_medicamento = New System.Data.DataColumn("FKcod_medicamento", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFKcod_medicamento)
            Me.columnvalidade_ent_sec = New System.Data.DataColumn("validade_ent_sec", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvalidade_ent_sec)
            Me.columnquantidade_ent_sec = New System.Data.DataColumn("quantidade_ent_sec", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnquantidade_ent_sec)
            Me.columnFKcod_usuario = New System.Data.DataColumn("FKcod_usuario", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFKcod_usuario)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columncod_ent_sec}, true))
            Me.columncod_ent_sec.AutoIncrement = true
            Me.columncod_ent_sec.AllowDBNull = false
            Me.columncod_ent_sec.ReadOnly = true
            Me.columncod_ent_sec.Unique = true
            Me.columndata_ent_sec.AllowDBNull = false
            Me.columnlote_ent_sec.AllowDBNull = false
            Me.columnlote_ent_sec.MaxLength = 50
            Me.columnnota_ent_sec.AllowDBNull = false
            Me.columnnota_ent_sec.MaxLength = 50
            Me.columnFKcod_medicamento.AllowDBNull = false
            Me.columnvalidade_ent_sec.AllowDBNull = false
            Me.columnvalidade_ent_sec.MaxLength = 10
            Me.columnquantidade_ent_sec.AllowDBNull = false
            Me.columnFKcod_usuario.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newtb_ent_secretariaRow() As tb_ent_secretariaRow
            Return CType(Me.NewRow,tb_ent_secretariaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New tb_ent_secretariaRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tb_ent_secretariaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tb_ent_secretariaRowChangedEvent) Is Nothing) Then
                RaiseEvent tb_ent_secretariaRowChanged(Me, New tb_ent_secretariaRowChangeEvent(CType(e.Row,tb_ent_secretariaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tb_ent_secretariaRowChangingEvent) Is Nothing) Then
                RaiseEvent tb_ent_secretariaRowChanging(Me, New tb_ent_secretariaRowChangeEvent(CType(e.Row,tb_ent_secretariaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tb_ent_secretariaRowDeletedEvent) Is Nothing) Then
                RaiseEvent tb_ent_secretariaRowDeleted(Me, New tb_ent_secretariaRowChangeEvent(CType(e.Row,tb_ent_secretariaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tb_ent_secretariaRowDeletingEvent) Is Nothing) Then
                RaiseEvent tb_ent_secretariaRowDeleting(Me, New tb_ent_secretariaRowChangeEvent(CType(e.Row,tb_ent_secretariaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removetb_ent_secretariaRow(ByVal row As tb_ent_secretariaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtsBD_SICEP = New dtsBD_SICEP
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tb_ent_secretariaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tb_sai_secretariaDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_sai_sec As System.Data.DataColumn
        
        Private columndata_sai_sec As System.Data.DataColumn
        
        Private columnFKcod_medicamento As System.Data.DataColumn
        
        Private columnvalidade_sai_sec As System.Data.DataColumn
        
        Private columnquantidade_sai_sec As System.Data.DataColumn
        
        Private columnFKcod_usuario As System.Data.DataColumn
        
        Private columnFKcod_regiao As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tb_sai_secretaria"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cod_sai_secColumn() As System.Data.DataColumn
            Get
                Return Me.columncod_sai_sec
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property data_sai_secColumn() As System.Data.DataColumn
            Get
                Return Me.columndata_sai_sec
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FKcod_medicamentoColumn() As System.Data.DataColumn
            Get
                Return Me.columnFKcod_medicamento
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property validade_sai_secColumn() As System.Data.DataColumn
            Get
                Return Me.columnvalidade_sai_sec
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property quantidade_sai_secColumn() As System.Data.DataColumn
            Get
                Return Me.columnquantidade_sai_sec
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FKcod_usuarioColumn() As System.Data.DataColumn
            Get
                Return Me.columnFKcod_usuario
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FKcod_regiaoColumn() As System.Data.DataColumn
            Get
                Return Me.columnFKcod_regiao
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tb_sai_secretariaRow
            Get
                Return CType(Me.Rows(index),tb_sai_secretariaRow)
            End Get
        End Property
        
        Public Event tb_sai_secretariaRowChanging As tb_sai_secretariaRowChangeEventHandler
        
        Public Event tb_sai_secretariaRowChanged As tb_sai_secretariaRowChangeEventHandler
        
        Public Event tb_sai_secretariaRowDeleting As tb_sai_secretariaRowChangeEventHandler
        
        Public Event tb_sai_secretariaRowDeleted As tb_sai_secretariaRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addtb_sai_secretariaRow(ByVal row As tb_sai_secretariaRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addtb_sai_secretariaRow(ByVal data_sai_sec As Date, ByVal parenttb_medicamentoRowBytb_medicamento_tb_sai_secretaria As tb_medicamentoRow, ByVal validade_sai_sec As String, ByVal quantidade_sai_sec As Long, ByVal parenttb_usuarioRowBytb_usuario_tb_sai_secretaria As tb_usuarioRow, ByVal parenttb_regiaoRowBytb_regiao_tb_sai_secretaria As tb_regiaoRow) As tb_sai_secretariaRow
            Dim rowtb_sai_secretariaRow As tb_sai_secretariaRow = CType(Me.NewRow,tb_sai_secretariaRow)
            rowtb_sai_secretariaRow.ItemArray = New Object() {Nothing, data_sai_sec, parenttb_medicamentoRowBytb_medicamento_tb_sai_secretaria(0), validade_sai_sec, quantidade_sai_sec, parenttb_usuarioRowBytb_usuario_tb_sai_secretaria(0), parenttb_regiaoRowBytb_regiao_tb_sai_secretaria(0)}
            Me.Rows.Add(rowtb_sai_secretariaRow)
            Return rowtb_sai_secretariaRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBycod_sai_sec(ByVal cod_sai_sec As Long) As tb_sai_secretariaRow
            Return CType(Me.Rows.Find(New Object() {cod_sai_sec}),tb_sai_secretariaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As tb_sai_secretariaDataTable = CType(MyBase.Clone,tb_sai_secretariaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New tb_sai_secretariaDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncod_sai_sec = MyBase.Columns("cod_sai_sec")
            Me.columndata_sai_sec = MyBase.Columns("data_sai_sec")
            Me.columnFKcod_medicamento = MyBase.Columns("FKcod_medicamento")
            Me.columnvalidade_sai_sec = MyBase.Columns("validade_sai_sec")
            Me.columnquantidade_sai_sec = MyBase.Columns("quantidade_sai_sec")
            Me.columnFKcod_usuario = MyBase.Columns("FKcod_usuario")
            Me.columnFKcod_regiao = MyBase.Columns("FKcod_regiao")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncod_sai_sec = New System.Data.DataColumn("cod_sai_sec", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncod_sai_sec)
            Me.columndata_sai_sec = New System.Data.DataColumn("data_sai_sec", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndata_sai_sec)
            Me.columnFKcod_medicamento = New System.Data.DataColumn("FKcod_medicamento", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFKcod_medicamento)
            Me.columnvalidade_sai_sec = New System.Data.DataColumn("validade_sai_sec", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvalidade_sai_sec)
            Me.columnquantidade_sai_sec = New System.Data.DataColumn("quantidade_sai_sec", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnquantidade_sai_sec)
            Me.columnFKcod_usuario = New System.Data.DataColumn("FKcod_usuario", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFKcod_usuario)
            Me.columnFKcod_regiao = New System.Data.DataColumn("FKcod_regiao", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFKcod_regiao)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columncod_sai_sec}, true))
            Me.columncod_sai_sec.AutoIncrement = true
            Me.columncod_sai_sec.AllowDBNull = false
            Me.columncod_sai_sec.ReadOnly = true
            Me.columncod_sai_sec.Unique = true
            Me.columndata_sai_sec.AllowDBNull = false
            Me.columnFKcod_medicamento.AllowDBNull = false
            Me.columnvalidade_sai_sec.AllowDBNull = false
            Me.columnvalidade_sai_sec.MaxLength = 10
            Me.columnquantidade_sai_sec.AllowDBNull = false
            Me.columnFKcod_usuario.AllowDBNull = false
            Me.columnFKcod_regiao.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newtb_sai_secretariaRow() As tb_sai_secretariaRow
            Return CType(Me.NewRow,tb_sai_secretariaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New tb_sai_secretariaRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tb_sai_secretariaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tb_sai_secretariaRowChangedEvent) Is Nothing) Then
                RaiseEvent tb_sai_secretariaRowChanged(Me, New tb_sai_secretariaRowChangeEvent(CType(e.Row,tb_sai_secretariaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tb_sai_secretariaRowChangingEvent) Is Nothing) Then
                RaiseEvent tb_sai_secretariaRowChanging(Me, New tb_sai_secretariaRowChangeEvent(CType(e.Row,tb_sai_secretariaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tb_sai_secretariaRowDeletedEvent) Is Nothing) Then
                RaiseEvent tb_sai_secretariaRowDeleted(Me, New tb_sai_secretariaRowChangeEvent(CType(e.Row,tb_sai_secretariaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tb_sai_secretariaRowDeletingEvent) Is Nothing) Then
                RaiseEvent tb_sai_secretariaRowDeleting(Me, New tb_sai_secretariaRowChangeEvent(CType(e.Row,tb_sai_secretariaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removetb_sai_secretariaRow(ByVal row As tb_sai_secretariaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtsBD_SICEP = New dtsBD_SICEP
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tb_sai_secretariaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tb_regiaoDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_regiao As System.Data.DataColumn
        
        Private columnnome_regiao As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tb_regiao"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cod_regiaoColumn() As System.Data.DataColumn
            Get
                Return Me.columncod_regiao
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nome_regiaoColumn() As System.Data.DataColumn
            Get
                Return Me.columnnome_regiao
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tb_regiaoRow
            Get
                Return CType(Me.Rows(index),tb_regiaoRow)
            End Get
        End Property
        
        Public Event tb_regiaoRowChanging As tb_regiaoRowChangeEventHandler
        
        Public Event tb_regiaoRowChanged As tb_regiaoRowChangeEventHandler
        
        Public Event tb_regiaoRowDeleting As tb_regiaoRowChangeEventHandler
        
        Public Event tb_regiaoRowDeleted As tb_regiaoRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addtb_regiaoRow(ByVal row As tb_regiaoRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addtb_regiaoRow(ByVal nome_regiao As String) As tb_regiaoRow
            Dim rowtb_regiaoRow As tb_regiaoRow = CType(Me.NewRow,tb_regiaoRow)
            rowtb_regiaoRow.ItemArray = New Object() {Nothing, nome_regiao}
            Me.Rows.Add(rowtb_regiaoRow)
            Return rowtb_regiaoRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBycod_regiao(ByVal cod_regiao As Long) As tb_regiaoRow
            Return CType(Me.Rows.Find(New Object() {cod_regiao}),tb_regiaoRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As tb_regiaoDataTable = CType(MyBase.Clone,tb_regiaoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New tb_regiaoDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncod_regiao = MyBase.Columns("cod_regiao")
            Me.columnnome_regiao = MyBase.Columns("nome_regiao")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncod_regiao = New System.Data.DataColumn("cod_regiao", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncod_regiao)
            Me.columnnome_regiao = New System.Data.DataColumn("nome_regiao", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnome_regiao)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columncod_regiao}, true))
            Me.columncod_regiao.AutoIncrement = true
            Me.columncod_regiao.AllowDBNull = false
            Me.columncod_regiao.ReadOnly = true
            Me.columncod_regiao.Unique = true
            Me.columnnome_regiao.AllowDBNull = false
            Me.columnnome_regiao.MaxLength = 100
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newtb_regiaoRow() As tb_regiaoRow
            Return CType(Me.NewRow,tb_regiaoRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New tb_regiaoRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tb_regiaoRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tb_regiaoRowChangedEvent) Is Nothing) Then
                RaiseEvent tb_regiaoRowChanged(Me, New tb_regiaoRowChangeEvent(CType(e.Row,tb_regiaoRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tb_regiaoRowChangingEvent) Is Nothing) Then
                RaiseEvent tb_regiaoRowChanging(Me, New tb_regiaoRowChangeEvent(CType(e.Row,tb_regiaoRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tb_regiaoRowDeletedEvent) Is Nothing) Then
                RaiseEvent tb_regiaoRowDeleted(Me, New tb_regiaoRowChangeEvent(CType(e.Row,tb_regiaoRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tb_regiaoRowDeletingEvent) Is Nothing) Then
                RaiseEvent tb_regiaoRowDeleting(Me, New tb_regiaoRowChangeEvent(CType(e.Row,tb_regiaoRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removetb_regiaoRow(ByVal row As tb_regiaoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtsBD_SICEP = New dtsBD_SICEP
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tb_regiaoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class vw_ENTRADAS_SECRETARIADataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_ent_sec As System.Data.DataColumn
        
        Private columndata_ent_sec As System.Data.DataColumn
        
        Private columnlote_ent_sec As System.Data.DataColumn
        
        Private columnnota_ent_sec As System.Data.DataColumn
        
        Private columnFKcod_medicamento As System.Data.DataColumn
        
        Private columnnome_medicamento As System.Data.DataColumn
        
        Private columnvalidade_ent_sec As System.Data.DataColumn
        
        Private columnquantidade_ent_sec As System.Data.DataColumn
        
        Private columnFKcod_usuario As System.Data.DataColumn
        
        Private columnnome_usuario As System.Data.DataColumn
        
        Private columnflg_material As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "vw_ENTRADAS_SECRETARIA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cod_ent_secColumn() As System.Data.DataColumn
            Get
                Return Me.columncod_ent_sec
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property data_ent_secColumn() As System.Data.DataColumn
            Get
                Return Me.columndata_ent_sec
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lote_ent_secColumn() As System.Data.DataColumn
            Get
                Return Me.columnlote_ent_sec
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nota_ent_secColumn() As System.Data.DataColumn
            Get
                Return Me.columnnota_ent_sec
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FKcod_medicamentoColumn() As System.Data.DataColumn
            Get
                Return Me.columnFKcod_medicamento
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nome_medicamentoColumn() As System.Data.DataColumn
            Get
                Return Me.columnnome_medicamento
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property validade_ent_secColumn() As System.Data.DataColumn
            Get
                Return Me.columnvalidade_ent_sec
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property quantidade_ent_secColumn() As System.Data.DataColumn
            Get
                Return Me.columnquantidade_ent_sec
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FKcod_usuarioColumn() As System.Data.DataColumn
            Get
                Return Me.columnFKcod_usuario
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nome_usuarioColumn() As System.Data.DataColumn
            Get
                Return Me.columnnome_usuario
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property flg_materialColumn() As System.Data.DataColumn
            Get
                Return Me.columnflg_material
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As vw_ENTRADAS_SECRETARIARow
            Get
                Return CType(Me.Rows(index),vw_ENTRADAS_SECRETARIARow)
            End Get
        End Property
        
        Public Event vw_ENTRADAS_SECRETARIARowChanging As vw_ENTRADAS_SECRETARIARowChangeEventHandler
        
        Public Event vw_ENTRADAS_SECRETARIARowChanged As vw_ENTRADAS_SECRETARIARowChangeEventHandler
        
        Public Event vw_ENTRADAS_SECRETARIARowDeleting As vw_ENTRADAS_SECRETARIARowChangeEventHandler
        
        Public Event vw_ENTRADAS_SECRETARIARowDeleted As vw_ENTRADAS_SECRETARIARowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addvw_ENTRADAS_SECRETARIARow(ByVal row As vw_ENTRADAS_SECRETARIARow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addvw_ENTRADAS_SECRETARIARow(ByVal data_ent_sec As Date, ByVal lote_ent_sec As String, ByVal nota_ent_sec As String, ByVal FKcod_medicamento As Long, ByVal nome_medicamento As String, ByVal validade_ent_sec As String, ByVal quantidade_ent_sec As Long, ByVal FKcod_usuario As Long, ByVal nome_usuario As String, ByVal flg_material As Boolean) As vw_ENTRADAS_SECRETARIARow
            Dim rowvw_ENTRADAS_SECRETARIARow As vw_ENTRADAS_SECRETARIARow = CType(Me.NewRow,vw_ENTRADAS_SECRETARIARow)
            rowvw_ENTRADAS_SECRETARIARow.ItemArray = New Object() {Nothing, data_ent_sec, lote_ent_sec, nota_ent_sec, FKcod_medicamento, nome_medicamento, validade_ent_sec, quantidade_ent_sec, FKcod_usuario, nome_usuario, flg_material}
            Me.Rows.Add(rowvw_ENTRADAS_SECRETARIARow)
            Return rowvw_ENTRADAS_SECRETARIARow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBycod_ent_sec(ByVal cod_ent_sec As Long) As vw_ENTRADAS_SECRETARIARow
            Return CType(Me.Rows.Find(New Object() {cod_ent_sec}),vw_ENTRADAS_SECRETARIARow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As vw_ENTRADAS_SECRETARIADataTable = CType(MyBase.Clone,vw_ENTRADAS_SECRETARIADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New vw_ENTRADAS_SECRETARIADataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncod_ent_sec = MyBase.Columns("cod_ent_sec")
            Me.columndata_ent_sec = MyBase.Columns("data_ent_sec")
            Me.columnlote_ent_sec = MyBase.Columns("lote_ent_sec")
            Me.columnnota_ent_sec = MyBase.Columns("nota_ent_sec")
            Me.columnFKcod_medicamento = MyBase.Columns("FKcod_medicamento")
            Me.columnnome_medicamento = MyBase.Columns("nome_medicamento")
            Me.columnvalidade_ent_sec = MyBase.Columns("validade_ent_sec")
            Me.columnquantidade_ent_sec = MyBase.Columns("quantidade_ent_sec")
            Me.columnFKcod_usuario = MyBase.Columns("FKcod_usuario")
            Me.columnnome_usuario = MyBase.Columns("nome_usuario")
            Me.columnflg_material = MyBase.Columns("flg_material")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncod_ent_sec = New System.Data.DataColumn("cod_ent_sec", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncod_ent_sec)
            Me.columndata_ent_sec = New System.Data.DataColumn("data_ent_sec", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndata_ent_sec)
            Me.columnlote_ent_sec = New System.Data.DataColumn("lote_ent_sec", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlote_ent_sec)
            Me.columnnota_ent_sec = New System.Data.DataColumn("nota_ent_sec", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnota_ent_sec)
            Me.columnFKcod_medicamento = New System.Data.DataColumn("FKcod_medicamento", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFKcod_medicamento)
            Me.columnnome_medicamento = New System.Data.DataColumn("nome_medicamento", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnome_medicamento)
            Me.columnvalidade_ent_sec = New System.Data.DataColumn("validade_ent_sec", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvalidade_ent_sec)
            Me.columnquantidade_ent_sec = New System.Data.DataColumn("quantidade_ent_sec", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnquantidade_ent_sec)
            Me.columnFKcod_usuario = New System.Data.DataColumn("FKcod_usuario", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFKcod_usuario)
            Me.columnnome_usuario = New System.Data.DataColumn("nome_usuario", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnome_usuario)
            Me.columnflg_material = New System.Data.DataColumn("flg_material", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnflg_material)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columncod_ent_sec}, true))
            Me.columncod_ent_sec.AutoIncrement = true
            Me.columncod_ent_sec.AllowDBNull = false
            Me.columncod_ent_sec.ReadOnly = true
            Me.columncod_ent_sec.Unique = true
            Me.columndata_ent_sec.AllowDBNull = false
            Me.columnlote_ent_sec.AllowDBNull = false
            Me.columnlote_ent_sec.MaxLength = 50
            Me.columnnota_ent_sec.AllowDBNull = false
            Me.columnnota_ent_sec.MaxLength = 50
            Me.columnFKcod_medicamento.AllowDBNull = false
            Me.columnnome_medicamento.AllowDBNull = false
            Me.columnnome_medicamento.MaxLength = 100
            Me.columnvalidade_ent_sec.AllowDBNull = false
            Me.columnvalidade_ent_sec.MaxLength = 10
            Me.columnquantidade_ent_sec.AllowDBNull = false
            Me.columnFKcod_usuario.AllowDBNull = false
            Me.columnnome_usuario.AllowDBNull = false
            Me.columnnome_usuario.MaxLength = 100
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newvw_ENTRADAS_SECRETARIARow() As vw_ENTRADAS_SECRETARIARow
            Return CType(Me.NewRow,vw_ENTRADAS_SECRETARIARow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New vw_ENTRADAS_SECRETARIARow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(vw_ENTRADAS_SECRETARIARow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.vw_ENTRADAS_SECRETARIARowChangedEvent) Is Nothing) Then
                RaiseEvent vw_ENTRADAS_SECRETARIARowChanged(Me, New vw_ENTRADAS_SECRETARIARowChangeEvent(CType(e.Row,vw_ENTRADAS_SECRETARIARow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.vw_ENTRADAS_SECRETARIARowChangingEvent) Is Nothing) Then
                RaiseEvent vw_ENTRADAS_SECRETARIARowChanging(Me, New vw_ENTRADAS_SECRETARIARowChangeEvent(CType(e.Row,vw_ENTRADAS_SECRETARIARow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.vw_ENTRADAS_SECRETARIARowDeletedEvent) Is Nothing) Then
                RaiseEvent vw_ENTRADAS_SECRETARIARowDeleted(Me, New vw_ENTRADAS_SECRETARIARowChangeEvent(CType(e.Row,vw_ENTRADAS_SECRETARIARow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.vw_ENTRADAS_SECRETARIARowDeletingEvent) Is Nothing) Then
                RaiseEvent vw_ENTRADAS_SECRETARIARowDeleting(Me, New vw_ENTRADAS_SECRETARIARowChangeEvent(CType(e.Row,vw_ENTRADAS_SECRETARIARow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removevw_ENTRADAS_SECRETARIARow(ByVal row As vw_ENTRADAS_SECRETARIARow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtsBD_SICEP = New dtsBD_SICEP
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "vw_ENTRADAS_SECRETARIADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class vw_SAIDAS_SECRETARIADataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_sai_sec As System.Data.DataColumn
        
        Private columndata_sai_sec As System.Data.DataColumn
        
        Private columnFKcod_medicamento As System.Data.DataColumn
        
        Private columnnome_medicamento As System.Data.DataColumn
        
        Private columnvalidade_sai_sec As System.Data.DataColumn
        
        Private columnquantidade_sai_sec As System.Data.DataColumn
        
        Private columnFKcod_usuario As System.Data.DataColumn
        
        Private columnnome_usuario As System.Data.DataColumn
        
        Private columnFKcod_regiao As System.Data.DataColumn
        
        Private columnnome_regiao As System.Data.DataColumn
        
        Private columnflg_material As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "vw_SAIDAS_SECRETARIA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cod_sai_secColumn() As System.Data.DataColumn
            Get
                Return Me.columncod_sai_sec
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property data_sai_secColumn() As System.Data.DataColumn
            Get
                Return Me.columndata_sai_sec
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FKcod_medicamentoColumn() As System.Data.DataColumn
            Get
                Return Me.columnFKcod_medicamento
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nome_medicamentoColumn() As System.Data.DataColumn
            Get
                Return Me.columnnome_medicamento
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property validade_sai_secColumn() As System.Data.DataColumn
            Get
                Return Me.columnvalidade_sai_sec
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property quantidade_sai_secColumn() As System.Data.DataColumn
            Get
                Return Me.columnquantidade_sai_sec
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FKcod_usuarioColumn() As System.Data.DataColumn
            Get
                Return Me.columnFKcod_usuario
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nome_usuarioColumn() As System.Data.DataColumn
            Get
                Return Me.columnnome_usuario
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FKcod_regiaoColumn() As System.Data.DataColumn
            Get
                Return Me.columnFKcod_regiao
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nome_regiaoColumn() As System.Data.DataColumn
            Get
                Return Me.columnnome_regiao
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property flg_materialColumn() As System.Data.DataColumn
            Get
                Return Me.columnflg_material
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As vw_SAIDAS_SECRETARIARow
            Get
                Return CType(Me.Rows(index),vw_SAIDAS_SECRETARIARow)
            End Get
        End Property
        
        Public Event vw_SAIDAS_SECRETARIARowChanging As vw_SAIDAS_SECRETARIARowChangeEventHandler
        
        Public Event vw_SAIDAS_SECRETARIARowChanged As vw_SAIDAS_SECRETARIARowChangeEventHandler
        
        Public Event vw_SAIDAS_SECRETARIARowDeleting As vw_SAIDAS_SECRETARIARowChangeEventHandler
        
        Public Event vw_SAIDAS_SECRETARIARowDeleted As vw_SAIDAS_SECRETARIARowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addvw_SAIDAS_SECRETARIARow(ByVal row As vw_SAIDAS_SECRETARIARow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addvw_SAIDAS_SECRETARIARow(ByVal data_sai_sec As Date, ByVal FKcod_medicamento As Long, ByVal nome_medicamento As String, ByVal validade_sai_sec As String, ByVal quantidade_sai_sec As Long, ByVal FKcod_usuario As Long, ByVal nome_usuario As String, ByVal FKcod_regiao As Long, ByVal nome_regiao As String, ByVal flg_material As Boolean) As vw_SAIDAS_SECRETARIARow
            Dim rowvw_SAIDAS_SECRETARIARow As vw_SAIDAS_SECRETARIARow = CType(Me.NewRow,vw_SAIDAS_SECRETARIARow)
            rowvw_SAIDAS_SECRETARIARow.ItemArray = New Object() {Nothing, data_sai_sec, FKcod_medicamento, nome_medicamento, validade_sai_sec, quantidade_sai_sec, FKcod_usuario, nome_usuario, FKcod_regiao, nome_regiao, flg_material}
            Me.Rows.Add(rowvw_SAIDAS_SECRETARIARow)
            Return rowvw_SAIDAS_SECRETARIARow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBycod_sai_sec(ByVal cod_sai_sec As Long) As vw_SAIDAS_SECRETARIARow
            Return CType(Me.Rows.Find(New Object() {cod_sai_sec}),vw_SAIDAS_SECRETARIARow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As vw_SAIDAS_SECRETARIADataTable = CType(MyBase.Clone,vw_SAIDAS_SECRETARIADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New vw_SAIDAS_SECRETARIADataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncod_sai_sec = MyBase.Columns("cod_sai_sec")
            Me.columndata_sai_sec = MyBase.Columns("data_sai_sec")
            Me.columnFKcod_medicamento = MyBase.Columns("FKcod_medicamento")
            Me.columnnome_medicamento = MyBase.Columns("nome_medicamento")
            Me.columnvalidade_sai_sec = MyBase.Columns("validade_sai_sec")
            Me.columnquantidade_sai_sec = MyBase.Columns("quantidade_sai_sec")
            Me.columnFKcod_usuario = MyBase.Columns("FKcod_usuario")
            Me.columnnome_usuario = MyBase.Columns("nome_usuario")
            Me.columnFKcod_regiao = MyBase.Columns("FKcod_regiao")
            Me.columnnome_regiao = MyBase.Columns("nome_regiao")
            Me.columnflg_material = MyBase.Columns("flg_material")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncod_sai_sec = New System.Data.DataColumn("cod_sai_sec", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncod_sai_sec)
            Me.columndata_sai_sec = New System.Data.DataColumn("data_sai_sec", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndata_sai_sec)
            Me.columnFKcod_medicamento = New System.Data.DataColumn("FKcod_medicamento", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFKcod_medicamento)
            Me.columnnome_medicamento = New System.Data.DataColumn("nome_medicamento", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnome_medicamento)
            Me.columnvalidade_sai_sec = New System.Data.DataColumn("validade_sai_sec", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvalidade_sai_sec)
            Me.columnquantidade_sai_sec = New System.Data.DataColumn("quantidade_sai_sec", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnquantidade_sai_sec)
            Me.columnFKcod_usuario = New System.Data.DataColumn("FKcod_usuario", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFKcod_usuario)
            Me.columnnome_usuario = New System.Data.DataColumn("nome_usuario", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnome_usuario)
            Me.columnFKcod_regiao = New System.Data.DataColumn("FKcod_regiao", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFKcod_regiao)
            Me.columnnome_regiao = New System.Data.DataColumn("nome_regiao", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnome_regiao)
            Me.columnflg_material = New System.Data.DataColumn("flg_material", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnflg_material)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columncod_sai_sec}, true))
            Me.columncod_sai_sec.AutoIncrement = true
            Me.columncod_sai_sec.AllowDBNull = false
            Me.columncod_sai_sec.ReadOnly = true
            Me.columncod_sai_sec.Unique = true
            Me.columndata_sai_sec.AllowDBNull = false
            Me.columnFKcod_medicamento.AllowDBNull = false
            Me.columnnome_medicamento.AllowDBNull = false
            Me.columnnome_medicamento.MaxLength = 100
            Me.columnvalidade_sai_sec.AllowDBNull = false
            Me.columnvalidade_sai_sec.MaxLength = 10
            Me.columnquantidade_sai_sec.AllowDBNull = false
            Me.columnFKcod_usuario.AllowDBNull = false
            Me.columnnome_usuario.AllowDBNull = false
            Me.columnnome_usuario.MaxLength = 100
            Me.columnFKcod_regiao.AllowDBNull = false
            Me.columnnome_regiao.AllowDBNull = false
            Me.columnnome_regiao.MaxLength = 100
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newvw_SAIDAS_SECRETARIARow() As vw_SAIDAS_SECRETARIARow
            Return CType(Me.NewRow,vw_SAIDAS_SECRETARIARow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New vw_SAIDAS_SECRETARIARow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(vw_SAIDAS_SECRETARIARow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.vw_SAIDAS_SECRETARIARowChangedEvent) Is Nothing) Then
                RaiseEvent vw_SAIDAS_SECRETARIARowChanged(Me, New vw_SAIDAS_SECRETARIARowChangeEvent(CType(e.Row,vw_SAIDAS_SECRETARIARow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.vw_SAIDAS_SECRETARIARowChangingEvent) Is Nothing) Then
                RaiseEvent vw_SAIDAS_SECRETARIARowChanging(Me, New vw_SAIDAS_SECRETARIARowChangeEvent(CType(e.Row,vw_SAIDAS_SECRETARIARow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.vw_SAIDAS_SECRETARIARowDeletedEvent) Is Nothing) Then
                RaiseEvent vw_SAIDAS_SECRETARIARowDeleted(Me, New vw_SAIDAS_SECRETARIARowChangeEvent(CType(e.Row,vw_SAIDAS_SECRETARIARow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.vw_SAIDAS_SECRETARIARowDeletingEvent) Is Nothing) Then
                RaiseEvent vw_SAIDAS_SECRETARIARowDeleting(Me, New vw_SAIDAS_SECRETARIARowChangeEvent(CType(e.Row,vw_SAIDAS_SECRETARIARow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removevw_SAIDAS_SECRETARIARow(ByVal row As vw_SAIDAS_SECRETARIARow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtsBD_SICEP = New dtsBD_SICEP
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "vw_SAIDAS_SECRETARIADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class vw_ENTRADAS_POLICLINICADataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_ent_poli As System.Data.DataColumn
        
        Private columndata_ent_poli As System.Data.DataColumn
        
        Private columnFKcod_medicamento As System.Data.DataColumn
        
        Private columnnome_medicamento As System.Data.DataColumn
        
        Private columnvalidade_ent_poli As System.Data.DataColumn
        
        Private columnquantidade_ent_poli As System.Data.DataColumn
        
        Private columnFKcod_usuario As System.Data.DataColumn
        
        Private columnnome_usuario As System.Data.DataColumn
        
        Private columnflg_material As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "vw_ENTRADAS_POLICLINICA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cod_ent_poliColumn() As System.Data.DataColumn
            Get
                Return Me.columncod_ent_poli
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property data_ent_poliColumn() As System.Data.DataColumn
            Get
                Return Me.columndata_ent_poli
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FKcod_medicamentoColumn() As System.Data.DataColumn
            Get
                Return Me.columnFKcod_medicamento
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nome_medicamentoColumn() As System.Data.DataColumn
            Get
                Return Me.columnnome_medicamento
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property validade_ent_poliColumn() As System.Data.DataColumn
            Get
                Return Me.columnvalidade_ent_poli
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property quantidade_ent_poliColumn() As System.Data.DataColumn
            Get
                Return Me.columnquantidade_ent_poli
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FKcod_usuarioColumn() As System.Data.DataColumn
            Get
                Return Me.columnFKcod_usuario
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nome_usuarioColumn() As System.Data.DataColumn
            Get
                Return Me.columnnome_usuario
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property flg_materialColumn() As System.Data.DataColumn
            Get
                Return Me.columnflg_material
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As vw_ENTRADAS_POLICLINICARow
            Get
                Return CType(Me.Rows(index),vw_ENTRADAS_POLICLINICARow)
            End Get
        End Property
        
        Public Event vw_ENTRADAS_POLICLINICARowChanging As vw_ENTRADAS_POLICLINICARowChangeEventHandler
        
        Public Event vw_ENTRADAS_POLICLINICARowChanged As vw_ENTRADAS_POLICLINICARowChangeEventHandler
        
        Public Event vw_ENTRADAS_POLICLINICARowDeleting As vw_ENTRADAS_POLICLINICARowChangeEventHandler
        
        Public Event vw_ENTRADAS_POLICLINICARowDeleted As vw_ENTRADAS_POLICLINICARowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addvw_ENTRADAS_POLICLINICARow(ByVal row As vw_ENTRADAS_POLICLINICARow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addvw_ENTRADAS_POLICLINICARow(ByVal data_ent_poli As Date, ByVal FKcod_medicamento As Long, ByVal nome_medicamento As String, ByVal validade_ent_poli As String, ByVal quantidade_ent_poli As Long, ByVal FKcod_usuario As Long, ByVal nome_usuario As String, ByVal flg_material As Boolean) As vw_ENTRADAS_POLICLINICARow
            Dim rowvw_ENTRADAS_POLICLINICARow As vw_ENTRADAS_POLICLINICARow = CType(Me.NewRow,vw_ENTRADAS_POLICLINICARow)
            rowvw_ENTRADAS_POLICLINICARow.ItemArray = New Object() {Nothing, data_ent_poli, FKcod_medicamento, nome_medicamento, validade_ent_poli, quantidade_ent_poli, FKcod_usuario, nome_usuario, flg_material}
            Me.Rows.Add(rowvw_ENTRADAS_POLICLINICARow)
            Return rowvw_ENTRADAS_POLICLINICARow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBycod_ent_poli(ByVal cod_ent_poli As Long) As vw_ENTRADAS_POLICLINICARow
            Return CType(Me.Rows.Find(New Object() {cod_ent_poli}),vw_ENTRADAS_POLICLINICARow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As vw_ENTRADAS_POLICLINICADataTable = CType(MyBase.Clone,vw_ENTRADAS_POLICLINICADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New vw_ENTRADAS_POLICLINICADataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncod_ent_poli = MyBase.Columns("cod_ent_poli")
            Me.columndata_ent_poli = MyBase.Columns("data_ent_poli")
            Me.columnFKcod_medicamento = MyBase.Columns("FKcod_medicamento")
            Me.columnnome_medicamento = MyBase.Columns("nome_medicamento")
            Me.columnvalidade_ent_poli = MyBase.Columns("validade_ent_poli")
            Me.columnquantidade_ent_poli = MyBase.Columns("quantidade_ent_poli")
            Me.columnFKcod_usuario = MyBase.Columns("FKcod_usuario")
            Me.columnnome_usuario = MyBase.Columns("nome_usuario")
            Me.columnflg_material = MyBase.Columns("flg_material")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncod_ent_poli = New System.Data.DataColumn("cod_ent_poli", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncod_ent_poli)
            Me.columndata_ent_poli = New System.Data.DataColumn("data_ent_poli", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndata_ent_poli)
            Me.columnFKcod_medicamento = New System.Data.DataColumn("FKcod_medicamento", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFKcod_medicamento)
            Me.columnnome_medicamento = New System.Data.DataColumn("nome_medicamento", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnome_medicamento)
            Me.columnvalidade_ent_poli = New System.Data.DataColumn("validade_ent_poli", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvalidade_ent_poli)
            Me.columnquantidade_ent_poli = New System.Data.DataColumn("quantidade_ent_poli", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnquantidade_ent_poli)
            Me.columnFKcod_usuario = New System.Data.DataColumn("FKcod_usuario", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFKcod_usuario)
            Me.columnnome_usuario = New System.Data.DataColumn("nome_usuario", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnome_usuario)
            Me.columnflg_material = New System.Data.DataColumn("flg_material", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnflg_material)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columncod_ent_poli}, true))
            Me.columncod_ent_poli.AutoIncrement = true
            Me.columncod_ent_poli.AllowDBNull = false
            Me.columncod_ent_poli.ReadOnly = true
            Me.columncod_ent_poli.Unique = true
            Me.columndata_ent_poli.AllowDBNull = false
            Me.columnFKcod_medicamento.AllowDBNull = false
            Me.columnnome_medicamento.AllowDBNull = false
            Me.columnnome_medicamento.MaxLength = 100
            Me.columnvalidade_ent_poli.AllowDBNull = false
            Me.columnvalidade_ent_poli.MaxLength = 10
            Me.columnquantidade_ent_poli.AllowDBNull = false
            Me.columnFKcod_usuario.AllowDBNull = false
            Me.columnnome_usuario.AllowDBNull = false
            Me.columnnome_usuario.MaxLength = 100
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newvw_ENTRADAS_POLICLINICARow() As vw_ENTRADAS_POLICLINICARow
            Return CType(Me.NewRow,vw_ENTRADAS_POLICLINICARow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New vw_ENTRADAS_POLICLINICARow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(vw_ENTRADAS_POLICLINICARow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.vw_ENTRADAS_POLICLINICARowChangedEvent) Is Nothing) Then
                RaiseEvent vw_ENTRADAS_POLICLINICARowChanged(Me, New vw_ENTRADAS_POLICLINICARowChangeEvent(CType(e.Row,vw_ENTRADAS_POLICLINICARow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.vw_ENTRADAS_POLICLINICARowChangingEvent) Is Nothing) Then
                RaiseEvent vw_ENTRADAS_POLICLINICARowChanging(Me, New vw_ENTRADAS_POLICLINICARowChangeEvent(CType(e.Row,vw_ENTRADAS_POLICLINICARow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.vw_ENTRADAS_POLICLINICARowDeletedEvent) Is Nothing) Then
                RaiseEvent vw_ENTRADAS_POLICLINICARowDeleted(Me, New vw_ENTRADAS_POLICLINICARowChangeEvent(CType(e.Row,vw_ENTRADAS_POLICLINICARow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.vw_ENTRADAS_POLICLINICARowDeletingEvent) Is Nothing) Then
                RaiseEvent vw_ENTRADAS_POLICLINICARowDeleting(Me, New vw_ENTRADAS_POLICLINICARowChangeEvent(CType(e.Row,vw_ENTRADAS_POLICLINICARow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removevw_ENTRADAS_POLICLINICARow(ByVal row As vw_ENTRADAS_POLICLINICARow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtsBD_SICEP = New dtsBD_SICEP
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "vw_ENTRADAS_POLICLINICADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tb_sai_policlinicaDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_sai_poli As System.Data.DataColumn
        
        Private columndata_sai_poli As System.Data.DataColumn
        
        Private columnFKcod_medicamento As System.Data.DataColumn
        
        Private columnvalidade_sai_poli As System.Data.DataColumn
        
        Private columnquantidade_sai_poli As System.Data.DataColumn
        
        Private columnFKcod_usuario As System.Data.DataColumn
        
        Private columnFKcod_paciente As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tb_sai_policlinica"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cod_sai_poliColumn() As System.Data.DataColumn
            Get
                Return Me.columncod_sai_poli
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property data_sai_poliColumn() As System.Data.DataColumn
            Get
                Return Me.columndata_sai_poli
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FKcod_medicamentoColumn() As System.Data.DataColumn
            Get
                Return Me.columnFKcod_medicamento
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property validade_sai_poliColumn() As System.Data.DataColumn
            Get
                Return Me.columnvalidade_sai_poli
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property quantidade_sai_poliColumn() As System.Data.DataColumn
            Get
                Return Me.columnquantidade_sai_poli
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FKcod_usuarioColumn() As System.Data.DataColumn
            Get
                Return Me.columnFKcod_usuario
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FKcod_pacienteColumn() As System.Data.DataColumn
            Get
                Return Me.columnFKcod_paciente
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tb_sai_policlinicaRow
            Get
                Return CType(Me.Rows(index),tb_sai_policlinicaRow)
            End Get
        End Property
        
        Public Event tb_sai_policlinicaRowChanging As tb_sai_policlinicaRowChangeEventHandler
        
        Public Event tb_sai_policlinicaRowChanged As tb_sai_policlinicaRowChangeEventHandler
        
        Public Event tb_sai_policlinicaRowDeleting As tb_sai_policlinicaRowChangeEventHandler
        
        Public Event tb_sai_policlinicaRowDeleted As tb_sai_policlinicaRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addtb_sai_policlinicaRow(ByVal row As tb_sai_policlinicaRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addtb_sai_policlinicaRow(ByVal data_sai_poli As Date, ByVal parenttb_medicamentoRowBytb_medicamento_tb_sai_policlinica As tb_medicamentoRow, ByVal validade_sai_poli As String, ByVal quantidade_sai_poli As Long, ByVal parenttb_usuarioRowBytb_usuario_tb_sai_policlinica As tb_usuarioRow, ByVal parenttb_pacienteRowBytb_paciente_tb_sai_policlinica As tb_pacienteRow) As tb_sai_policlinicaRow
            Dim rowtb_sai_policlinicaRow As tb_sai_policlinicaRow = CType(Me.NewRow,tb_sai_policlinicaRow)
            rowtb_sai_policlinicaRow.ItemArray = New Object() {Nothing, data_sai_poli, parenttb_medicamentoRowBytb_medicamento_tb_sai_policlinica(0), validade_sai_poli, quantidade_sai_poli, parenttb_usuarioRowBytb_usuario_tb_sai_policlinica(0), parenttb_pacienteRowBytb_paciente_tb_sai_policlinica(0)}
            Me.Rows.Add(rowtb_sai_policlinicaRow)
            Return rowtb_sai_policlinicaRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBycod_sai_poli(ByVal cod_sai_poli As Long) As tb_sai_policlinicaRow
            Return CType(Me.Rows.Find(New Object() {cod_sai_poli}),tb_sai_policlinicaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As tb_sai_policlinicaDataTable = CType(MyBase.Clone,tb_sai_policlinicaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New tb_sai_policlinicaDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncod_sai_poli = MyBase.Columns("cod_sai_poli")
            Me.columndata_sai_poli = MyBase.Columns("data_sai_poli")
            Me.columnFKcod_medicamento = MyBase.Columns("FKcod_medicamento")
            Me.columnvalidade_sai_poli = MyBase.Columns("validade_sai_poli")
            Me.columnquantidade_sai_poli = MyBase.Columns("quantidade_sai_poli")
            Me.columnFKcod_usuario = MyBase.Columns("FKcod_usuario")
            Me.columnFKcod_paciente = MyBase.Columns("FKcod_paciente")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncod_sai_poli = New System.Data.DataColumn("cod_sai_poli", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncod_sai_poli)
            Me.columndata_sai_poli = New System.Data.DataColumn("data_sai_poli", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndata_sai_poli)
            Me.columnFKcod_medicamento = New System.Data.DataColumn("FKcod_medicamento", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFKcod_medicamento)
            Me.columnvalidade_sai_poli = New System.Data.DataColumn("validade_sai_poli", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvalidade_sai_poli)
            Me.columnquantidade_sai_poli = New System.Data.DataColumn("quantidade_sai_poli", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnquantidade_sai_poli)
            Me.columnFKcod_usuario = New System.Data.DataColumn("FKcod_usuario", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFKcod_usuario)
            Me.columnFKcod_paciente = New System.Data.DataColumn("FKcod_paciente", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFKcod_paciente)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columncod_sai_poli}, true))
            Me.columncod_sai_poli.AutoIncrement = true
            Me.columncod_sai_poli.AllowDBNull = false
            Me.columncod_sai_poli.ReadOnly = true
            Me.columncod_sai_poli.Unique = true
            Me.columndata_sai_poli.AllowDBNull = false
            Me.columnFKcod_medicamento.AllowDBNull = false
            Me.columnvalidade_sai_poli.AllowDBNull = false
            Me.columnvalidade_sai_poli.MaxLength = 10
            Me.columnquantidade_sai_poli.AllowDBNull = false
            Me.columnFKcod_usuario.AllowDBNull = false
            Me.columnFKcod_paciente.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newtb_sai_policlinicaRow() As tb_sai_policlinicaRow
            Return CType(Me.NewRow,tb_sai_policlinicaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New tb_sai_policlinicaRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tb_sai_policlinicaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tb_sai_policlinicaRowChangedEvent) Is Nothing) Then
                RaiseEvent tb_sai_policlinicaRowChanged(Me, New tb_sai_policlinicaRowChangeEvent(CType(e.Row,tb_sai_policlinicaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tb_sai_policlinicaRowChangingEvent) Is Nothing) Then
                RaiseEvent tb_sai_policlinicaRowChanging(Me, New tb_sai_policlinicaRowChangeEvent(CType(e.Row,tb_sai_policlinicaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tb_sai_policlinicaRowDeletedEvent) Is Nothing) Then
                RaiseEvent tb_sai_policlinicaRowDeleted(Me, New tb_sai_policlinicaRowChangeEvent(CType(e.Row,tb_sai_policlinicaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tb_sai_policlinicaRowDeletingEvent) Is Nothing) Then
                RaiseEvent tb_sai_policlinicaRowDeleting(Me, New tb_sai_policlinicaRowChangeEvent(CType(e.Row,tb_sai_policlinicaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removetb_sai_policlinicaRow(ByVal row As tb_sai_policlinicaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtsBD_SICEP = New dtsBD_SICEP
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tb_sai_policlinicaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tb_ent_policlinicaDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_ent_poli As System.Data.DataColumn
        
        Private columndata_ent_poli As System.Data.DataColumn
        
        Private columnFKcod_medicamento As System.Data.DataColumn
        
        Private columnvalidade_ent_poli As System.Data.DataColumn
        
        Private columnquantidade_ent_poli As System.Data.DataColumn
        
        Private columnFKcod_usuario As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tb_ent_policlinica"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cod_ent_poliColumn() As System.Data.DataColumn
            Get
                Return Me.columncod_ent_poli
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property data_ent_poliColumn() As System.Data.DataColumn
            Get
                Return Me.columndata_ent_poli
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FKcod_medicamentoColumn() As System.Data.DataColumn
            Get
                Return Me.columnFKcod_medicamento
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property validade_ent_poliColumn() As System.Data.DataColumn
            Get
                Return Me.columnvalidade_ent_poli
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property quantidade_ent_poliColumn() As System.Data.DataColumn
            Get
                Return Me.columnquantidade_ent_poli
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FKcod_usuarioColumn() As System.Data.DataColumn
            Get
                Return Me.columnFKcod_usuario
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tb_ent_policlinicaRow
            Get
                Return CType(Me.Rows(index),tb_ent_policlinicaRow)
            End Get
        End Property
        
        Public Event tb_ent_policlinicaRowChanging As tb_ent_policlinicaRowChangeEventHandler
        
        Public Event tb_ent_policlinicaRowChanged As tb_ent_policlinicaRowChangeEventHandler
        
        Public Event tb_ent_policlinicaRowDeleting As tb_ent_policlinicaRowChangeEventHandler
        
        Public Event tb_ent_policlinicaRowDeleted As tb_ent_policlinicaRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addtb_ent_policlinicaRow(ByVal row As tb_ent_policlinicaRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addtb_ent_policlinicaRow(ByVal data_ent_poli As Date, ByVal parenttb_medicamentoRowBytb_medicamento_tb_ent_policlinica As tb_medicamentoRow, ByVal validade_ent_poli As String, ByVal quantidade_ent_poli As Long, ByVal parenttb_usuarioRowBytb_usuario_tb_ent_policlinica As tb_usuarioRow) As tb_ent_policlinicaRow
            Dim rowtb_ent_policlinicaRow As tb_ent_policlinicaRow = CType(Me.NewRow,tb_ent_policlinicaRow)
            rowtb_ent_policlinicaRow.ItemArray = New Object() {Nothing, data_ent_poli, parenttb_medicamentoRowBytb_medicamento_tb_ent_policlinica(0), validade_ent_poli, quantidade_ent_poli, parenttb_usuarioRowBytb_usuario_tb_ent_policlinica(0)}
            Me.Rows.Add(rowtb_ent_policlinicaRow)
            Return rowtb_ent_policlinicaRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBycod_ent_poli(ByVal cod_ent_poli As Long) As tb_ent_policlinicaRow
            Return CType(Me.Rows.Find(New Object() {cod_ent_poli}),tb_ent_policlinicaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As tb_ent_policlinicaDataTable = CType(MyBase.Clone,tb_ent_policlinicaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New tb_ent_policlinicaDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncod_ent_poli = MyBase.Columns("cod_ent_poli")
            Me.columndata_ent_poli = MyBase.Columns("data_ent_poli")
            Me.columnFKcod_medicamento = MyBase.Columns("FKcod_medicamento")
            Me.columnvalidade_ent_poli = MyBase.Columns("validade_ent_poli")
            Me.columnquantidade_ent_poli = MyBase.Columns("quantidade_ent_poli")
            Me.columnFKcod_usuario = MyBase.Columns("FKcod_usuario")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncod_ent_poli = New System.Data.DataColumn("cod_ent_poli", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncod_ent_poli)
            Me.columndata_ent_poli = New System.Data.DataColumn("data_ent_poli", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndata_ent_poli)
            Me.columnFKcod_medicamento = New System.Data.DataColumn("FKcod_medicamento", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFKcod_medicamento)
            Me.columnvalidade_ent_poli = New System.Data.DataColumn("validade_ent_poli", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvalidade_ent_poli)
            Me.columnquantidade_ent_poli = New System.Data.DataColumn("quantidade_ent_poli", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnquantidade_ent_poli)
            Me.columnFKcod_usuario = New System.Data.DataColumn("FKcod_usuario", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFKcod_usuario)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columncod_ent_poli}, true))
            Me.columncod_ent_poli.AutoIncrement = true
            Me.columncod_ent_poli.AllowDBNull = false
            Me.columncod_ent_poli.ReadOnly = true
            Me.columncod_ent_poli.Unique = true
            Me.columndata_ent_poli.AllowDBNull = false
            Me.columnFKcod_medicamento.AllowDBNull = false
            Me.columnvalidade_ent_poli.AllowDBNull = false
            Me.columnvalidade_ent_poli.MaxLength = 10
            Me.columnquantidade_ent_poli.AllowDBNull = false
            Me.columnFKcod_usuario.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newtb_ent_policlinicaRow() As tb_ent_policlinicaRow
            Return CType(Me.NewRow,tb_ent_policlinicaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New tb_ent_policlinicaRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tb_ent_policlinicaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tb_ent_policlinicaRowChangedEvent) Is Nothing) Then
                RaiseEvent tb_ent_policlinicaRowChanged(Me, New tb_ent_policlinicaRowChangeEvent(CType(e.Row,tb_ent_policlinicaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tb_ent_policlinicaRowChangingEvent) Is Nothing) Then
                RaiseEvent tb_ent_policlinicaRowChanging(Me, New tb_ent_policlinicaRowChangeEvent(CType(e.Row,tb_ent_policlinicaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tb_ent_policlinicaRowDeletedEvent) Is Nothing) Then
                RaiseEvent tb_ent_policlinicaRowDeleted(Me, New tb_ent_policlinicaRowChangeEvent(CType(e.Row,tb_ent_policlinicaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tb_ent_policlinicaRowDeletingEvent) Is Nothing) Then
                RaiseEvent tb_ent_policlinicaRowDeleting(Me, New tb_ent_policlinicaRowChangeEvent(CType(e.Row,tb_ent_policlinicaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removetb_ent_policlinicaRow(ByVal row As tb_ent_policlinicaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtsBD_SICEP = New dtsBD_SICEP
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tb_ent_policlinicaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class vw_SAIDAS_POLICLINICADataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_sai_poli As System.Data.DataColumn
        
        Private columndata_sai_poli As System.Data.DataColumn
        
        Private columnFKcod_medicamento As System.Data.DataColumn
        
        Private columnnome_medicamento As System.Data.DataColumn
        
        Private columnvalidade_sai_poli As System.Data.DataColumn
        
        Private columnquantidade_sai_poli As System.Data.DataColumn
        
        Private columnFKcod_usuario As System.Data.DataColumn
        
        Private columnnome_usuario As System.Data.DataColumn
        
        Private columnFKcod_paciente As System.Data.DataColumn
        
        Private columnnome_paciente As System.Data.DataColumn
        
        Private columnflg_material As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "vw_SAIDAS_POLICLINICA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cod_sai_poliColumn() As System.Data.DataColumn
            Get
                Return Me.columncod_sai_poli
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property data_sai_poliColumn() As System.Data.DataColumn
            Get
                Return Me.columndata_sai_poli
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FKcod_medicamentoColumn() As System.Data.DataColumn
            Get
                Return Me.columnFKcod_medicamento
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nome_medicamentoColumn() As System.Data.DataColumn
            Get
                Return Me.columnnome_medicamento
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property validade_sai_poliColumn() As System.Data.DataColumn
            Get
                Return Me.columnvalidade_sai_poli
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property quantidade_sai_poliColumn() As System.Data.DataColumn
            Get
                Return Me.columnquantidade_sai_poli
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FKcod_usuarioColumn() As System.Data.DataColumn
            Get
                Return Me.columnFKcod_usuario
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nome_usuarioColumn() As System.Data.DataColumn
            Get
                Return Me.columnnome_usuario
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FKcod_pacienteColumn() As System.Data.DataColumn
            Get
                Return Me.columnFKcod_paciente
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nome_pacienteColumn() As System.Data.DataColumn
            Get
                Return Me.columnnome_paciente
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property flg_materialColumn() As System.Data.DataColumn
            Get
                Return Me.columnflg_material
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As vw_SAIDAS_POLICLINICARow
            Get
                Return CType(Me.Rows(index),vw_SAIDAS_POLICLINICARow)
            End Get
        End Property
        
        Public Event vw_SAIDAS_POLICLINICARowChanging As vw_SAIDAS_POLICLINICARowChangeEventHandler
        
        Public Event vw_SAIDAS_POLICLINICARowChanged As vw_SAIDAS_POLICLINICARowChangeEventHandler
        
        Public Event vw_SAIDAS_POLICLINICARowDeleting As vw_SAIDAS_POLICLINICARowChangeEventHandler
        
        Public Event vw_SAIDAS_POLICLINICARowDeleted As vw_SAIDAS_POLICLINICARowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addvw_SAIDAS_POLICLINICARow(ByVal row As vw_SAIDAS_POLICLINICARow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addvw_SAIDAS_POLICLINICARow(ByVal data_sai_poli As Date, ByVal FKcod_medicamento As Long, ByVal nome_medicamento As String, ByVal validade_sai_poli As String, ByVal quantidade_sai_poli As Long, ByVal FKcod_usuario As Long, ByVal nome_usuario As String, ByVal FKcod_paciente As Long, ByVal nome_paciente As String, ByVal flg_material As Boolean) As vw_SAIDAS_POLICLINICARow
            Dim rowvw_SAIDAS_POLICLINICARow As vw_SAIDAS_POLICLINICARow = CType(Me.NewRow,vw_SAIDAS_POLICLINICARow)
            rowvw_SAIDAS_POLICLINICARow.ItemArray = New Object() {Nothing, data_sai_poli, FKcod_medicamento, nome_medicamento, validade_sai_poli, quantidade_sai_poli, FKcod_usuario, nome_usuario, FKcod_paciente, nome_paciente, flg_material}
            Me.Rows.Add(rowvw_SAIDAS_POLICLINICARow)
            Return rowvw_SAIDAS_POLICLINICARow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBycod_sai_poli(ByVal cod_sai_poli As Long) As vw_SAIDAS_POLICLINICARow
            Return CType(Me.Rows.Find(New Object() {cod_sai_poli}),vw_SAIDAS_POLICLINICARow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As vw_SAIDAS_POLICLINICADataTable = CType(MyBase.Clone,vw_SAIDAS_POLICLINICADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New vw_SAIDAS_POLICLINICADataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncod_sai_poli = MyBase.Columns("cod_sai_poli")
            Me.columndata_sai_poli = MyBase.Columns("data_sai_poli")
            Me.columnFKcod_medicamento = MyBase.Columns("FKcod_medicamento")
            Me.columnnome_medicamento = MyBase.Columns("nome_medicamento")
            Me.columnvalidade_sai_poli = MyBase.Columns("validade_sai_poli")
            Me.columnquantidade_sai_poli = MyBase.Columns("quantidade_sai_poli")
            Me.columnFKcod_usuario = MyBase.Columns("FKcod_usuario")
            Me.columnnome_usuario = MyBase.Columns("nome_usuario")
            Me.columnFKcod_paciente = MyBase.Columns("FKcod_paciente")
            Me.columnnome_paciente = MyBase.Columns("nome_paciente")
            Me.columnflg_material = MyBase.Columns("flg_material")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncod_sai_poli = New System.Data.DataColumn("cod_sai_poli", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncod_sai_poli)
            Me.columndata_sai_poli = New System.Data.DataColumn("data_sai_poli", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndata_sai_poli)
            Me.columnFKcod_medicamento = New System.Data.DataColumn("FKcod_medicamento", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFKcod_medicamento)
            Me.columnnome_medicamento = New System.Data.DataColumn("nome_medicamento", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnome_medicamento)
            Me.columnvalidade_sai_poli = New System.Data.DataColumn("validade_sai_poli", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvalidade_sai_poli)
            Me.columnquantidade_sai_poli = New System.Data.DataColumn("quantidade_sai_poli", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnquantidade_sai_poli)
            Me.columnFKcod_usuario = New System.Data.DataColumn("FKcod_usuario", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFKcod_usuario)
            Me.columnnome_usuario = New System.Data.DataColumn("nome_usuario", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnome_usuario)
            Me.columnFKcod_paciente = New System.Data.DataColumn("FKcod_paciente", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFKcod_paciente)
            Me.columnnome_paciente = New System.Data.DataColumn("nome_paciente", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnome_paciente)
            Me.columnflg_material = New System.Data.DataColumn("flg_material", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnflg_material)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columncod_sai_poli}, true))
            Me.columncod_sai_poli.AutoIncrement = true
            Me.columncod_sai_poli.AllowDBNull = false
            Me.columncod_sai_poli.ReadOnly = true
            Me.columncod_sai_poli.Unique = true
            Me.columndata_sai_poli.AllowDBNull = false
            Me.columnFKcod_medicamento.AllowDBNull = false
            Me.columnnome_medicamento.AllowDBNull = false
            Me.columnnome_medicamento.MaxLength = 100
            Me.columnvalidade_sai_poli.AllowDBNull = false
            Me.columnvalidade_sai_poli.MaxLength = 10
            Me.columnquantidade_sai_poli.AllowDBNull = false
            Me.columnFKcod_usuario.AllowDBNull = false
            Me.columnnome_usuario.AllowDBNull = false
            Me.columnnome_usuario.MaxLength = 100
            Me.columnFKcod_paciente.AllowDBNull = false
            Me.columnnome_paciente.AllowDBNull = false
            Me.columnnome_paciente.MaxLength = 100
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newvw_SAIDAS_POLICLINICARow() As vw_SAIDAS_POLICLINICARow
            Return CType(Me.NewRow,vw_SAIDAS_POLICLINICARow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New vw_SAIDAS_POLICLINICARow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(vw_SAIDAS_POLICLINICARow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.vw_SAIDAS_POLICLINICARowChangedEvent) Is Nothing) Then
                RaiseEvent vw_SAIDAS_POLICLINICARowChanged(Me, New vw_SAIDAS_POLICLINICARowChangeEvent(CType(e.Row,vw_SAIDAS_POLICLINICARow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.vw_SAIDAS_POLICLINICARowChangingEvent) Is Nothing) Then
                RaiseEvent vw_SAIDAS_POLICLINICARowChanging(Me, New vw_SAIDAS_POLICLINICARowChangeEvent(CType(e.Row,vw_SAIDAS_POLICLINICARow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.vw_SAIDAS_POLICLINICARowDeletedEvent) Is Nothing) Then
                RaiseEvent vw_SAIDAS_POLICLINICARowDeleted(Me, New vw_SAIDAS_POLICLINICARowChangeEvent(CType(e.Row,vw_SAIDAS_POLICLINICARow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.vw_SAIDAS_POLICLINICARowDeletingEvent) Is Nothing) Then
                RaiseEvent vw_SAIDAS_POLICLINICARowDeleting(Me, New vw_SAIDAS_POLICLINICARowChangeEvent(CType(e.Row,vw_SAIDAS_POLICLINICARow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removevw_SAIDAS_POLICLINICARow(ByVal row As vw_SAIDAS_POLICLINICARow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtsBD_SICEP = New dtsBD_SICEP
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "vw_SAIDAS_POLICLINICADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tb_usuarioRow
        Inherits System.Data.DataRow
        
        Private tabletb_usuario As tb_usuarioDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletb_usuario = CType(Me.Table,tb_usuarioDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cod_usuario() As Long
            Get
                Return CType(Me(Me.tabletb_usuario.cod_usuarioColumn),Long)
            End Get
            Set
                Me(Me.tabletb_usuario.cod_usuarioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nome_usuario() As String
            Get
                Return CType(Me(Me.tabletb_usuario.nome_usuarioColumn),String)
            End Get
            Set
                Me(Me.tabletb_usuario.nome_usuarioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cargo_usuario() As String
            Get
                Return CType(Me(Me.tabletb_usuario.cargo_usuarioColumn),String)
            End Get
            Set
                Me(Me.tabletb_usuario.cargo_usuarioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property end_usuario() As String
            Get
                Try 
                    Return CType(Me(Me.tabletb_usuario.end_usuarioColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'end_usuario' in table 'tb_usuario' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletb_usuario.end_usuarioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tel_res_usuario() As String
            Get
                Try 
                    Return CType(Me(Me.tabletb_usuario.tel_res_usuarioColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'tel_res_usuario' in table 'tb_usuario' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletb_usuario.tel_res_usuarioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tel_cel_usuario() As String
            Get
                Try 
                    Return CType(Me(Me.tabletb_usuario.tel_cel_usuarioColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'tel_cel_usuario' in table 'tb_usuario' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletb_usuario.tel_cel_usuarioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property email_usuario() As String
            Get
                Try 
                    Return CType(Me(Me.tabletb_usuario.email_usuarioColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'email_usuario' in table 'tb_usuario' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletb_usuario.email_usuarioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CPF_usuario() As String
            Get
                Return CType(Me(Me.tabletb_usuario.CPF_usuarioColumn),String)
            End Get
            Set
                Me(Me.tabletb_usuario.CPF_usuarioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RG_usuario() As String
            Get
                Return CType(Me(Me.tabletb_usuario.RG_usuarioColumn),String)
            End Get
            Set
                Me(Me.tabletb_usuario.RG_usuarioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property login_usuario() As String
            Get
                Return CType(Me(Me.tabletb_usuario.login_usuarioColumn),String)
            End Get
            Set
                Me(Me.tabletb_usuario.login_usuarioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property senha_usuario() As String
            Get
                Return CType(Me(Me.tabletb_usuario.senha_usuarioColumn),String)
            End Get
            Set
                Me(Me.tabletb_usuario.senha_usuarioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property data_cad_usuario() As Date
            Get
                Return CType(Me(Me.tabletb_usuario.data_cad_usuarioColumn),Date)
            End Get
            Set
                Me(Me.tabletb_usuario.data_cad_usuarioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FKcod_perfil() As Long
            Get
                Return CType(Me(Me.tabletb_usuario.FKcod_perfilColumn),Long)
            End Get
            Set
                Me(Me.tabletb_usuario.FKcod_perfilColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tb_perfilRow() As tb_perfilRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_tb_usuario_tb_perfil")),tb_perfilRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_tb_usuario_tb_perfil"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isend_usuarioNull() As Boolean
            Return Me.IsNull(Me.tabletb_usuario.end_usuarioColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setend_usuarioNull()
            Me(Me.tabletb_usuario.end_usuarioColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Istel_res_usuarioNull() As Boolean
            Return Me.IsNull(Me.tabletb_usuario.tel_res_usuarioColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Settel_res_usuarioNull()
            Me(Me.tabletb_usuario.tel_res_usuarioColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Istel_cel_usuarioNull() As Boolean
            Return Me.IsNull(Me.tabletb_usuario.tel_cel_usuarioColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Settel_cel_usuarioNull()
            Me(Me.tabletb_usuario.tel_cel_usuarioColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isemail_usuarioNull() As Boolean
            Return Me.IsNull(Me.tabletb_usuario.email_usuarioColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setemail_usuarioNull()
            Me(Me.tabletb_usuario.email_usuarioColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Gettb_ent_secretariaRows() As tb_ent_secretariaRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("tb_usuario_tb_ent_secretaria")),tb_ent_secretariaRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Gettb_sai_secretariaRows() As tb_sai_secretariaRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("tb_usuario_tb_sai_secretaria")),tb_sai_secretariaRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Gettb_sai_policlinicaRows() As tb_sai_policlinicaRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("tb_usuario_tb_sai_policlinica")),tb_sai_policlinicaRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Gettb_ent_policlinicaRows() As tb_ent_policlinicaRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("tb_usuario_tb_ent_policlinica")),tb_ent_policlinicaRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tb_perfilRow
        Inherits System.Data.DataRow
        
        Private tabletb_perfil As tb_perfilDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletb_perfil = CType(Me.Table,tb_perfilDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cod_perfil() As Long
            Get
                Return CType(Me(Me.tabletb_perfil.cod_perfilColumn),Long)
            End Get
            Set
                Me(Me.tabletb_perfil.cod_perfilColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nome_perfil() As String
            Get
                Return CType(Me(Me.tabletb_perfil.nome_perfilColumn),String)
            End Get
            Set
                Me(Me.tabletb_perfil.nome_perfilColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Gettb_usuarioRows() As tb_usuarioRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_tb_usuario_tb_perfil")),tb_usuarioRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tb_pacienteRow
        Inherits System.Data.DataRow
        
        Private tabletb_paciente As tb_pacienteDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletb_paciente = CType(Me.Table,tb_pacienteDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cod_paciente() As Long
            Get
                Return CType(Me(Me.tabletb_paciente.cod_pacienteColumn),Long)
            End Get
            Set
                Me(Me.tabletb_paciente.cod_pacienteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property data_cad_paciente() As Date
            Get
                Return CType(Me(Me.tabletb_paciente.data_cad_pacienteColumn),Date)
            End Get
            Set
                Me(Me.tabletb_paciente.data_cad_pacienteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nome_paciente() As String
            Get
                Return CType(Me(Me.tabletb_paciente.nome_pacienteColumn),String)
            End Get
            Set
                Me(Me.tabletb_paciente.nome_pacienteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property end_paciente() As String
            Get
                Return CType(Me(Me.tabletb_paciente.end_pacienteColumn),String)
            End Get
            Set
                Me(Me.tabletb_paciente.end_pacienteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property data_nasc_paciente() As String
            Get
                Return CType(Me(Me.tabletb_paciente.data_nasc_pacienteColumn),String)
            End Get
            Set
                Me(Me.tabletb_paciente.data_nasc_pacienteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sexo_paciente() As String
            Get
                Return CType(Me(Me.tabletb_paciente.sexo_pacienteColumn),String)
            End Get
            Set
                Me(Me.tabletb_paciente.sexo_pacienteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tel_paciente() As String
            Get
                Return CType(Me(Me.tabletb_paciente.tel_pacienteColumn),String)
            End Get
            Set
                Me(Me.tabletb_paciente.tel_pacienteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nome_mae_paciente() As String
            Get
                Return CType(Me(Me.tabletb_paciente.nome_mae_pacienteColumn),String)
            End Get
            Set
                Me(Me.tabletb_paciente.nome_mae_pacienteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CPF_paciente() As String
            Get
                Return CType(Me(Me.tabletb_paciente.CPF_pacienteColumn),String)
            End Get
            Set
                Me(Me.tabletb_paciente.CPF_pacienteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RG_paciente() As String
            Get
                Return CType(Me(Me.tabletb_paciente.RG_pacienteColumn),String)
            End Get
            Set
                Me(Me.tabletb_paciente.RG_pacienteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FKcod_microarea() As Long
            Get
                Return CType(Me(Me.tabletb_paciente.FKcod_microareaColumn),Long)
            End Get
            Set
                Me(Me.tabletb_paciente.FKcod_microareaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tb_microareaRow() As tb_microareaRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("tb_microarea_tb_paciente")),tb_microareaRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("tb_microarea_tb_paciente"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Gettb_sai_policlinicaRows() As tb_sai_policlinicaRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("tb_paciente_tb_sai_policlinica")),tb_sai_policlinicaRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tb_microareaRow
        Inherits System.Data.DataRow
        
        Private tabletb_microarea As tb_microareaDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletb_microarea = CType(Me.Table,tb_microareaDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cod_microarea() As Long
            Get
                Return CType(Me(Me.tabletb_microarea.cod_microareaColumn),Long)
            End Get
            Set
                Me(Me.tabletb_microarea.cod_microareaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property data_cad_microarea() As Date
            Get
                Return CType(Me(Me.tabletb_microarea.data_cad_microareaColumn),Date)
            End Get
            Set
                Me(Me.tabletb_microarea.data_cad_microareaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property agente_microarea() As String
            Get
                Return CType(Me(Me.tabletb_microarea.agente_microareaColumn),String)
            End Get
            Set
                Me(Me.tabletb_microarea.agente_microareaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property obs_microarea() As String
            Get
                Return CType(Me(Me.tabletb_microarea.obs_microareaColumn),String)
            End Get
            Set
                Me(Me.tabletb_microarea.obs_microareaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Gettb_pacienteRows() As tb_pacienteRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("tb_microarea_tb_paciente")),tb_pacienteRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tb_medicamentoRow
        Inherits System.Data.DataRow
        
        Private tabletb_medicamento As tb_medicamentoDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletb_medicamento = CType(Me.Table,tb_medicamentoDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cod_medicamento() As Long
            Get
                Return CType(Me(Me.tabletb_medicamento.cod_medicamentoColumn),Long)
            End Get
            Set
                Me(Me.tabletb_medicamento.cod_medicamentoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property data_cad_medicamento() As Date
            Get
                Return CType(Me(Me.tabletb_medicamento.data_cad_medicamentoColumn),Date)
            End Get
            Set
                Me(Me.tabletb_medicamento.data_cad_medicamentoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nome_medicamento() As String
            Get
                Return CType(Me(Me.tabletb_medicamento.nome_medicamentoColumn),String)
            End Get
            Set
                Me(Me.tabletb_medicamento.nome_medicamentoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property composicao_medicamento() As String
            Get
                Return CType(Me(Me.tabletb_medicamento.composicao_medicamentoColumn),String)
            End Get
            Set
                Me(Me.tabletb_medicamento.composicao_medicamentoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property info_medicamento() As String
            Get
                Return CType(Me(Me.tabletb_medicamento.info_medicamentoColumn),String)
            End Get
            Set
                Me(Me.tabletb_medicamento.info_medicamentoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Gettb_ent_secretariaRows() As tb_ent_secretariaRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("tb_medicamento_tb_ent_secretaria")),tb_ent_secretariaRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Gettb_sai_secretariaRows() As tb_sai_secretariaRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("tb_medicamento_tb_sai_secretaria")),tb_sai_secretariaRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Gettb_sai_policlinicaRows() As tb_sai_policlinicaRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("tb_medicamento_tb_sai_policlinica")),tb_sai_policlinicaRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Gettb_ent_policlinicaRows() As tb_ent_policlinicaRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("tb_medicamento_tb_ent_policlinica")),tb_ent_policlinicaRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tb_ent_secretariaRow
        Inherits System.Data.DataRow
        
        Private tabletb_ent_secretaria As tb_ent_secretariaDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletb_ent_secretaria = CType(Me.Table,tb_ent_secretariaDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cod_ent_sec() As Long
            Get
                Return CType(Me(Me.tabletb_ent_secretaria.cod_ent_secColumn),Long)
            End Get
            Set
                Me(Me.tabletb_ent_secretaria.cod_ent_secColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property data_ent_sec() As Date
            Get
                Return CType(Me(Me.tabletb_ent_secretaria.data_ent_secColumn),Date)
            End Get
            Set
                Me(Me.tabletb_ent_secretaria.data_ent_secColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lote_ent_sec() As String
            Get
                Return CType(Me(Me.tabletb_ent_secretaria.lote_ent_secColumn),String)
            End Get
            Set
                Me(Me.tabletb_ent_secretaria.lote_ent_secColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nota_ent_sec() As String
            Get
                Return CType(Me(Me.tabletb_ent_secretaria.nota_ent_secColumn),String)
            End Get
            Set
                Me(Me.tabletb_ent_secretaria.nota_ent_secColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FKcod_medicamento() As Long
            Get
                Return CType(Me(Me.tabletb_ent_secretaria.FKcod_medicamentoColumn),Long)
            End Get
            Set
                Me(Me.tabletb_ent_secretaria.FKcod_medicamentoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property validade_ent_sec() As String
            Get
                Return CType(Me(Me.tabletb_ent_secretaria.validade_ent_secColumn),String)
            End Get
            Set
                Me(Me.tabletb_ent_secretaria.validade_ent_secColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property quantidade_ent_sec() As Long
            Get
                Return CType(Me(Me.tabletb_ent_secretaria.quantidade_ent_secColumn),Long)
            End Get
            Set
                Me(Me.tabletb_ent_secretaria.quantidade_ent_secColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FKcod_usuario() As Long
            Get
                Return CType(Me(Me.tabletb_ent_secretaria.FKcod_usuarioColumn),Long)
            End Get
            Set
                Me(Me.tabletb_ent_secretaria.FKcod_usuarioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tb_usuarioRow() As tb_usuarioRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("tb_usuario_tb_ent_secretaria")),tb_usuarioRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("tb_usuario_tb_ent_secretaria"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tb_medicamentoRow() As tb_medicamentoRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("tb_medicamento_tb_ent_secretaria")),tb_medicamentoRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("tb_medicamento_tb_ent_secretaria"))
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tb_sai_secretariaRow
        Inherits System.Data.DataRow
        
        Private tabletb_sai_secretaria As tb_sai_secretariaDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletb_sai_secretaria = CType(Me.Table,tb_sai_secretariaDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cod_sai_sec() As Long
            Get
                Return CType(Me(Me.tabletb_sai_secretaria.cod_sai_secColumn),Long)
            End Get
            Set
                Me(Me.tabletb_sai_secretaria.cod_sai_secColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property data_sai_sec() As Date
            Get
                Return CType(Me(Me.tabletb_sai_secretaria.data_sai_secColumn),Date)
            End Get
            Set
                Me(Me.tabletb_sai_secretaria.data_sai_secColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FKcod_medicamento() As Long
            Get
                Return CType(Me(Me.tabletb_sai_secretaria.FKcod_medicamentoColumn),Long)
            End Get
            Set
                Me(Me.tabletb_sai_secretaria.FKcod_medicamentoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property validade_sai_sec() As String
            Get
                Return CType(Me(Me.tabletb_sai_secretaria.validade_sai_secColumn),String)
            End Get
            Set
                Me(Me.tabletb_sai_secretaria.validade_sai_secColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property quantidade_sai_sec() As Long
            Get
                Return CType(Me(Me.tabletb_sai_secretaria.quantidade_sai_secColumn),Long)
            End Get
            Set
                Me(Me.tabletb_sai_secretaria.quantidade_sai_secColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FKcod_usuario() As Long
            Get
                Return CType(Me(Me.tabletb_sai_secretaria.FKcod_usuarioColumn),Long)
            End Get
            Set
                Me(Me.tabletb_sai_secretaria.FKcod_usuarioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FKcod_regiao() As Long
            Get
                Return CType(Me(Me.tabletb_sai_secretaria.FKcod_regiaoColumn),Long)
            End Get
            Set
                Me(Me.tabletb_sai_secretaria.FKcod_regiaoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tb_usuarioRow() As tb_usuarioRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("tb_usuario_tb_sai_secretaria")),tb_usuarioRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("tb_usuario_tb_sai_secretaria"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tb_regiaoRow() As tb_regiaoRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("tb_regiao_tb_sai_secretaria")),tb_regiaoRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("tb_regiao_tb_sai_secretaria"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tb_medicamentoRow() As tb_medicamentoRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("tb_medicamento_tb_sai_secretaria")),tb_medicamentoRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("tb_medicamento_tb_sai_secretaria"))
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tb_regiaoRow
        Inherits System.Data.DataRow
        
        Private tabletb_regiao As tb_regiaoDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletb_regiao = CType(Me.Table,tb_regiaoDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cod_regiao() As Long
            Get
                Return CType(Me(Me.tabletb_regiao.cod_regiaoColumn),Long)
            End Get
            Set
                Me(Me.tabletb_regiao.cod_regiaoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nome_regiao() As String
            Get
                Return CType(Me(Me.tabletb_regiao.nome_regiaoColumn),String)
            End Get
            Set
                Me(Me.tabletb_regiao.nome_regiaoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Gettb_sai_secretariaRows() As tb_sai_secretariaRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("tb_regiao_tb_sai_secretaria")),tb_sai_secretariaRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class vw_ENTRADAS_SECRETARIARow
        Inherits System.Data.DataRow
        
        Private tablevw_ENTRADAS_SECRETARIA As vw_ENTRADAS_SECRETARIADataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablevw_ENTRADAS_SECRETARIA = CType(Me.Table,vw_ENTRADAS_SECRETARIADataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cod_ent_sec() As Long
            Get
                Return CType(Me(Me.tablevw_ENTRADAS_SECRETARIA.cod_ent_secColumn),Long)
            End Get
            Set
                Me(Me.tablevw_ENTRADAS_SECRETARIA.cod_ent_secColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property data_ent_sec() As Date
            Get
                Return CType(Me(Me.tablevw_ENTRADAS_SECRETARIA.data_ent_secColumn),Date)
            End Get
            Set
                Me(Me.tablevw_ENTRADAS_SECRETARIA.data_ent_secColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lote_ent_sec() As String
            Get
                Return CType(Me(Me.tablevw_ENTRADAS_SECRETARIA.lote_ent_secColumn),String)
            End Get
            Set
                Me(Me.tablevw_ENTRADAS_SECRETARIA.lote_ent_secColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nota_ent_sec() As String
            Get
                Return CType(Me(Me.tablevw_ENTRADAS_SECRETARIA.nota_ent_secColumn),String)
            End Get
            Set
                Me(Me.tablevw_ENTRADAS_SECRETARIA.nota_ent_secColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FKcod_medicamento() As Long
            Get
                Return CType(Me(Me.tablevw_ENTRADAS_SECRETARIA.FKcod_medicamentoColumn),Long)
            End Get
            Set
                Me(Me.tablevw_ENTRADAS_SECRETARIA.FKcod_medicamentoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nome_medicamento() As String
            Get
                Return CType(Me(Me.tablevw_ENTRADAS_SECRETARIA.nome_medicamentoColumn),String)
            End Get
            Set
                Me(Me.tablevw_ENTRADAS_SECRETARIA.nome_medicamentoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property validade_ent_sec() As String
            Get
                Return CType(Me(Me.tablevw_ENTRADAS_SECRETARIA.validade_ent_secColumn),String)
            End Get
            Set
                Me(Me.tablevw_ENTRADAS_SECRETARIA.validade_ent_secColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property quantidade_ent_sec() As Long
            Get
                Return CType(Me(Me.tablevw_ENTRADAS_SECRETARIA.quantidade_ent_secColumn),Long)
            End Get
            Set
                Me(Me.tablevw_ENTRADAS_SECRETARIA.quantidade_ent_secColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FKcod_usuario() As Long
            Get
                Return CType(Me(Me.tablevw_ENTRADAS_SECRETARIA.FKcod_usuarioColumn),Long)
            End Get
            Set
                Me(Me.tablevw_ENTRADAS_SECRETARIA.FKcod_usuarioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nome_usuario() As String
            Get
                Return CType(Me(Me.tablevw_ENTRADAS_SECRETARIA.nome_usuarioColumn),String)
            End Get
            Set
                Me(Me.tablevw_ENTRADAS_SECRETARIA.nome_usuarioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property flg_material() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablevw_ENTRADAS_SECRETARIA.flg_materialColumn),Boolean)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'flg_material' in table 'vw_ENTRADAS_SECRETARIA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevw_ENTRADAS_SECRETARIA.flg_materialColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isflg_materialNull() As Boolean
            Return Me.IsNull(Me.tablevw_ENTRADAS_SECRETARIA.flg_materialColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setflg_materialNull()
            Me(Me.tablevw_ENTRADAS_SECRETARIA.flg_materialColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class vw_SAIDAS_SECRETARIARow
        Inherits System.Data.DataRow
        
        Private tablevw_SAIDAS_SECRETARIA As vw_SAIDAS_SECRETARIADataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablevw_SAIDAS_SECRETARIA = CType(Me.Table,vw_SAIDAS_SECRETARIADataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cod_sai_sec() As Long
            Get
                Return CType(Me(Me.tablevw_SAIDAS_SECRETARIA.cod_sai_secColumn),Long)
            End Get
            Set
                Me(Me.tablevw_SAIDAS_SECRETARIA.cod_sai_secColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property data_sai_sec() As Date
            Get
                Return CType(Me(Me.tablevw_SAIDAS_SECRETARIA.data_sai_secColumn),Date)
            End Get
            Set
                Me(Me.tablevw_SAIDAS_SECRETARIA.data_sai_secColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FKcod_medicamento() As Long
            Get
                Return CType(Me(Me.tablevw_SAIDAS_SECRETARIA.FKcod_medicamentoColumn),Long)
            End Get
            Set
                Me(Me.tablevw_SAIDAS_SECRETARIA.FKcod_medicamentoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nome_medicamento() As String
            Get
                Return CType(Me(Me.tablevw_SAIDAS_SECRETARIA.nome_medicamentoColumn),String)
            End Get
            Set
                Me(Me.tablevw_SAIDAS_SECRETARIA.nome_medicamentoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property validade_sai_sec() As String
            Get
                Return CType(Me(Me.tablevw_SAIDAS_SECRETARIA.validade_sai_secColumn),String)
            End Get
            Set
                Me(Me.tablevw_SAIDAS_SECRETARIA.validade_sai_secColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property quantidade_sai_sec() As Long
            Get
                Return CType(Me(Me.tablevw_SAIDAS_SECRETARIA.quantidade_sai_secColumn),Long)
            End Get
            Set
                Me(Me.tablevw_SAIDAS_SECRETARIA.quantidade_sai_secColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FKcod_usuario() As Long
            Get
                Return CType(Me(Me.tablevw_SAIDAS_SECRETARIA.FKcod_usuarioColumn),Long)
            End Get
            Set
                Me(Me.tablevw_SAIDAS_SECRETARIA.FKcod_usuarioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nome_usuario() As String
            Get
                Return CType(Me(Me.tablevw_SAIDAS_SECRETARIA.nome_usuarioColumn),String)
            End Get
            Set
                Me(Me.tablevw_SAIDAS_SECRETARIA.nome_usuarioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FKcod_regiao() As Long
            Get
                Return CType(Me(Me.tablevw_SAIDAS_SECRETARIA.FKcod_regiaoColumn),Long)
            End Get
            Set
                Me(Me.tablevw_SAIDAS_SECRETARIA.FKcod_regiaoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nome_regiao() As String
            Get
                Return CType(Me(Me.tablevw_SAIDAS_SECRETARIA.nome_regiaoColumn),String)
            End Get
            Set
                Me(Me.tablevw_SAIDAS_SECRETARIA.nome_regiaoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property flg_material() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablevw_SAIDAS_SECRETARIA.flg_materialColumn),Boolean)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'flg_material' in table 'vw_SAIDAS_SECRETARIA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevw_SAIDAS_SECRETARIA.flg_materialColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isflg_materialNull() As Boolean
            Return Me.IsNull(Me.tablevw_SAIDAS_SECRETARIA.flg_materialColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setflg_materialNull()
            Me(Me.tablevw_SAIDAS_SECRETARIA.flg_materialColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class vw_ENTRADAS_POLICLINICARow
        Inherits System.Data.DataRow
        
        Private tablevw_ENTRADAS_POLICLINICA As vw_ENTRADAS_POLICLINICADataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablevw_ENTRADAS_POLICLINICA = CType(Me.Table,vw_ENTRADAS_POLICLINICADataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cod_ent_poli() As Long
            Get
                Return CType(Me(Me.tablevw_ENTRADAS_POLICLINICA.cod_ent_poliColumn),Long)
            End Get
            Set
                Me(Me.tablevw_ENTRADAS_POLICLINICA.cod_ent_poliColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property data_ent_poli() As Date
            Get
                Return CType(Me(Me.tablevw_ENTRADAS_POLICLINICA.data_ent_poliColumn),Date)
            End Get
            Set
                Me(Me.tablevw_ENTRADAS_POLICLINICA.data_ent_poliColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FKcod_medicamento() As Long
            Get
                Return CType(Me(Me.tablevw_ENTRADAS_POLICLINICA.FKcod_medicamentoColumn),Long)
            End Get
            Set
                Me(Me.tablevw_ENTRADAS_POLICLINICA.FKcod_medicamentoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nome_medicamento() As String
            Get
                Return CType(Me(Me.tablevw_ENTRADAS_POLICLINICA.nome_medicamentoColumn),String)
            End Get
            Set
                Me(Me.tablevw_ENTRADAS_POLICLINICA.nome_medicamentoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property validade_ent_poli() As String
            Get
                Return CType(Me(Me.tablevw_ENTRADAS_POLICLINICA.validade_ent_poliColumn),String)
            End Get
            Set
                Me(Me.tablevw_ENTRADAS_POLICLINICA.validade_ent_poliColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property quantidade_ent_poli() As Long
            Get
                Return CType(Me(Me.tablevw_ENTRADAS_POLICLINICA.quantidade_ent_poliColumn),Long)
            End Get
            Set
                Me(Me.tablevw_ENTRADAS_POLICLINICA.quantidade_ent_poliColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FKcod_usuario() As Long
            Get
                Return CType(Me(Me.tablevw_ENTRADAS_POLICLINICA.FKcod_usuarioColumn),Long)
            End Get
            Set
                Me(Me.tablevw_ENTRADAS_POLICLINICA.FKcod_usuarioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nome_usuario() As String
            Get
                Return CType(Me(Me.tablevw_ENTRADAS_POLICLINICA.nome_usuarioColumn),String)
            End Get
            Set
                Me(Me.tablevw_ENTRADAS_POLICLINICA.nome_usuarioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property flg_material() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablevw_ENTRADAS_POLICLINICA.flg_materialColumn),Boolean)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'flg_material' in table 'vw_ENTRADAS_POLICLINICA' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablevw_ENTRADAS_POLICLINICA.flg_materialColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isflg_materialNull() As Boolean
            Return Me.IsNull(Me.tablevw_ENTRADAS_POLICLINICA.flg_materialColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setflg_materialNull()
            Me(Me.tablevw_ENTRADAS_POLICLINICA.flg_materialColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tb_sai_policlinicaRow
        Inherits System.Data.DataRow
        
        Private tabletb_sai_policlinica As tb_sai_policlinicaDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletb_sai_policlinica = CType(Me.Table,tb_sai_policlinicaDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cod_sai_poli() As Long
            Get
                Return CType(Me(Me.tabletb_sai_policlinica.cod_sai_poliColumn),Long)
            End Get
            Set
                Me(Me.tabletb_sai_policlinica.cod_sai_poliColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property data_sai_poli() As Date
            Get
                Return CType(Me(Me.tabletb_sai_policlinica.data_sai_poliColumn),Date)
            End Get
            Set
                Me(Me.tabletb_sai_policlinica.data_sai_poliColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FKcod_medicamento() As Long
            Get
                Return CType(Me(Me.tabletb_sai_policlinica.FKcod_medicamentoColumn),Long)
            End Get
            Set
                Me(Me.tabletb_sai_policlinica.FKcod_medicamentoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property validade_sai_poli() As String
            Get
                Return CType(Me(Me.tabletb_sai_policlinica.validade_sai_poliColumn),String)
            End Get
            Set
                Me(Me.tabletb_sai_policlinica.validade_sai_poliColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property quantidade_sai_poli() As Long
            Get
                Return CType(Me(Me.tabletb_sai_policlinica.quantidade_sai_poliColumn),Long)
            End Get
            Set
                Me(Me.tabletb_sai_policlinica.quantidade_sai_poliColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FKcod_usuario() As Long
            Get
                Return CType(Me(Me.tabletb_sai_policlinica.FKcod_usuarioColumn),Long)
            End Get
            Set
                Me(Me.tabletb_sai_policlinica.FKcod_usuarioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FKcod_paciente() As Long
            Get
                Return CType(Me(Me.tabletb_sai_policlinica.FKcod_pacienteColumn),Long)
            End Get
            Set
                Me(Me.tabletb_sai_policlinica.FKcod_pacienteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tb_medicamentoRow() As tb_medicamentoRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("tb_medicamento_tb_sai_policlinica")),tb_medicamentoRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("tb_medicamento_tb_sai_policlinica"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tb_usuarioRow() As tb_usuarioRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("tb_usuario_tb_sai_policlinica")),tb_usuarioRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("tb_usuario_tb_sai_policlinica"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tb_pacienteRow() As tb_pacienteRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("tb_paciente_tb_sai_policlinica")),tb_pacienteRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("tb_paciente_tb_sai_policlinica"))
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tb_ent_policlinicaRow
        Inherits System.Data.DataRow
        
        Private tabletb_ent_policlinica As tb_ent_policlinicaDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletb_ent_policlinica = CType(Me.Table,tb_ent_policlinicaDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cod_ent_poli() As Long
            Get
                Return CType(Me(Me.tabletb_ent_policlinica.cod_ent_poliColumn),Long)
            End Get
            Set
                Me(Me.tabletb_ent_policlinica.cod_ent_poliColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property data_ent_poli() As Date
            Get
                Return CType(Me(Me.tabletb_ent_policlinica.data_ent_poliColumn),Date)
            End Get
            Set
                Me(Me.tabletb_ent_policlinica.data_ent_poliColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FKcod_medicamento() As Long
            Get
                Return CType(Me(Me.tabletb_ent_policlinica.FKcod_medicamentoColumn),Long)
            End Get
            Set
                Me(Me.tabletb_ent_policlinica.FKcod_medicamentoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property validade_ent_poli() As String
            Get
                Return CType(Me(Me.tabletb_ent_policlinica.validade_ent_poliColumn),String)
            End Get
            Set
                Me(Me.tabletb_ent_policlinica.validade_ent_poliColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property quantidade_ent_poli() As Long
            Get
                Return CType(Me(Me.tabletb_ent_policlinica.quantidade_ent_poliColumn),Long)
            End Get
            Set
                Me(Me.tabletb_ent_policlinica.quantidade_ent_poliColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FKcod_usuario() As Long
            Get
                Return CType(Me(Me.tabletb_ent_policlinica.FKcod_usuarioColumn),Long)
            End Get
            Set
                Me(Me.tabletb_ent_policlinica.FKcod_usuarioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tb_medicamentoRow() As tb_medicamentoRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("tb_medicamento_tb_ent_policlinica")),tb_medicamentoRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("tb_medicamento_tb_ent_policlinica"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tb_usuarioRow() As tb_usuarioRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("tb_usuario_tb_ent_policlinica")),tb_usuarioRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("tb_usuario_tb_ent_policlinica"))
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class vw_SAIDAS_POLICLINICARow
        Inherits System.Data.DataRow
        
        Private tablevw_SAIDAS_POLICLINICA As vw_SAIDAS_POLICLINICADataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablevw_SAIDAS_POLICLINICA = CType(Me.Table,vw_SAIDAS_POLICLINICADataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cod_sai_poli() As Long
            Get
                Return CType(Me(Me.tablevw_SAIDAS_POLICLINICA.cod_sai_poliColumn),Long)
            End Get
            Set
                Me(Me.tablevw_SAIDAS_POLICLINICA.cod_sai_poliColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property data_sai_poli() As Date
            Get
                Return CType(Me(Me.tablevw_SAIDAS_POLICLINICA.data_sai_poliColumn),Date)
            End Get
            Set
                Me(Me.tablevw_SAIDAS_POLICLINICA.data_sai_poliColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FKcod_medicamento() As Long
            Get
                Return CType(Me(Me.tablevw_SAIDAS_POLICLINICA.FKcod_medicamentoColumn),Long)
            End Get
            Set
                Me(Me.tablevw_SAIDAS_POLICLINICA.FKcod_medicamentoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nome_medicamento() As String
            Get
                Return CType(Me(Me.tablevw_SAIDAS_POLICLINICA.nome_medicamentoColumn),String)
            End Get
            Set
                Me(Me.tablevw_SAIDAS_POLICLINICA.nome_medicamentoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property validade_sai_poli() As String
            Get
                Return CType(Me(Me.tablevw_SAIDAS_POLICLINICA.validade_sai_poliColumn),String)
            End Get
            Set
                Me(Me.tablevw_SAIDAS_POLICLINICA.validade_sai_poliColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property quantidade_sai_poli() As Long
            Get
                Return CType(Me(Me.tablevw_SAIDAS_POLICLINICA.quantidade_sai_poliColumn),Long)
            End Get
            Set
                Me(Me.tablevw_SAIDAS_POLICLINICA.quantidade_sai_poliColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FKcod_usuario() As Long
            Get
                Return CType(Me(Me.tablevw_SAIDAS_POLICLINICA.FKcod_usuarioColumn),Long)
            End Get
            Set
                Me(Me.tablevw_SAIDAS_POLICLINICA.FKcod_usuarioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nome_usuario() As String
            Get
                Return CType(Me(Me.tablevw_SAIDAS_POLICLINICA.nome_usuarioColumn),String)
            End Get
            Set
                Me(Me.tablevw_SAIDAS_POLICLINICA.nome_usuarioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FKcod_paciente() As Long
            Get
                Return CType(Me(Me.tablevw_SAIDAS_POLICLINICA.FKcod_pacienteColumn),Long)
            End Get
            Set
                Me(Me.tablevw_SAIDAS_POLICLINICA.FKcod_pacienteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nome_paciente() As String
            Get
                Return CType(Me(Me.tablevw_SAIDAS_POLICLINICA.nome_pacienteColumn),String)
            End Get
            Set
                Me(Me.tablevw_SAIDAS_POLICLINICA.nome_pacienteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property flg_material() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablevw_SAIDAS_POLICLINICA.flg_materialColumn),Boolean)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'flg_material' in table 'vw_SAIDAS_POLICLINICA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevw_SAIDAS_POLICLINICA.flg_materialColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isflg_materialNull() As Boolean
            Return Me.IsNull(Me.tablevw_SAIDAS_POLICLINICA.flg_materialColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setflg_materialNull()
            Me(Me.tablevw_SAIDAS_POLICLINICA.flg_materialColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tb_usuarioRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As tb_usuarioRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tb_usuarioRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tb_usuarioRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tb_perfilRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As tb_perfilRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tb_perfilRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tb_perfilRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tb_pacienteRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As tb_pacienteRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tb_pacienteRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tb_pacienteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tb_microareaRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As tb_microareaRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tb_microareaRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tb_microareaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tb_medicamentoRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As tb_medicamentoRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tb_medicamentoRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tb_medicamentoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tb_ent_secretariaRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As tb_ent_secretariaRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tb_ent_secretariaRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tb_ent_secretariaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tb_sai_secretariaRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As tb_sai_secretariaRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tb_sai_secretariaRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tb_sai_secretariaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tb_regiaoRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As tb_regiaoRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tb_regiaoRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tb_regiaoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class vw_ENTRADAS_SECRETARIARowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As vw_ENTRADAS_SECRETARIARow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As vw_ENTRADAS_SECRETARIARow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As vw_ENTRADAS_SECRETARIARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class vw_SAIDAS_SECRETARIARowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As vw_SAIDAS_SECRETARIARow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As vw_SAIDAS_SECRETARIARow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As vw_SAIDAS_SECRETARIARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class vw_ENTRADAS_POLICLINICARowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As vw_ENTRADAS_POLICLINICARow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As vw_ENTRADAS_POLICLINICARow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As vw_ENTRADAS_POLICLINICARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tb_sai_policlinicaRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As tb_sai_policlinicaRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tb_sai_policlinicaRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tb_sai_policlinicaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tb_ent_policlinicaRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As tb_ent_policlinicaRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tb_ent_policlinicaRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tb_ent_policlinicaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class vw_SAIDAS_POLICLINICARowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As vw_SAIDAS_POLICLINICARow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As vw_SAIDAS_POLICLINICARow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As vw_SAIDAS_POLICLINICARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dtsBD_SICEPTableAdapters
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class spBD_SICEP
        Inherits System.ComponentModel.Component
        
        Private _commandCollection() As System.Data.IDbCommand
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.IDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.IDbCommand(26) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            CType(Me._commandCollection(0),System.Data.SqlClient.SqlCommand).Connection = New System.Data.SqlClient.SqlConnection(Global.CamadaDeNegocios.My.MySettings.Default.bd_sicepConnectionString)
            CType(Me._commandCollection(0),System.Data.SqlClient.SqlCommand).CommandText = "dbo.sp_INSERE_PACIENTE"
            CType(Me._commandCollection(0),System.Data.SqlClient.SqlCommand).CommandType = System.Data.CommandType.StoredProcedure
            CType(Me._commandCollection(0),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(0),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@nome_paciente", System.Data.SqlDbType.VarChar, 100, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(0),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@end_paciente", System.Data.SqlDbType.VarChar, 100, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(0),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@data_nasc_paciente", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(0),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@sexo_paciente", System.Data.SqlDbType.[Char], 1, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(0),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@tel_paciente", System.Data.SqlDbType.VarChar, 13, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(0),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@nome_mae_paciente", System.Data.SqlDbType.VarChar, 100, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(0),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@CPF_paciente", System.Data.SqlDbType.VarChar, 15, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(0),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RG_paciente", System.Data.SqlDbType.VarChar, 20, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(0),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FKcod_microarea", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 19, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            CType(Me._commandCollection(1),System.Data.SqlClient.SqlCommand).Connection = New System.Data.SqlClient.SqlConnection(Global.CamadaDeNegocios.My.MySettings.Default.bd_sicepConnectionString)
            CType(Me._commandCollection(1),System.Data.SqlClient.SqlCommand).CommandText = "dbo.sp_DELETA_PACIENTE"
            CType(Me._commandCollection(1),System.Data.SqlClient.SqlCommand).CommandType = System.Data.CommandType.StoredProcedure
            CType(Me._commandCollection(1),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(1),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@cod_paciente", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 19, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(1),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@mensagem", System.Data.SqlDbType.VarChar, 100, System.Data.ParameterDirection.Output, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New System.Data.SqlClient.SqlCommand
            CType(Me._commandCollection(2),System.Data.SqlClient.SqlCommand).Connection = New System.Data.SqlClient.SqlConnection(Global.CamadaDeNegocios.My.MySettings.Default.bd_sicepConnectionString)
            CType(Me._commandCollection(2),System.Data.SqlClient.SqlCommand).CommandText = "dbo.sp_ALTERA_PACIENTE"
            CType(Me._commandCollection(2),System.Data.SqlClient.SqlCommand).CommandType = System.Data.CommandType.StoredProcedure
            CType(Me._commandCollection(2),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(2),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@cod_paciente", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 19, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(2),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@nome_paciente", System.Data.SqlDbType.VarChar, 100, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(2),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@end_paciente", System.Data.SqlDbType.VarChar, 100, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(2),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@data_nasc_paciente", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(2),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@sexo_paciente", System.Data.SqlDbType.[Char], 1, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(2),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@tel_paciente", System.Data.SqlDbType.VarChar, 13, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(2),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@nome_mae_paciente", System.Data.SqlDbType.VarChar, 100, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(2),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@CPF_paciente", System.Data.SqlDbType.VarChar, 15, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(2),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RG_paciente", System.Data.SqlDbType.VarChar, 20, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(2),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FKcod_microarea", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 19, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New System.Data.SqlClient.SqlCommand
            CType(Me._commandCollection(3),System.Data.SqlClient.SqlCommand).Connection = New System.Data.SqlClient.SqlConnection(Global.CamadaDeNegocios.My.MySettings.Default.bd_sicepConnectionString)
            CType(Me._commandCollection(3),System.Data.SqlClient.SqlCommand).CommandText = "dbo.sp_INSERE_USUARIO"
            CType(Me._commandCollection(3),System.Data.SqlClient.SqlCommand).CommandType = System.Data.CommandType.StoredProcedure
            CType(Me._commandCollection(3),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(3),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@nome_usuario", System.Data.SqlDbType.VarChar, 100, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(3),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@cargo_usuario", System.Data.SqlDbType.VarChar, 100, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(3),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@end_usuario", System.Data.SqlDbType.VarChar, 100, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(3),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@tel_res_usuario", System.Data.SqlDbType.VarChar, 13, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(3),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@tel_cel_usuario", System.Data.SqlDbType.VarChar, 13, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(3),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@email_usuario", System.Data.SqlDbType.VarChar, 100, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(3),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@CPF_usuario", System.Data.SqlDbType.VarChar, 15, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(3),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RG_usuario", System.Data.SqlDbType.VarChar, 20, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(3),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@login_usuario", System.Data.SqlDbType.VarChar, 20, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(3),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@senha_usuario", System.Data.SqlDbType.VarChar, 20, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(3),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FKcod_perfil", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 19, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New System.Data.SqlClient.SqlCommand
            CType(Me._commandCollection(4),System.Data.SqlClient.SqlCommand).Connection = New System.Data.SqlClient.SqlConnection(Global.CamadaDeNegocios.My.MySettings.Default.bd_sicepConnectionString)
            CType(Me._commandCollection(4),System.Data.SqlClient.SqlCommand).CommandText = "dbo.sp_ALTERA_USUARIO"
            CType(Me._commandCollection(4),System.Data.SqlClient.SqlCommand).CommandType = System.Data.CommandType.StoredProcedure
            CType(Me._commandCollection(4),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(4),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@cod_usuario", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 19, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(4),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@nome_usuario", System.Data.SqlDbType.VarChar, 100, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(4),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@cargo_usuario", System.Data.SqlDbType.VarChar, 100, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(4),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@end_usuario", System.Data.SqlDbType.VarChar, 100, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(4),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@tel_res_usuario", System.Data.SqlDbType.VarChar, 13, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(4),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@tel_cel_usuario", System.Data.SqlDbType.VarChar, 13, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(4),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@email_usuario", System.Data.SqlDbType.VarChar, 13, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(4),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@CPF_usuario", System.Data.SqlDbType.VarChar, 15, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(4),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RG_usuario", System.Data.SqlDbType.VarChar, 20, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(4),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@login_usuario", System.Data.SqlDbType.VarChar, 1000, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(4),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@senha_usuario", System.Data.SqlDbType.VarChar, 1000, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(4),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FKcod_perfil", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 19, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5) = New System.Data.SqlClient.SqlCommand
            CType(Me._commandCollection(5),System.Data.SqlClient.SqlCommand).Connection = New System.Data.SqlClient.SqlConnection(Global.CamadaDeNegocios.My.MySettings.Default.bd_sicepConnectionString)
            CType(Me._commandCollection(5),System.Data.SqlClient.SqlCommand).CommandText = "dbo.sp_DELETA_USUARIO"
            CType(Me._commandCollection(5),System.Data.SqlClient.SqlCommand).CommandType = System.Data.CommandType.StoredProcedure
            CType(Me._commandCollection(5),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(5),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@cod_usuario", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 19, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(5),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@mensagem", System.Data.SqlDbType.VarChar, 150, System.Data.ParameterDirection.InputOutput, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6) = New System.Data.SqlClient.SqlCommand
            CType(Me._commandCollection(6),System.Data.SqlClient.SqlCommand).Connection = New System.Data.SqlClient.SqlConnection(Global.CamadaDeNegocios.My.MySettings.Default.bd_sicepConnectionString)
            CType(Me._commandCollection(6),System.Data.SqlClient.SqlCommand).CommandText = "dbo.sp_INSERE_MICROAREA"
            CType(Me._commandCollection(6),System.Data.SqlClient.SqlCommand).CommandType = System.Data.CommandType.StoredProcedure
            CType(Me._commandCollection(6),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(6),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@agente", System.Data.SqlDbType.VarChar, 100, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(6),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@obs", System.Data.SqlDbType.VarChar, 2000, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(7) = New System.Data.SqlClient.SqlCommand
            CType(Me._commandCollection(7),System.Data.SqlClient.SqlCommand).Connection = New System.Data.SqlClient.SqlConnection(Global.CamadaDeNegocios.My.MySettings.Default.bd_sicepConnectionString)
            CType(Me._commandCollection(7),System.Data.SqlClient.SqlCommand).CommandText = "dbo.sp_ALTERA_MICROAREA"
            CType(Me._commandCollection(7),System.Data.SqlClient.SqlCommand).CommandType = System.Data.CommandType.StoredProcedure
            CType(Me._commandCollection(7),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(7),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@cod_microarea", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 19, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(7),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@agente_microarea", System.Data.SqlDbType.VarChar, 100, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(7),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@obs_microarea", System.Data.SqlDbType.VarChar, 2000, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(8) = New System.Data.SqlClient.SqlCommand
            CType(Me._commandCollection(8),System.Data.SqlClient.SqlCommand).Connection = New System.Data.SqlClient.SqlConnection(Global.CamadaDeNegocios.My.MySettings.Default.bd_sicepConnectionString)
            CType(Me._commandCollection(8),System.Data.SqlClient.SqlCommand).CommandText = "dbo.sp_DELETA_MICROAREA"
            CType(Me._commandCollection(8),System.Data.SqlClient.SqlCommand).CommandType = System.Data.CommandType.StoredProcedure
            CType(Me._commandCollection(8),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(8),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@cod_microarea", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 19, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(8),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@mensagem", System.Data.SqlDbType.VarChar, 150, System.Data.ParameterDirection.InputOutput, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(9) = New System.Data.SqlClient.SqlCommand
            CType(Me._commandCollection(9),System.Data.SqlClient.SqlCommand).Connection = New System.Data.SqlClient.SqlConnection(Global.CamadaDeNegocios.My.MySettings.Default.bd_sicepConnectionString)
            CType(Me._commandCollection(9),System.Data.SqlClient.SqlCommand).CommandText = "dbo.sp_INSERE_MEDICAMENTO"
            CType(Me._commandCollection(9),System.Data.SqlClient.SqlCommand).CommandType = System.Data.CommandType.StoredProcedure
            CType(Me._commandCollection(9),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(9),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@nome_medicamento", System.Data.SqlDbType.VarChar, 100, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(9),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@composicao_medicamento", System.Data.SqlDbType.VarChar, 100, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(9),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@info_medicamento", System.Data.SqlDbType.VarChar, 2000, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(10) = New System.Data.SqlClient.SqlCommand
            CType(Me._commandCollection(10),System.Data.SqlClient.SqlCommand).Connection = New System.Data.SqlClient.SqlConnection(Global.CamadaDeNegocios.My.MySettings.Default.bd_sicepConnectionString)
            CType(Me._commandCollection(10),System.Data.SqlClient.SqlCommand).CommandText = "dbo.sp_ALTERA_MEDICAMENTO"
            CType(Me._commandCollection(10),System.Data.SqlClient.SqlCommand).CommandType = System.Data.CommandType.StoredProcedure
            CType(Me._commandCollection(10),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(10),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@cod_medicamento", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 19, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(10),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@nome_medicamento", System.Data.SqlDbType.VarChar, 100, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(10),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@composicao_medicamento", System.Data.SqlDbType.VarChar, 100, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(10),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@info_medicamento", System.Data.SqlDbType.VarChar, 2000, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(11) = New System.Data.SqlClient.SqlCommand
            CType(Me._commandCollection(11),System.Data.SqlClient.SqlCommand).Connection = New System.Data.SqlClient.SqlConnection(Global.CamadaDeNegocios.My.MySettings.Default.bd_sicepConnectionString)
            CType(Me._commandCollection(11),System.Data.SqlClient.SqlCommand).CommandText = "dbo.sp_DELETA_MEDICAMENTO"
            CType(Me._commandCollection(11),System.Data.SqlClient.SqlCommand).CommandType = System.Data.CommandType.StoredProcedure
            CType(Me._commandCollection(11),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(11),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@cod_medicamento", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 19, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(11),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@mensagem", System.Data.SqlDbType.VarChar, 150, System.Data.ParameterDirection.InputOutput, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(12) = New System.Data.SqlClient.SqlCommand
            CType(Me._commandCollection(12),System.Data.SqlClient.SqlCommand).Connection = New System.Data.SqlClient.SqlConnection(Global.CamadaDeNegocios.My.MySettings.Default.bd_sicepConnectionString)
            CType(Me._commandCollection(12),System.Data.SqlClient.SqlCommand).CommandText = "dbo.sp_INSERE_ENT_SEC"
            CType(Me._commandCollection(12),System.Data.SqlClient.SqlCommand).CommandType = System.Data.CommandType.StoredProcedure
            CType(Me._commandCollection(12),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(12),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@lote_ent_sec", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(12),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@nota_ent_sec", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(12),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FKcod_medicamento", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 19, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(12),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@validade_ent_sec", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(12),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@quantidade_ent_sec", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 19, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(12),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FKcod_usuario", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 19, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(13) = New System.Data.SqlClient.SqlCommand
            CType(Me._commandCollection(13),System.Data.SqlClient.SqlCommand).Connection = New System.Data.SqlClient.SqlConnection(Global.CamadaDeNegocios.My.MySettings.Default.bd_sicepConnectionString)
            CType(Me._commandCollection(13),System.Data.SqlClient.SqlCommand).CommandText = "dbo.sp_QUANT_EST_SEC"
            CType(Me._commandCollection(13),System.Data.SqlClient.SqlCommand).CommandType = System.Data.CommandType.StoredProcedure
            CType(Me._commandCollection(13),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(13),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@medicamento", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 19, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(13),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@validade", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(13),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@quantidade", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.InputOutput, 19, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(14) = New System.Data.SqlClient.SqlCommand
            CType(Me._commandCollection(14),System.Data.SqlClient.SqlCommand).Connection = New System.Data.SqlClient.SqlConnection(Global.CamadaDeNegocios.My.MySettings.Default.bd_sicepConnectionString)
            CType(Me._commandCollection(14),System.Data.SqlClient.SqlCommand).CommandText = "dbo.sp_ALTERA_ENTRADA_SECRETARIA"
            CType(Me._commandCollection(14),System.Data.SqlClient.SqlCommand).CommandType = System.Data.CommandType.StoredProcedure
            CType(Me._commandCollection(14),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(14),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@cod_ent_sec", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 19, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(14),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FKcod_medicamento", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 19, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(14),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@validade_ent_sec", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(14),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@quantidade_ent_sec", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 19, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(14),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@mensagem", System.Data.SqlDbType.VarChar, 300, System.Data.ParameterDirection.InputOutput, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(15) = New System.Data.SqlClient.SqlCommand
            CType(Me._commandCollection(15),System.Data.SqlClient.SqlCommand).Connection = New System.Data.SqlClient.SqlConnection(Global.CamadaDeNegocios.My.MySettings.Default.bd_sicepConnectionString)
            CType(Me._commandCollection(15),System.Data.SqlClient.SqlCommand).CommandText = "dbo.sp_DELETA_ENTRADA_SECRETARIA"
            CType(Me._commandCollection(15),System.Data.SqlClient.SqlCommand).CommandType = System.Data.CommandType.StoredProcedure
            CType(Me._commandCollection(15),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(15),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@cod_ent_sec", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 19, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(15),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FKcod_medicamento", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 19, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(15),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@validade_ent_sec", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(15),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@mensagem", System.Data.SqlDbType.VarChar, 300, System.Data.ParameterDirection.InputOutput, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(16) = New System.Data.SqlClient.SqlCommand
            CType(Me._commandCollection(16),System.Data.SqlClient.SqlCommand).Connection = New System.Data.SqlClient.SqlConnection(Global.CamadaDeNegocios.My.MySettings.Default.bd_sicepConnectionString)
            CType(Me._commandCollection(16),System.Data.SqlClient.SqlCommand).CommandText = "dbo.sp_INSERE_SAI_SEC"
            CType(Me._commandCollection(16),System.Data.SqlClient.SqlCommand).CommandType = System.Data.CommandType.StoredProcedure
            CType(Me._commandCollection(16),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(16),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FKcod_medicamento", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 19, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(16),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@validade_sai_sec", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(16),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@quantidade_sai_sec", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 19, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(16),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FKcod_usuario", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 19, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(16),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FKcod_regiao", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 19, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(16),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@mensagem", System.Data.SqlDbType.VarChar, 300, System.Data.ParameterDirection.InputOutput, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(17) = New System.Data.SqlClient.SqlCommand
            CType(Me._commandCollection(17),System.Data.SqlClient.SqlCommand).Connection = New System.Data.SqlClient.SqlConnection(Global.CamadaDeNegocios.My.MySettings.Default.bd_sicepConnectionString)
            CType(Me._commandCollection(17),System.Data.SqlClient.SqlCommand).CommandText = "dbo.sp_ALTERA_SAIDA_SECRETARIA"
            CType(Me._commandCollection(17),System.Data.SqlClient.SqlCommand).CommandType = System.Data.CommandType.StoredProcedure
            CType(Me._commandCollection(17),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(17),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@cod_sai_sec", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 19, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(17),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FKcod_medicamento", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 19, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(17),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@validade_sai_sec", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(17),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@quantidade_sai_sec", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 19, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(17),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@mensagem", System.Data.SqlDbType.VarChar, 300, System.Data.ParameterDirection.InputOutput, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(18) = New System.Data.SqlClient.SqlCommand
            CType(Me._commandCollection(18),System.Data.SqlClient.SqlCommand).Connection = New System.Data.SqlClient.SqlConnection(Global.CamadaDeNegocios.My.MySettings.Default.bd_sicepConnectionString)
            CType(Me._commandCollection(18),System.Data.SqlClient.SqlCommand).CommandText = "dbo.sp_DELETA_SAIDA_SECRETARIA"
            CType(Me._commandCollection(18),System.Data.SqlClient.SqlCommand).CommandType = System.Data.CommandType.StoredProcedure
            CType(Me._commandCollection(18),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(18),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@cod_sai_sec", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 19, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(18),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@mensagem", System.Data.SqlDbType.VarChar, 300, System.Data.ParameterDirection.InputOutput, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(19) = New System.Data.SqlClient.SqlCommand
            CType(Me._commandCollection(19),System.Data.SqlClient.SqlCommand).Connection = New System.Data.SqlClient.SqlConnection(Global.CamadaDeNegocios.My.MySettings.Default.bd_sicepConnectionString)
            CType(Me._commandCollection(19),System.Data.SqlClient.SqlCommand).CommandText = "dbo.sp_INSERE_ENT_POLI"
            CType(Me._commandCollection(19),System.Data.SqlClient.SqlCommand).CommandType = System.Data.CommandType.StoredProcedure
            CType(Me._commandCollection(19),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(19),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FKcod_medicamento", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 19, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(19),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@validade_ent_poli", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(19),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@quantidade_ent_poli", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 19, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(19),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FKcod_usuario", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 19, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(20) = New System.Data.SqlClient.SqlCommand
            CType(Me._commandCollection(20),System.Data.SqlClient.SqlCommand).Connection = New System.Data.SqlClient.SqlConnection(Global.CamadaDeNegocios.My.MySettings.Default.bd_sicepConnectionString)
            CType(Me._commandCollection(20),System.Data.SqlClient.SqlCommand).CommandText = "dbo.sp_QUANT_EST_POLI"
            CType(Me._commandCollection(20),System.Data.SqlClient.SqlCommand).CommandType = System.Data.CommandType.StoredProcedure
            CType(Me._commandCollection(20),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(20),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@medicamento", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 19, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(20),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@validade", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(20),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@quantidade", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.InputOutput, 19, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(21) = New System.Data.SqlClient.SqlCommand
            CType(Me._commandCollection(21),System.Data.SqlClient.SqlCommand).Connection = New System.Data.SqlClient.SqlConnection(Global.CamadaDeNegocios.My.MySettings.Default.bd_sicepConnectionString)
            CType(Me._commandCollection(21),System.Data.SqlClient.SqlCommand).CommandText = "dbo.sp_ALTERA_ENTRADA_POLICLINICA"
            CType(Me._commandCollection(21),System.Data.SqlClient.SqlCommand).CommandType = System.Data.CommandType.StoredProcedure
            CType(Me._commandCollection(21),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(21),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@cod_ent_poli", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 19, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(21),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FKcod_medicamento", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 19, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(21),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@validade_ent_poli", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(21),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@quantidade_ent_poli", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 19, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(21),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@mensagem", System.Data.SqlDbType.VarChar, 300, System.Data.ParameterDirection.InputOutput, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(22) = New System.Data.SqlClient.SqlCommand
            CType(Me._commandCollection(22),System.Data.SqlClient.SqlCommand).Connection = New System.Data.SqlClient.SqlConnection(Global.CamadaDeNegocios.My.MySettings.Default.bd_sicepConnectionString)
            CType(Me._commandCollection(22),System.Data.SqlClient.SqlCommand).CommandText = "dbo.sp_DELETA_ENTRADA_POLICLINICA"
            CType(Me._commandCollection(22),System.Data.SqlClient.SqlCommand).CommandType = System.Data.CommandType.StoredProcedure
            CType(Me._commandCollection(22),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(22),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@cod_ent_poli", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 19, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(22),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FKcod_medicamento", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 19, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(22),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@validade_ent_poli", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(22),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@mensagem", System.Data.SqlDbType.VarChar, 300, System.Data.ParameterDirection.InputOutput, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(23) = New System.Data.SqlClient.SqlCommand
            CType(Me._commandCollection(23),System.Data.SqlClient.SqlCommand).Connection = New System.Data.SqlClient.SqlConnection(Global.CamadaDeNegocios.My.MySettings.Default.bd_sicepConnectionString)
            CType(Me._commandCollection(23),System.Data.SqlClient.SqlCommand).CommandText = "dbo.sp_INSERE_SAI_POLI"
            CType(Me._commandCollection(23),System.Data.SqlClient.SqlCommand).CommandType = System.Data.CommandType.StoredProcedure
            CType(Me._commandCollection(23),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(23),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FKcod_medicamento", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 19, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(23),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@validade_sai_poli", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(23),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@quantidade_sai_poli", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 19, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(23),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FKcod_usuario", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 19, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(23),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FKcod_paciente", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 19, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(23),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@mensagem", System.Data.SqlDbType.VarChar, 300, System.Data.ParameterDirection.InputOutput, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(24) = New System.Data.SqlClient.SqlCommand
            CType(Me._commandCollection(24),System.Data.SqlClient.SqlCommand).Connection = New System.Data.SqlClient.SqlConnection(Global.CamadaDeNegocios.My.MySettings.Default.bd_sicepConnectionString)
            CType(Me._commandCollection(24),System.Data.SqlClient.SqlCommand).CommandText = "dbo.sp_ALTERA_SAIDA_POLICLINICA"
            CType(Me._commandCollection(24),System.Data.SqlClient.SqlCommand).CommandType = System.Data.CommandType.StoredProcedure
            CType(Me._commandCollection(24),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(24),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@cod_sai_poli", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 19, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(24),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FKcod_medicamento", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 19, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(24),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@validade_sai_poli", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(24),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@quantidade_sai_poli", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 19, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(24),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@mensagem", System.Data.SqlDbType.VarChar, 300, System.Data.ParameterDirection.InputOutput, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(25) = New System.Data.SqlClient.SqlCommand
            CType(Me._commandCollection(25),System.Data.SqlClient.SqlCommand).Connection = New System.Data.SqlClient.SqlConnection(Global.CamadaDeNegocios.My.MySettings.Default.bd_sicepConnectionString)
            CType(Me._commandCollection(25),System.Data.SqlClient.SqlCommand).CommandText = "dbo.sp_DELETA_SAIDA_POLICLINICA"
            CType(Me._commandCollection(25),System.Data.SqlClient.SqlCommand).CommandType = System.Data.CommandType.StoredProcedure
            CType(Me._commandCollection(25),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(25),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@cod_sai_poli", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 19, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(25),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@mensagem", System.Data.SqlDbType.VarChar, 300, System.Data.ParameterDirection.InputOutput, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(26) = New System.Data.SqlClient.SqlCommand
            CType(Me._commandCollection(26),System.Data.SqlClient.SqlCommand).Connection = New System.Data.SqlClient.SqlConnection(Global.CamadaDeNegocios.My.MySettings.Default.bd_sicepConnectionString)
            CType(Me._commandCollection(26),System.Data.SqlClient.SqlCommand).CommandText = "dbo.sp_INSERE_MATERIAL"
            CType(Me._commandCollection(26),System.Data.SqlClient.SqlCommand).CommandType = System.Data.CommandType.StoredProcedure
            CType(Me._commandCollection(26),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(26),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@nome_medicamento", System.Data.SqlDbType.VarChar, 100, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(26),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@composicao_medicamento", System.Data.SqlDbType.VarChar, 100, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(26),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@info_medicamento", System.Data.SqlDbType.VarChar, 2000, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function sp_INSERE_PACIENTE(ByVal nome_paciente As String, ByVal end_paciente As String, ByVal data_nasc_paciente As String, ByVal sexo_paciente As String, ByVal tel_paciente As String, ByVal nome_mae_paciente As String, ByVal CPF_paciente As String, ByVal RG_paciente As String, ByVal FKcod_microarea As System.Nullable(Of Long)) As Integer
            Dim command As System.Data.SqlClient.SqlCommand = CType(Me.CommandCollection(0),System.Data.SqlClient.SqlCommand)
            If (nome_paciente Is Nothing) Then
                command.Parameters(1).Value = System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(nome_paciente,String)
            End If
            If (end_paciente Is Nothing) Then
                command.Parameters(2).Value = System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(end_paciente,String)
            End If
            If (data_nasc_paciente Is Nothing) Then
                command.Parameters(3).Value = System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(data_nasc_paciente,String)
            End If
            If (sexo_paciente Is Nothing) Then
                command.Parameters(4).Value = System.DBNull.Value
            Else
                command.Parameters(4).Value = CType(sexo_paciente,String)
            End If
            If (tel_paciente Is Nothing) Then
                command.Parameters(5).Value = System.DBNull.Value
            Else
                command.Parameters(5).Value = CType(tel_paciente,String)
            End If
            If (nome_mae_paciente Is Nothing) Then
                command.Parameters(6).Value = System.DBNull.Value
            Else
                command.Parameters(6).Value = CType(nome_mae_paciente,String)
            End If
            If (CPF_paciente Is Nothing) Then
                command.Parameters(7).Value = System.DBNull.Value
            Else
                command.Parameters(7).Value = CType(CPF_paciente,String)
            End If
            If (RG_paciente Is Nothing) Then
                command.Parameters(8).Value = System.DBNull.Value
            Else
                command.Parameters(8).Value = CType(RG_paciente,String)
            End If
            If (FKcod_microarea.HasValue = true) Then
                command.Parameters(9).Value = CType(FKcod_microarea.Value,Long)
            Else
                command.Parameters(9).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function sp_DELETA_PACIENTE(ByVal cod_paciente As System.Nullable(Of Long), ByRef mensagem As String) As Integer
            Dim command As System.Data.SqlClient.SqlCommand = CType(Me.CommandCollection(1),System.Data.SqlClient.SqlCommand)
            If (cod_paciente.HasValue = true) Then
                command.Parameters(1).Value = CType(cod_paciente.Value,Long)
            Else
                command.Parameters(1).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((command.Parameters(2).Value Is Nothing)  _
                        OrElse (command.Parameters(2).Value.GetType Is GetType(System.DBNull))) Then
                mensagem = Nothing
            Else
                mensagem = CType(command.Parameters(2).Value,String)
            End If
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function sp_ALTERA_PACIENTE(ByVal cod_paciente As System.Nullable(Of Long), ByVal nome_paciente As String, ByVal end_paciente As String, ByVal data_nasc_paciente As String, ByVal sexo_paciente As String, ByVal tel_paciente As String, ByVal nome_mae_paciente As String, ByVal CPF_paciente As String, ByVal RG_paciente As String, ByVal FKcod_microarea As System.Nullable(Of Long)) As Integer
            Dim command As System.Data.SqlClient.SqlCommand = CType(Me.CommandCollection(2),System.Data.SqlClient.SqlCommand)
            If (cod_paciente.HasValue = true) Then
                command.Parameters(1).Value = CType(cod_paciente.Value,Long)
            Else
                command.Parameters(1).Value = System.DBNull.Value
            End If
            If (nome_paciente Is Nothing) Then
                command.Parameters(2).Value = System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(nome_paciente,String)
            End If
            If (end_paciente Is Nothing) Then
                command.Parameters(3).Value = System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(end_paciente,String)
            End If
            If (data_nasc_paciente Is Nothing) Then
                command.Parameters(4).Value = System.DBNull.Value
            Else
                command.Parameters(4).Value = CType(data_nasc_paciente,String)
            End If
            If (sexo_paciente Is Nothing) Then
                command.Parameters(5).Value = System.DBNull.Value
            Else
                command.Parameters(5).Value = CType(sexo_paciente,String)
            End If
            If (tel_paciente Is Nothing) Then
                command.Parameters(6).Value = System.DBNull.Value
            Else
                command.Parameters(6).Value = CType(tel_paciente,String)
            End If
            If (nome_mae_paciente Is Nothing) Then
                command.Parameters(7).Value = System.DBNull.Value
            Else
                command.Parameters(7).Value = CType(nome_mae_paciente,String)
            End If
            If (CPF_paciente Is Nothing) Then
                command.Parameters(8).Value = System.DBNull.Value
            Else
                command.Parameters(8).Value = CType(CPF_paciente,String)
            End If
            If (RG_paciente Is Nothing) Then
                command.Parameters(9).Value = System.DBNull.Value
            Else
                command.Parameters(9).Value = CType(RG_paciente,String)
            End If
            If (FKcod_microarea.HasValue = true) Then
                command.Parameters(10).Value = CType(FKcod_microarea.Value,Long)
            Else
                command.Parameters(10).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function sp_INSERE_USUARIO(ByVal nome_usuario As String, ByVal cargo_usuario As String, ByVal end_usuario As String, ByVal tel_res_usuario As String, ByVal tel_cel_usuario As String, ByVal email_usuario As String, ByVal CPF_usuario As String, ByVal RG_usuario As String, ByVal login_usuario As String, ByVal senha_usuario As String, ByVal FKcod_perfil As System.Nullable(Of Long)) As Integer
            Dim command As System.Data.SqlClient.SqlCommand = CType(Me.CommandCollection(3),System.Data.SqlClient.SqlCommand)
            If (nome_usuario Is Nothing) Then
                command.Parameters(1).Value = System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(nome_usuario,String)
            End If
            If (cargo_usuario Is Nothing) Then
                command.Parameters(2).Value = System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(cargo_usuario,String)
            End If
            If (end_usuario Is Nothing) Then
                command.Parameters(3).Value = System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(end_usuario,String)
            End If
            If (tel_res_usuario Is Nothing) Then
                command.Parameters(4).Value = System.DBNull.Value
            Else
                command.Parameters(4).Value = CType(tel_res_usuario,String)
            End If
            If (tel_cel_usuario Is Nothing) Then
                command.Parameters(5).Value = System.DBNull.Value
            Else
                command.Parameters(5).Value = CType(tel_cel_usuario,String)
            End If
            If (email_usuario Is Nothing) Then
                command.Parameters(6).Value = System.DBNull.Value
            Else
                command.Parameters(6).Value = CType(email_usuario,String)
            End If
            If (CPF_usuario Is Nothing) Then
                command.Parameters(7).Value = System.DBNull.Value
            Else
                command.Parameters(7).Value = CType(CPF_usuario,String)
            End If
            If (RG_usuario Is Nothing) Then
                command.Parameters(8).Value = System.DBNull.Value
            Else
                command.Parameters(8).Value = CType(RG_usuario,String)
            End If
            If (login_usuario Is Nothing) Then
                command.Parameters(9).Value = System.DBNull.Value
            Else
                command.Parameters(9).Value = CType(login_usuario,String)
            End If
            If (senha_usuario Is Nothing) Then
                command.Parameters(10).Value = System.DBNull.Value
            Else
                command.Parameters(10).Value = CType(senha_usuario,String)
            End If
            If (FKcod_perfil.HasValue = true) Then
                command.Parameters(11).Value = CType(FKcod_perfil.Value,Long)
            Else
                command.Parameters(11).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function sp_ALTERA_USUARIO(ByVal cod_usuario As System.Nullable(Of Long), ByVal nome_usuario As String, ByVal cargo_usuario As String, ByVal end_usuario As String, ByVal tel_res_usuario As String, ByVal tel_cel_usuario As String, ByVal email_usuario As String, ByVal CPF_usuario As String, ByVal RG_usuario As String, ByVal login_usuario As String, ByVal senha_usuario As String, ByVal FKcod_perfil As System.Nullable(Of Long)) As Integer
            Dim command As System.Data.SqlClient.SqlCommand = CType(Me.CommandCollection(4),System.Data.SqlClient.SqlCommand)
            If (cod_usuario.HasValue = true) Then
                command.Parameters(1).Value = CType(cod_usuario.Value,Long)
            Else
                command.Parameters(1).Value = System.DBNull.Value
            End If
            If (nome_usuario Is Nothing) Then
                command.Parameters(2).Value = System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(nome_usuario,String)
            End If
            If (cargo_usuario Is Nothing) Then
                command.Parameters(3).Value = System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(cargo_usuario,String)
            End If
            If (end_usuario Is Nothing) Then
                command.Parameters(4).Value = System.DBNull.Value
            Else
                command.Parameters(4).Value = CType(end_usuario,String)
            End If
            If (tel_res_usuario Is Nothing) Then
                command.Parameters(5).Value = System.DBNull.Value
            Else
                command.Parameters(5).Value = CType(tel_res_usuario,String)
            End If
            If (tel_cel_usuario Is Nothing) Then
                command.Parameters(6).Value = System.DBNull.Value
            Else
                command.Parameters(6).Value = CType(tel_cel_usuario,String)
            End If
            If (email_usuario Is Nothing) Then
                command.Parameters(7).Value = System.DBNull.Value
            Else
                command.Parameters(7).Value = CType(email_usuario,String)
            End If
            If (CPF_usuario Is Nothing) Then
                command.Parameters(8).Value = System.DBNull.Value
            Else
                command.Parameters(8).Value = CType(CPF_usuario,String)
            End If
            If (RG_usuario Is Nothing) Then
                command.Parameters(9).Value = System.DBNull.Value
            Else
                command.Parameters(9).Value = CType(RG_usuario,String)
            End If
            If (login_usuario Is Nothing) Then
                command.Parameters(10).Value = System.DBNull.Value
            Else
                command.Parameters(10).Value = CType(login_usuario,String)
            End If
            If (senha_usuario Is Nothing) Then
                command.Parameters(11).Value = System.DBNull.Value
            Else
                command.Parameters(11).Value = CType(senha_usuario,String)
            End If
            If (FKcod_perfil.HasValue = true) Then
                command.Parameters(12).Value = CType(FKcod_perfil.Value,Long)
            Else
                command.Parameters(12).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function sp_DELETA_USUARIO(ByVal cod_usuario As System.Nullable(Of Long), ByRef mensagem As String) As Integer
            Dim command As System.Data.SqlClient.SqlCommand = CType(Me.CommandCollection(5),System.Data.SqlClient.SqlCommand)
            If (cod_usuario.HasValue = true) Then
                command.Parameters(1).Value = CType(cod_usuario.Value,Long)
            Else
                command.Parameters(1).Value = System.DBNull.Value
            End If
            If (mensagem Is Nothing) Then
                command.Parameters(2).Value = System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(mensagem,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((command.Parameters(2).Value Is Nothing)  _
                        OrElse (command.Parameters(2).Value.GetType Is GetType(System.DBNull))) Then
                mensagem = Nothing
            Else
                mensagem = CType(command.Parameters(2).Value,String)
            End If
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function sp_INSERE_MICROAREA(ByVal agente As String, ByVal obs As String) As Integer
            Dim command As System.Data.SqlClient.SqlCommand = CType(Me.CommandCollection(6),System.Data.SqlClient.SqlCommand)
            If (agente Is Nothing) Then
                command.Parameters(1).Value = System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(agente,String)
            End If
            If (obs Is Nothing) Then
                command.Parameters(2).Value = System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(obs,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function sp_ALTERA_MICROAREA(ByVal cod_microarea As System.Nullable(Of Long), ByVal agente_microarea As String, ByVal obs_microarea As String) As Integer
            Dim command As System.Data.SqlClient.SqlCommand = CType(Me.CommandCollection(7),System.Data.SqlClient.SqlCommand)
            If (cod_microarea.HasValue = true) Then
                command.Parameters(1).Value = CType(cod_microarea.Value,Long)
            Else
                command.Parameters(1).Value = System.DBNull.Value
            End If
            If (agente_microarea Is Nothing) Then
                command.Parameters(2).Value = System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(agente_microarea,String)
            End If
            If (obs_microarea Is Nothing) Then
                command.Parameters(3).Value = System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(obs_microarea,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function sp_DELETA_MICROAREA(ByVal cod_microarea As System.Nullable(Of Long), ByRef mensagem As String) As Integer
            Dim command As System.Data.SqlClient.SqlCommand = CType(Me.CommandCollection(8),System.Data.SqlClient.SqlCommand)
            If (cod_microarea.HasValue = true) Then
                command.Parameters(1).Value = CType(cod_microarea.Value,Long)
            Else
                command.Parameters(1).Value = System.DBNull.Value
            End If
            If (mensagem Is Nothing) Then
                command.Parameters(2).Value = System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(mensagem,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((command.Parameters(2).Value Is Nothing)  _
                        OrElse (command.Parameters(2).Value.GetType Is GetType(System.DBNull))) Then
                mensagem = Nothing
            Else
                mensagem = CType(command.Parameters(2).Value,String)
            End If
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function sp_INSERE_MEDICAMENTO(ByVal nome_medicamento As String, ByVal composicao_medicamento As String, ByVal info_medicamento As String) As Integer
            Dim command As System.Data.SqlClient.SqlCommand = CType(Me.CommandCollection(9),System.Data.SqlClient.SqlCommand)
            If (nome_medicamento Is Nothing) Then
                command.Parameters(1).Value = System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(nome_medicamento,String)
            End If
            If (composicao_medicamento Is Nothing) Then
                command.Parameters(2).Value = System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(composicao_medicamento,String)
            End If
            If (info_medicamento Is Nothing) Then
                command.Parameters(3).Value = System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(info_medicamento,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function sp_ALTERA_MEDICAMENTO(ByVal cod_medicamento As System.Nullable(Of Long), ByVal nome_medicamento As String, ByVal composicao_medicamento As String, ByVal info_medicamento As String) As Integer
            Dim command As System.Data.SqlClient.SqlCommand = CType(Me.CommandCollection(10),System.Data.SqlClient.SqlCommand)
            If (cod_medicamento.HasValue = true) Then
                command.Parameters(1).Value = CType(cod_medicamento.Value,Long)
            Else
                command.Parameters(1).Value = System.DBNull.Value
            End If
            If (nome_medicamento Is Nothing) Then
                command.Parameters(2).Value = System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(nome_medicamento,String)
            End If
            If (composicao_medicamento Is Nothing) Then
                command.Parameters(3).Value = System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(composicao_medicamento,String)
            End If
            If (info_medicamento Is Nothing) Then
                command.Parameters(4).Value = System.DBNull.Value
            Else
                command.Parameters(4).Value = CType(info_medicamento,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function sp_DELETA_MEDICAMENTO(ByVal cod_medicamento As System.Nullable(Of Long), ByRef mensagem As String) As Integer
            Dim command As System.Data.SqlClient.SqlCommand = CType(Me.CommandCollection(11),System.Data.SqlClient.SqlCommand)
            If (cod_medicamento.HasValue = true) Then
                command.Parameters(1).Value = CType(cod_medicamento.Value,Long)
            Else
                command.Parameters(1).Value = System.DBNull.Value
            End If
            If (mensagem Is Nothing) Then
                command.Parameters(2).Value = System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(mensagem,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((command.Parameters(2).Value Is Nothing)  _
                        OrElse (command.Parameters(2).Value.GetType Is GetType(System.DBNull))) Then
                mensagem = Nothing
            Else
                mensagem = CType(command.Parameters(2).Value,String)
            End If
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function sp_INSERE_ENT_SEC(ByVal lote_ent_sec As String, ByVal nota_ent_sec As String, ByVal FKcod_medicamento As System.Nullable(Of Long), ByVal validade_ent_sec As String, ByVal quantidade_ent_sec As System.Nullable(Of Long), ByVal FKcod_usuario As System.Nullable(Of Long)) As Integer
            Dim command As System.Data.SqlClient.SqlCommand = CType(Me.CommandCollection(12),System.Data.SqlClient.SqlCommand)
            If (lote_ent_sec Is Nothing) Then
                command.Parameters(1).Value = System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(lote_ent_sec,String)
            End If
            If (nota_ent_sec Is Nothing) Then
                command.Parameters(2).Value = System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(nota_ent_sec,String)
            End If
            If (FKcod_medicamento.HasValue = true) Then
                command.Parameters(3).Value = CType(FKcod_medicamento.Value,Long)
            Else
                command.Parameters(3).Value = System.DBNull.Value
            End If
            If (validade_ent_sec Is Nothing) Then
                command.Parameters(4).Value = System.DBNull.Value
            Else
                command.Parameters(4).Value = CType(validade_ent_sec,String)
            End If
            If (quantidade_ent_sec.HasValue = true) Then
                command.Parameters(5).Value = CType(quantidade_ent_sec.Value,Long)
            Else
                command.Parameters(5).Value = System.DBNull.Value
            End If
            If (FKcod_usuario.HasValue = true) Then
                command.Parameters(6).Value = CType(FKcod_usuario.Value,Long)
            Else
                command.Parameters(6).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function sp_QUANT_EST_SEC(ByVal medicamento As System.Nullable(Of Long), ByVal validade As String, ByRef quantidade As System.Nullable(Of Long)) As Integer
            Dim command As System.Data.SqlClient.SqlCommand = CType(Me.CommandCollection(13),System.Data.SqlClient.SqlCommand)
            If (medicamento.HasValue = true) Then
                command.Parameters(1).Value = CType(medicamento.Value,Long)
            Else
                command.Parameters(1).Value = System.DBNull.Value
            End If
            If (validade Is Nothing) Then
                command.Parameters(2).Value = System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(validade,String)
            End If
            If (quantidade.HasValue = true) Then
                command.Parameters(3).Value = CType(quantidade.Value,Long)
            Else
                command.Parameters(3).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((command.Parameters(3).Value Is Nothing)  _
                        OrElse (command.Parameters(3).Value.GetType Is GetType(System.DBNull))) Then
                quantidade = New System.Nullable(Of Long)
            Else
                quantidade = New System.Nullable(Of Long)(CType(command.Parameters(3).Value,Long))
            End If
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function sp_ALTERA_ENTRADA_SECRETARIA(ByVal cod_ent_sec As System.Nullable(Of Long), ByVal FKcod_medicamento As System.Nullable(Of Long), ByVal validade_ent_sec As String, ByVal quantidade_ent_sec As System.Nullable(Of Long), ByRef mensagem As String) As Integer
            Dim command As System.Data.SqlClient.SqlCommand = CType(Me.CommandCollection(14),System.Data.SqlClient.SqlCommand)
            If (cod_ent_sec.HasValue = true) Then
                command.Parameters(1).Value = CType(cod_ent_sec.Value,Long)
            Else
                command.Parameters(1).Value = System.DBNull.Value
            End If
            If (FKcod_medicamento.HasValue = true) Then
                command.Parameters(2).Value = CType(FKcod_medicamento.Value,Long)
            Else
                command.Parameters(2).Value = System.DBNull.Value
            End If
            If (validade_ent_sec Is Nothing) Then
                command.Parameters(3).Value = System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(validade_ent_sec,String)
            End If
            If (quantidade_ent_sec.HasValue = true) Then
                command.Parameters(4).Value = CType(quantidade_ent_sec.Value,Long)
            Else
                command.Parameters(4).Value = System.DBNull.Value
            End If
            If (mensagem Is Nothing) Then
                command.Parameters(5).Value = System.DBNull.Value
            Else
                command.Parameters(5).Value = CType(mensagem,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((command.Parameters(5).Value Is Nothing)  _
                        OrElse (command.Parameters(5).Value.GetType Is GetType(System.DBNull))) Then
                mensagem = Nothing
            Else
                mensagem = CType(command.Parameters(5).Value,String)
            End If
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function sp_DELETA_ENTRADA_SECRETARIA(ByVal cod_ent_sec As System.Nullable(Of Long), ByVal FKcod_medicamento As System.Nullable(Of Long), ByVal validade_ent_sec As String, ByRef mensagem As String) As Integer
            Dim command As System.Data.SqlClient.SqlCommand = CType(Me.CommandCollection(15),System.Data.SqlClient.SqlCommand)
            If (cod_ent_sec.HasValue = true) Then
                command.Parameters(1).Value = CType(cod_ent_sec.Value,Long)
            Else
                command.Parameters(1).Value = System.DBNull.Value
            End If
            If (FKcod_medicamento.HasValue = true) Then
                command.Parameters(2).Value = CType(FKcod_medicamento.Value,Long)
            Else
                command.Parameters(2).Value = System.DBNull.Value
            End If
            If (validade_ent_sec Is Nothing) Then
                command.Parameters(3).Value = System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(validade_ent_sec,String)
            End If
            If (mensagem Is Nothing) Then
                command.Parameters(4).Value = System.DBNull.Value
            Else
                command.Parameters(4).Value = CType(mensagem,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((command.Parameters(4).Value Is Nothing)  _
                        OrElse (command.Parameters(4).Value.GetType Is GetType(System.DBNull))) Then
                mensagem = Nothing
            Else
                mensagem = CType(command.Parameters(4).Value,String)
            End If
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function sp_INSERE_SAI_SEC(ByVal FKcod_medicamento As System.Nullable(Of Long), ByVal validade_sai_sec As String, ByVal quantidade_sai_sec As System.Nullable(Of Long), ByVal FKcod_usuario As System.Nullable(Of Long), ByVal FKcod_regiao As System.Nullable(Of Long), ByRef mensagem As String) As Integer
            Dim command As System.Data.SqlClient.SqlCommand = CType(Me.CommandCollection(16),System.Data.SqlClient.SqlCommand)
            If (FKcod_medicamento.HasValue = true) Then
                command.Parameters(1).Value = CType(FKcod_medicamento.Value,Long)
            Else
                command.Parameters(1).Value = System.DBNull.Value
            End If
            If (validade_sai_sec Is Nothing) Then
                command.Parameters(2).Value = System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(validade_sai_sec,String)
            End If
            If (quantidade_sai_sec.HasValue = true) Then
                command.Parameters(3).Value = CType(quantidade_sai_sec.Value,Long)
            Else
                command.Parameters(3).Value = System.DBNull.Value
            End If
            If (FKcod_usuario.HasValue = true) Then
                command.Parameters(4).Value = CType(FKcod_usuario.Value,Long)
            Else
                command.Parameters(4).Value = System.DBNull.Value
            End If
            If (FKcod_regiao.HasValue = true) Then
                command.Parameters(5).Value = CType(FKcod_regiao.Value,Long)
            Else
                command.Parameters(5).Value = System.DBNull.Value
            End If
            If (mensagem Is Nothing) Then
                command.Parameters(6).Value = System.DBNull.Value
            Else
                command.Parameters(6).Value = CType(mensagem,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((command.Parameters(6).Value Is Nothing)  _
                        OrElse (command.Parameters(6).Value.GetType Is GetType(System.DBNull))) Then
                mensagem = Nothing
            Else
                mensagem = CType(command.Parameters(6).Value,String)
            End If
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function sp_ALTERA_SAIDA_SECRETARIA(ByVal cod_sai_sec As System.Nullable(Of Long), ByVal FKcod_medicamento As System.Nullable(Of Long), ByVal validade_sai_sec As String, ByVal quantidade_sai_sec As System.Nullable(Of Long), ByRef mensagem As String) As Integer
            Dim command As System.Data.SqlClient.SqlCommand = CType(Me.CommandCollection(17),System.Data.SqlClient.SqlCommand)
            If (cod_sai_sec.HasValue = true) Then
                command.Parameters(1).Value = CType(cod_sai_sec.Value,Long)
            Else
                command.Parameters(1).Value = System.DBNull.Value
            End If
            If (FKcod_medicamento.HasValue = true) Then
                command.Parameters(2).Value = CType(FKcod_medicamento.Value,Long)
            Else
                command.Parameters(2).Value = System.DBNull.Value
            End If
            If (validade_sai_sec Is Nothing) Then
                command.Parameters(3).Value = System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(validade_sai_sec,String)
            End If
            If (quantidade_sai_sec.HasValue = true) Then
                command.Parameters(4).Value = CType(quantidade_sai_sec.Value,Long)
            Else
                command.Parameters(4).Value = System.DBNull.Value
            End If
            If (mensagem Is Nothing) Then
                command.Parameters(5).Value = System.DBNull.Value
            Else
                command.Parameters(5).Value = CType(mensagem,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((command.Parameters(5).Value Is Nothing)  _
                        OrElse (command.Parameters(5).Value.GetType Is GetType(System.DBNull))) Then
                mensagem = Nothing
            Else
                mensagem = CType(command.Parameters(5).Value,String)
            End If
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function sp_DELETA_SAIDA_SECRETARIA(ByVal cod_sai_sec As System.Nullable(Of Long), ByRef mensagem As String) As Integer
            Dim command As System.Data.SqlClient.SqlCommand = CType(Me.CommandCollection(18),System.Data.SqlClient.SqlCommand)
            If (cod_sai_sec.HasValue = true) Then
                command.Parameters(1).Value = CType(cod_sai_sec.Value,Long)
            Else
                command.Parameters(1).Value = System.DBNull.Value
            End If
            If (mensagem Is Nothing) Then
                command.Parameters(2).Value = System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(mensagem,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((command.Parameters(2).Value Is Nothing)  _
                        OrElse (command.Parameters(2).Value.GetType Is GetType(System.DBNull))) Then
                mensagem = Nothing
            Else
                mensagem = CType(command.Parameters(2).Value,String)
            End If
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function sp_INSERE_ENT_POLI(ByVal FKcod_medicamento As System.Nullable(Of Long), ByVal validade_ent_poli As String, ByVal quantidade_ent_poli As System.Nullable(Of Long), ByVal FKcod_usuario As System.Nullable(Of Long)) As Integer
            Dim command As System.Data.SqlClient.SqlCommand = CType(Me.CommandCollection(19),System.Data.SqlClient.SqlCommand)
            If (FKcod_medicamento.HasValue = true) Then
                command.Parameters(1).Value = CType(FKcod_medicamento.Value,Long)
            Else
                command.Parameters(1).Value = System.DBNull.Value
            End If
            If (validade_ent_poli Is Nothing) Then
                command.Parameters(2).Value = System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(validade_ent_poli,String)
            End If
            If (quantidade_ent_poli.HasValue = true) Then
                command.Parameters(3).Value = CType(quantidade_ent_poli.Value,Long)
            Else
                command.Parameters(3).Value = System.DBNull.Value
            End If
            If (FKcod_usuario.HasValue = true) Then
                command.Parameters(4).Value = CType(FKcod_usuario.Value,Long)
            Else
                command.Parameters(4).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function sp_QUANT_EST_POLI(ByVal medicamento As System.Nullable(Of Long), ByVal validade As String, ByRef quantidade As System.Nullable(Of Long)) As Integer
            Dim command As System.Data.SqlClient.SqlCommand = CType(Me.CommandCollection(20),System.Data.SqlClient.SqlCommand)
            If (medicamento.HasValue = true) Then
                command.Parameters(1).Value = CType(medicamento.Value,Long)
            Else
                command.Parameters(1).Value = System.DBNull.Value
            End If
            If (validade Is Nothing) Then
                command.Parameters(2).Value = System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(validade,String)
            End If
            If (quantidade.HasValue = true) Then
                command.Parameters(3).Value = CType(quantidade.Value,Long)
            Else
                command.Parameters(3).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((command.Parameters(3).Value Is Nothing)  _
                        OrElse (command.Parameters(3).Value.GetType Is GetType(System.DBNull))) Then
                quantidade = New System.Nullable(Of Long)
            Else
                quantidade = New System.Nullable(Of Long)(CType(command.Parameters(3).Value,Long))
            End If
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function sp_ALTERA_ENTRADA_POLICLINICA(ByVal cod_ent_poli As System.Nullable(Of Long), ByVal FKcod_medicamento As System.Nullable(Of Long), ByVal validade_ent_poli As String, ByVal quantidade_ent_poli As System.Nullable(Of Long), ByRef mensagem As String) As Integer
            Dim command As System.Data.SqlClient.SqlCommand = CType(Me.CommandCollection(21),System.Data.SqlClient.SqlCommand)
            If (cod_ent_poli.HasValue = true) Then
                command.Parameters(1).Value = CType(cod_ent_poli.Value,Long)
            Else
                command.Parameters(1).Value = System.DBNull.Value
            End If
            If (FKcod_medicamento.HasValue = true) Then
                command.Parameters(2).Value = CType(FKcod_medicamento.Value,Long)
            Else
                command.Parameters(2).Value = System.DBNull.Value
            End If
            If (validade_ent_poli Is Nothing) Then
                command.Parameters(3).Value = System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(validade_ent_poli,String)
            End If
            If (quantidade_ent_poli.HasValue = true) Then
                command.Parameters(4).Value = CType(quantidade_ent_poli.Value,Long)
            Else
                command.Parameters(4).Value = System.DBNull.Value
            End If
            If (mensagem Is Nothing) Then
                command.Parameters(5).Value = System.DBNull.Value
            Else
                command.Parameters(5).Value = CType(mensagem,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((command.Parameters(5).Value Is Nothing)  _
                        OrElse (command.Parameters(5).Value.GetType Is GetType(System.DBNull))) Then
                mensagem = Nothing
            Else
                mensagem = CType(command.Parameters(5).Value,String)
            End If
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function sp_DELETA_ENTRADA_POLICLINICA(ByVal cod_ent_poli As System.Nullable(Of Long), ByVal FKcod_medicamento As System.Nullable(Of Long), ByVal validade_ent_poli As String, ByRef mensagem As String) As Integer
            Dim command As System.Data.SqlClient.SqlCommand = CType(Me.CommandCollection(22),System.Data.SqlClient.SqlCommand)
            If (cod_ent_poli.HasValue = true) Then
                command.Parameters(1).Value = CType(cod_ent_poli.Value,Long)
            Else
                command.Parameters(1).Value = System.DBNull.Value
            End If
            If (FKcod_medicamento.HasValue = true) Then
                command.Parameters(2).Value = CType(FKcod_medicamento.Value,Long)
            Else
                command.Parameters(2).Value = System.DBNull.Value
            End If
            If (validade_ent_poli Is Nothing) Then
                command.Parameters(3).Value = System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(validade_ent_poli,String)
            End If
            If (mensagem Is Nothing) Then
                command.Parameters(4).Value = System.DBNull.Value
            Else
                command.Parameters(4).Value = CType(mensagem,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((command.Parameters(4).Value Is Nothing)  _
                        OrElse (command.Parameters(4).Value.GetType Is GetType(System.DBNull))) Then
                mensagem = Nothing
            Else
                mensagem = CType(command.Parameters(4).Value,String)
            End If
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function sp_INSERE_SAI_POLI(ByVal FKcod_medicamento As System.Nullable(Of Long), ByVal validade_sai_poli As String, ByVal quantidade_sai_poli As System.Nullable(Of Long), ByVal FKcod_usuario As System.Nullable(Of Long), ByVal FKcod_paciente As System.Nullable(Of Long), ByRef mensagem As String) As Integer
            Dim command As System.Data.SqlClient.SqlCommand = CType(Me.CommandCollection(23),System.Data.SqlClient.SqlCommand)
            If (FKcod_medicamento.HasValue = true) Then
                command.Parameters(1).Value = CType(FKcod_medicamento.Value,Long)
            Else
                command.Parameters(1).Value = System.DBNull.Value
            End If
            If (validade_sai_poli Is Nothing) Then
                command.Parameters(2).Value = System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(validade_sai_poli,String)
            End If
            If (quantidade_sai_poli.HasValue = true) Then
                command.Parameters(3).Value = CType(quantidade_sai_poli.Value,Long)
            Else
                command.Parameters(3).Value = System.DBNull.Value
            End If
            If (FKcod_usuario.HasValue = true) Then
                command.Parameters(4).Value = CType(FKcod_usuario.Value,Long)
            Else
                command.Parameters(4).Value = System.DBNull.Value
            End If
            If (FKcod_paciente.HasValue = true) Then
                command.Parameters(5).Value = CType(FKcod_paciente.Value,Long)
            Else
                command.Parameters(5).Value = System.DBNull.Value
            End If
            If (mensagem Is Nothing) Then
                command.Parameters(6).Value = System.DBNull.Value
            Else
                command.Parameters(6).Value = CType(mensagem,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((command.Parameters(6).Value Is Nothing)  _
                        OrElse (command.Parameters(6).Value.GetType Is GetType(System.DBNull))) Then
                mensagem = Nothing
            Else
                mensagem = CType(command.Parameters(6).Value,String)
            End If
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function sp_ALTERA_SAIDA_POLICLINICA(ByVal cod_sai_poli As System.Nullable(Of Long), ByVal FKcod_medicamento As System.Nullable(Of Long), ByVal validade_sai_poli As String, ByVal quantidade_sai_poli As System.Nullable(Of Long), ByRef mensagem As String) As Integer
            Dim command As System.Data.SqlClient.SqlCommand = CType(Me.CommandCollection(24),System.Data.SqlClient.SqlCommand)
            If (cod_sai_poli.HasValue = true) Then
                command.Parameters(1).Value = CType(cod_sai_poli.Value,Long)
            Else
                command.Parameters(1).Value = System.DBNull.Value
            End If
            If (FKcod_medicamento.HasValue = true) Then
                command.Parameters(2).Value = CType(FKcod_medicamento.Value,Long)
            Else
                command.Parameters(2).Value = System.DBNull.Value
            End If
            If (validade_sai_poli Is Nothing) Then
                command.Parameters(3).Value = System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(validade_sai_poli,String)
            End If
            If (quantidade_sai_poli.HasValue = true) Then
                command.Parameters(4).Value = CType(quantidade_sai_poli.Value,Long)
            Else
                command.Parameters(4).Value = System.DBNull.Value
            End If
            If (mensagem Is Nothing) Then
                command.Parameters(5).Value = System.DBNull.Value
            Else
                command.Parameters(5).Value = CType(mensagem,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((command.Parameters(5).Value Is Nothing)  _
                        OrElse (command.Parameters(5).Value.GetType Is GetType(System.DBNull))) Then
                mensagem = Nothing
            Else
                mensagem = CType(command.Parameters(5).Value,String)
            End If
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function sp_DELETA_SAIDA_POLICLINICA(ByVal cod_sai_poli As System.Nullable(Of Long), ByRef mensagem As String) As Integer
            Dim command As System.Data.SqlClient.SqlCommand = CType(Me.CommandCollection(25),System.Data.SqlClient.SqlCommand)
            If (cod_sai_poli.HasValue = true) Then
                command.Parameters(1).Value = CType(cod_sai_poli.Value,Long)
            Else
                command.Parameters(1).Value = System.DBNull.Value
            End If
            If (mensagem Is Nothing) Then
                command.Parameters(2).Value = System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(mensagem,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((command.Parameters(2).Value Is Nothing)  _
                        OrElse (command.Parameters(2).Value.GetType Is GetType(System.DBNull))) Then
                mensagem = Nothing
            Else
                mensagem = CType(command.Parameters(2).Value,String)
            End If
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function sp_INSERE_MATERIAL(ByVal nome_medicamento As String, ByVal composicao_medicamento As String, ByVal info_medicamento As String) As Integer
            Dim command As System.Data.SqlClient.SqlCommand = CType(Me.CommandCollection(26),System.Data.SqlClient.SqlCommand)
            If (nome_medicamento Is Nothing) Then
                command.Parameters(1).Value = System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(nome_medicamento,String)
            End If
            If (composicao_medicamento Is Nothing) Then
                command.Parameters(2).Value = System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(composicao_medicamento,String)
            End If
            If (info_medicamento Is Nothing) Then
                command.Parameters(3).Value = System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(info_medicamento,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
End Namespace
