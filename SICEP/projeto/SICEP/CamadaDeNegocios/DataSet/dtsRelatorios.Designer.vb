'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("dtsRelatorios"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dtsRelatorios
    Inherits System.Data.DataSet
    
    Private tablerl_estoque As rl_estoqueDataTable
    
    Private tablerl_entrada_secretaria As rl_entrada_secretariaDataTable
    
    Private tablerl_microarea As rl_microareaDataTable
    
    Private tablerl_usuario As rl_usuarioDataTable
    
    Private tablerl_paciente As rl_pacienteDataTable
    
    Private tablerl_medicamento As rl_medicamentoDataTable
    
    Private tablerl_saida_secretaria As rl_saida_secretariaDataTable
    
    Private tablerl_entrada_policlinica As rl_entrada_policlinicaDataTable
    
    Private tablerl_saida_policlinica As rl_saida_policlinicaDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("rl_estoque")) Is Nothing) Then
                MyBase.Tables.Add(New rl_estoqueDataTable(ds.Tables("rl_estoque")))
            End If
            If (Not (ds.Tables("rl_entrada_secretaria")) Is Nothing) Then
                MyBase.Tables.Add(New rl_entrada_secretariaDataTable(ds.Tables("rl_entrada_secretaria")))
            End If
            If (Not (ds.Tables("rl_microarea")) Is Nothing) Then
                MyBase.Tables.Add(New rl_microareaDataTable(ds.Tables("rl_microarea")))
            End If
            If (Not (ds.Tables("rl_usuario")) Is Nothing) Then
                MyBase.Tables.Add(New rl_usuarioDataTable(ds.Tables("rl_usuario")))
            End If
            If (Not (ds.Tables("rl_paciente")) Is Nothing) Then
                MyBase.Tables.Add(New rl_pacienteDataTable(ds.Tables("rl_paciente")))
            End If
            If (Not (ds.Tables("rl_medicamento")) Is Nothing) Then
                MyBase.Tables.Add(New rl_medicamentoDataTable(ds.Tables("rl_medicamento")))
            End If
            If (Not (ds.Tables("rl_saida_secretaria")) Is Nothing) Then
                MyBase.Tables.Add(New rl_saida_secretariaDataTable(ds.Tables("rl_saida_secretaria")))
            End If
            If (Not (ds.Tables("rl_entrada_policlinica")) Is Nothing) Then
                MyBase.Tables.Add(New rl_entrada_policlinicaDataTable(ds.Tables("rl_entrada_policlinica")))
            End If
            If (Not (ds.Tables("rl_saida_policlinica")) Is Nothing) Then
                MyBase.Tables.Add(New rl_saida_policlinicaDataTable(ds.Tables("rl_saida_policlinica")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property rl_estoque() As rl_estoqueDataTable
        Get
            Return Me.tablerl_estoque
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property rl_entrada_secretaria() As rl_entrada_secretariaDataTable
        Get
            Return Me.tablerl_entrada_secretaria
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property rl_microarea() As rl_microareaDataTable
        Get
            Return Me.tablerl_microarea
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property rl_usuario() As rl_usuarioDataTable
        Get
            Return Me.tablerl_usuario
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property rl_paciente() As rl_pacienteDataTable
        Get
            Return Me.tablerl_paciente
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property rl_medicamento() As rl_medicamentoDataTable
        Get
            Return Me.tablerl_medicamento
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property rl_saida_secretaria() As rl_saida_secretariaDataTable
        Get
            Return Me.tablerl_saida_secretaria
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property rl_entrada_policlinica() As rl_entrada_policlinicaDataTable
        Get
            Return Me.tablerl_entrada_policlinica
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property rl_saida_policlinica() As rl_saida_policlinicaDataTable
        Get
            Return Me.tablerl_saida_policlinica
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As dtsRelatorios = CType(MyBase.Clone,dtsRelatorios)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("rl_estoque")) Is Nothing) Then
                MyBase.Tables.Add(New rl_estoqueDataTable(ds.Tables("rl_estoque")))
            End If
            If (Not (ds.Tables("rl_entrada_secretaria")) Is Nothing) Then
                MyBase.Tables.Add(New rl_entrada_secretariaDataTable(ds.Tables("rl_entrada_secretaria")))
            End If
            If (Not (ds.Tables("rl_microarea")) Is Nothing) Then
                MyBase.Tables.Add(New rl_microareaDataTable(ds.Tables("rl_microarea")))
            End If
            If (Not (ds.Tables("rl_usuario")) Is Nothing) Then
                MyBase.Tables.Add(New rl_usuarioDataTable(ds.Tables("rl_usuario")))
            End If
            If (Not (ds.Tables("rl_paciente")) Is Nothing) Then
                MyBase.Tables.Add(New rl_pacienteDataTable(ds.Tables("rl_paciente")))
            End If
            If (Not (ds.Tables("rl_medicamento")) Is Nothing) Then
                MyBase.Tables.Add(New rl_medicamentoDataTable(ds.Tables("rl_medicamento")))
            End If
            If (Not (ds.Tables("rl_saida_secretaria")) Is Nothing) Then
                MyBase.Tables.Add(New rl_saida_secretariaDataTable(ds.Tables("rl_saida_secretaria")))
            End If
            If (Not (ds.Tables("rl_entrada_policlinica")) Is Nothing) Then
                MyBase.Tables.Add(New rl_entrada_policlinicaDataTable(ds.Tables("rl_entrada_policlinica")))
            End If
            If (Not (ds.Tables("rl_saida_policlinica")) Is Nothing) Then
                MyBase.Tables.Add(New rl_saida_policlinicaDataTable(ds.Tables("rl_saida_policlinica")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablerl_estoque = CType(MyBase.Tables("rl_estoque"),rl_estoqueDataTable)
        If (initTable = true) Then
            If (Not (Me.tablerl_estoque) Is Nothing) Then
                Me.tablerl_estoque.InitVars
            End If
        End If
        Me.tablerl_entrada_secretaria = CType(MyBase.Tables("rl_entrada_secretaria"),rl_entrada_secretariaDataTable)
        If (initTable = true) Then
            If (Not (Me.tablerl_entrada_secretaria) Is Nothing) Then
                Me.tablerl_entrada_secretaria.InitVars
            End If
        End If
        Me.tablerl_microarea = CType(MyBase.Tables("rl_microarea"),rl_microareaDataTable)
        If (initTable = true) Then
            If (Not (Me.tablerl_microarea) Is Nothing) Then
                Me.tablerl_microarea.InitVars
            End If
        End If
        Me.tablerl_usuario = CType(MyBase.Tables("rl_usuario"),rl_usuarioDataTable)
        If (initTable = true) Then
            If (Not (Me.tablerl_usuario) Is Nothing) Then
                Me.tablerl_usuario.InitVars
            End If
        End If
        Me.tablerl_paciente = CType(MyBase.Tables("rl_paciente"),rl_pacienteDataTable)
        If (initTable = true) Then
            If (Not (Me.tablerl_paciente) Is Nothing) Then
                Me.tablerl_paciente.InitVars
            End If
        End If
        Me.tablerl_medicamento = CType(MyBase.Tables("rl_medicamento"),rl_medicamentoDataTable)
        If (initTable = true) Then
            If (Not (Me.tablerl_medicamento) Is Nothing) Then
                Me.tablerl_medicamento.InitVars
            End If
        End If
        Me.tablerl_saida_secretaria = CType(MyBase.Tables("rl_saida_secretaria"),rl_saida_secretariaDataTable)
        If (initTable = true) Then
            If (Not (Me.tablerl_saida_secretaria) Is Nothing) Then
                Me.tablerl_saida_secretaria.InitVars
            End If
        End If
        Me.tablerl_entrada_policlinica = CType(MyBase.Tables("rl_entrada_policlinica"),rl_entrada_policlinicaDataTable)
        If (initTable = true) Then
            If (Not (Me.tablerl_entrada_policlinica) Is Nothing) Then
                Me.tablerl_entrada_policlinica.InitVars
            End If
        End If
        Me.tablerl_saida_policlinica = CType(MyBase.Tables("rl_saida_policlinica"),rl_saida_policlinicaDataTable)
        If (initTable = true) Then
            If (Not (Me.tablerl_saida_policlinica) Is Nothing) Then
                Me.tablerl_saida_policlinica.InitVars
            End If
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dtsRelatorios"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dtsRelatorios.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablerl_estoque = New rl_estoqueDataTable
        MyBase.Tables.Add(Me.tablerl_estoque)
        Me.tablerl_entrada_secretaria = New rl_entrada_secretariaDataTable
        MyBase.Tables.Add(Me.tablerl_entrada_secretaria)
        Me.tablerl_microarea = New rl_microareaDataTable
        MyBase.Tables.Add(Me.tablerl_microarea)
        Me.tablerl_usuario = New rl_usuarioDataTable
        MyBase.Tables.Add(Me.tablerl_usuario)
        Me.tablerl_paciente = New rl_pacienteDataTable
        MyBase.Tables.Add(Me.tablerl_paciente)
        Me.tablerl_medicamento = New rl_medicamentoDataTable
        MyBase.Tables.Add(Me.tablerl_medicamento)
        Me.tablerl_saida_secretaria = New rl_saida_secretariaDataTable
        MyBase.Tables.Add(Me.tablerl_saida_secretaria)
        Me.tablerl_entrada_policlinica = New rl_entrada_policlinicaDataTable
        MyBase.Tables.Add(Me.tablerl_entrada_policlinica)
        Me.tablerl_saida_policlinica = New rl_saida_policlinicaDataTable
        MyBase.Tables.Add(Me.tablerl_saida_policlinica)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializerl_estoque() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializerl_entrada_secretaria() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializerl_microarea() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializerl_usuario() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializerl_paciente() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializerl_medicamento() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializerl_saida_secretaria() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializerl_entrada_policlinica() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializerl_saida_policlinica() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dtsRelatorios = New dtsRelatorios
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub rl_estoqueRowChangeEventHandler(ByVal sender As Object, ByVal e As rl_estoqueRowChangeEvent)
    
    Public Delegate Sub rl_entrada_secretariaRowChangeEventHandler(ByVal sender As Object, ByVal e As rl_entrada_secretariaRowChangeEvent)
    
    Public Delegate Sub rl_microareaRowChangeEventHandler(ByVal sender As Object, ByVal e As rl_microareaRowChangeEvent)
    
    Public Delegate Sub rl_usuarioRowChangeEventHandler(ByVal sender As Object, ByVal e As rl_usuarioRowChangeEvent)
    
    Public Delegate Sub rl_pacienteRowChangeEventHandler(ByVal sender As Object, ByVal e As rl_pacienteRowChangeEvent)
    
    Public Delegate Sub rl_medicamentoRowChangeEventHandler(ByVal sender As Object, ByVal e As rl_medicamentoRowChangeEvent)
    
    Public Delegate Sub rl_saida_secretariaRowChangeEventHandler(ByVal sender As Object, ByVal e As rl_saida_secretariaRowChangeEvent)
    
    Public Delegate Sub rl_entrada_policlinicaRowChangeEventHandler(ByVal sender As Object, ByVal e As rl_entrada_policlinicaRowChangeEvent)
    
    Public Delegate Sub rl_saida_policlinicaRowChangeEventHandler(ByVal sender As Object, ByVal e As rl_saida_policlinicaRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class rl_estoqueDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnnome_medicamento As System.Data.DataColumn
        
        Private columnval_medicamento As System.Data.DataColumn
        
        Private columnquant_medicamento As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "rl_estoque"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nome_medicamentoColumn() As System.Data.DataColumn
            Get
                Return Me.columnnome_medicamento
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property val_medicamentoColumn() As System.Data.DataColumn
            Get
                Return Me.columnval_medicamento
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property quant_medicamentoColumn() As System.Data.DataColumn
            Get
                Return Me.columnquant_medicamento
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As rl_estoqueRow
            Get
                Return CType(Me.Rows(index),rl_estoqueRow)
            End Get
        End Property
        
        Public Event rl_estoqueRowChanging As rl_estoqueRowChangeEventHandler
        
        Public Event rl_estoqueRowChanged As rl_estoqueRowChangeEventHandler
        
        Public Event rl_estoqueRowDeleting As rl_estoqueRowChangeEventHandler
        
        Public Event rl_estoqueRowDeleted As rl_estoqueRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addrl_estoqueRow(ByVal row As rl_estoqueRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addrl_estoqueRow(ByVal nome_medicamento As String, ByVal val_medicamento As String, ByVal quant_medicamento As Long) As rl_estoqueRow
            Dim rowrl_estoqueRow As rl_estoqueRow = CType(Me.NewRow,rl_estoqueRow)
            rowrl_estoqueRow.ItemArray = New Object() {nome_medicamento, val_medicamento, quant_medicamento}
            Me.Rows.Add(rowrl_estoqueRow)
            Return rowrl_estoqueRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As rl_estoqueDataTable = CType(MyBase.Clone,rl_estoqueDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New rl_estoqueDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnome_medicamento = MyBase.Columns("nome_medicamento")
            Me.columnval_medicamento = MyBase.Columns("val_medicamento")
            Me.columnquant_medicamento = MyBase.Columns("quant_medicamento")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnome_medicamento = New System.Data.DataColumn("nome_medicamento", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnome_medicamento)
            Me.columnval_medicamento = New System.Data.DataColumn("val_medicamento", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnval_medicamento)
            Me.columnquant_medicamento = New System.Data.DataColumn("quant_medicamento", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnquant_medicamento)
            Me.columnnome_medicamento.AllowDBNull = false
            Me.columnval_medicamento.AllowDBNull = false
            Me.columnquant_medicamento.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newrl_estoqueRow() As rl_estoqueRow
            Return CType(Me.NewRow,rl_estoqueRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New rl_estoqueRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(rl_estoqueRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.rl_estoqueRowChangedEvent) Is Nothing) Then
                RaiseEvent rl_estoqueRowChanged(Me, New rl_estoqueRowChangeEvent(CType(e.Row,rl_estoqueRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.rl_estoqueRowChangingEvent) Is Nothing) Then
                RaiseEvent rl_estoqueRowChanging(Me, New rl_estoqueRowChangeEvent(CType(e.Row,rl_estoqueRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.rl_estoqueRowDeletedEvent) Is Nothing) Then
                RaiseEvent rl_estoqueRowDeleted(Me, New rl_estoqueRowChangeEvent(CType(e.Row,rl_estoqueRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.rl_estoqueRowDeletingEvent) Is Nothing) Then
                RaiseEvent rl_estoqueRowDeleting(Me, New rl_estoqueRowChangeEvent(CType(e.Row,rl_estoqueRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removerl_estoqueRow(ByVal row As rl_estoqueRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtsRelatorios = New dtsRelatorios
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "rl_estoqueDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class rl_entrada_secretariaDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columndata_ent_sec As System.Data.DataColumn
        
        Private columnlote_ent_sec As System.Data.DataColumn
        
        Private columnnota_ent_sec As System.Data.DataColumn
        
        Private columnnome_medicamento As System.Data.DataColumn
        
        Private columnvalidade_ent_sec As System.Data.DataColumn
        
        Private columnquantidade_ent_sec As System.Data.DataColumn
        
        Private columnnome_usuario As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "rl_entrada_secretaria"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property data_ent_secColumn() As System.Data.DataColumn
            Get
                Return Me.columndata_ent_sec
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lote_ent_secColumn() As System.Data.DataColumn
            Get
                Return Me.columnlote_ent_sec
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nota_ent_secColumn() As System.Data.DataColumn
            Get
                Return Me.columnnota_ent_sec
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nome_medicamentoColumn() As System.Data.DataColumn
            Get
                Return Me.columnnome_medicamento
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property validade_ent_secColumn() As System.Data.DataColumn
            Get
                Return Me.columnvalidade_ent_sec
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property quantidade_ent_secColumn() As System.Data.DataColumn
            Get
                Return Me.columnquantidade_ent_sec
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nome_usuarioColumn() As System.Data.DataColumn
            Get
                Return Me.columnnome_usuario
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As rl_entrada_secretariaRow
            Get
                Return CType(Me.Rows(index),rl_entrada_secretariaRow)
            End Get
        End Property
        
        Public Event rl_entrada_secretariaRowChanging As rl_entrada_secretariaRowChangeEventHandler
        
        Public Event rl_entrada_secretariaRowChanged As rl_entrada_secretariaRowChangeEventHandler
        
        Public Event rl_entrada_secretariaRowDeleting As rl_entrada_secretariaRowChangeEventHandler
        
        Public Event rl_entrada_secretariaRowDeleted As rl_entrada_secretariaRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addrl_entrada_secretariaRow(ByVal row As rl_entrada_secretariaRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addrl_entrada_secretariaRow(ByVal data_ent_sec As String, ByVal lote_ent_sec As String, ByVal nota_ent_sec As String, ByVal nome_medicamento As String, ByVal validade_ent_sec As String, ByVal quantidade_ent_sec As Long, ByVal nome_usuario As String) As rl_entrada_secretariaRow
            Dim rowrl_entrada_secretariaRow As rl_entrada_secretariaRow = CType(Me.NewRow,rl_entrada_secretariaRow)
            rowrl_entrada_secretariaRow.ItemArray = New Object() {data_ent_sec, lote_ent_sec, nota_ent_sec, nome_medicamento, validade_ent_sec, quantidade_ent_sec, nome_usuario}
            Me.Rows.Add(rowrl_entrada_secretariaRow)
            Return rowrl_entrada_secretariaRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As rl_entrada_secretariaDataTable = CType(MyBase.Clone,rl_entrada_secretariaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New rl_entrada_secretariaDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columndata_ent_sec = MyBase.Columns("data_ent_sec")
            Me.columnlote_ent_sec = MyBase.Columns("lote_ent_sec")
            Me.columnnota_ent_sec = MyBase.Columns("nota_ent_sec")
            Me.columnnome_medicamento = MyBase.Columns("nome_medicamento")
            Me.columnvalidade_ent_sec = MyBase.Columns("validade_ent_sec")
            Me.columnquantidade_ent_sec = MyBase.Columns("quantidade_ent_sec")
            Me.columnnome_usuario = MyBase.Columns("nome_usuario")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columndata_ent_sec = New System.Data.DataColumn("data_ent_sec", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndata_ent_sec)
            Me.columnlote_ent_sec = New System.Data.DataColumn("lote_ent_sec", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlote_ent_sec)
            Me.columnnota_ent_sec = New System.Data.DataColumn("nota_ent_sec", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnota_ent_sec)
            Me.columnnome_medicamento = New System.Data.DataColumn("nome_medicamento", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnome_medicamento)
            Me.columnvalidade_ent_sec = New System.Data.DataColumn("validade_ent_sec", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvalidade_ent_sec)
            Me.columnquantidade_ent_sec = New System.Data.DataColumn("quantidade_ent_sec", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnquantidade_ent_sec)
            Me.columnnome_usuario = New System.Data.DataColumn("nome_usuario", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnome_usuario)
            Me.columndata_ent_sec.AllowDBNull = false
            Me.columnlote_ent_sec.AllowDBNull = false
            Me.columnnota_ent_sec.AllowDBNull = false
            Me.columnnome_medicamento.AllowDBNull = false
            Me.columnvalidade_ent_sec.AllowDBNull = false
            Me.columnquantidade_ent_sec.AllowDBNull = false
            Me.columnnome_usuario.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newrl_entrada_secretariaRow() As rl_entrada_secretariaRow
            Return CType(Me.NewRow,rl_entrada_secretariaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New rl_entrada_secretariaRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(rl_entrada_secretariaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.rl_entrada_secretariaRowChangedEvent) Is Nothing) Then
                RaiseEvent rl_entrada_secretariaRowChanged(Me, New rl_entrada_secretariaRowChangeEvent(CType(e.Row,rl_entrada_secretariaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.rl_entrada_secretariaRowChangingEvent) Is Nothing) Then
                RaiseEvent rl_entrada_secretariaRowChanging(Me, New rl_entrada_secretariaRowChangeEvent(CType(e.Row,rl_entrada_secretariaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.rl_entrada_secretariaRowDeletedEvent) Is Nothing) Then
                RaiseEvent rl_entrada_secretariaRowDeleted(Me, New rl_entrada_secretariaRowChangeEvent(CType(e.Row,rl_entrada_secretariaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.rl_entrada_secretariaRowDeletingEvent) Is Nothing) Then
                RaiseEvent rl_entrada_secretariaRowDeleting(Me, New rl_entrada_secretariaRowChangeEvent(CType(e.Row,rl_entrada_secretariaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removerl_entrada_secretariaRow(ByVal row As rl_entrada_secretariaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtsRelatorios = New dtsRelatorios
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "rl_entrada_secretariaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class rl_microareaDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_microarea As System.Data.DataColumn
        
        Private columndata_cad_microarea As System.Data.DataColumn
        
        Private columnagente_microarea As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "rl_microarea"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cod_microareaColumn() As System.Data.DataColumn
            Get
                Return Me.columncod_microarea
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property data_cad_microareaColumn() As System.Data.DataColumn
            Get
                Return Me.columndata_cad_microarea
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property agente_microareaColumn() As System.Data.DataColumn
            Get
                Return Me.columnagente_microarea
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As rl_microareaRow
            Get
                Return CType(Me.Rows(index),rl_microareaRow)
            End Get
        End Property
        
        Public Event rl_microareaRowChanging As rl_microareaRowChangeEventHandler
        
        Public Event rl_microareaRowChanged As rl_microareaRowChangeEventHandler
        
        Public Event rl_microareaRowDeleting As rl_microareaRowChangeEventHandler
        
        Public Event rl_microareaRowDeleted As rl_microareaRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addrl_microareaRow(ByVal row As rl_microareaRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addrl_microareaRow(ByVal cod_microarea As Long, ByVal data_cad_microarea As String, ByVal agente_microarea As String) As rl_microareaRow
            Dim rowrl_microareaRow As rl_microareaRow = CType(Me.NewRow,rl_microareaRow)
            rowrl_microareaRow.ItemArray = New Object() {cod_microarea, data_cad_microarea, agente_microarea}
            Me.Rows.Add(rowrl_microareaRow)
            Return rowrl_microareaRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As rl_microareaDataTable = CType(MyBase.Clone,rl_microareaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New rl_microareaDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncod_microarea = MyBase.Columns("cod_microarea")
            Me.columndata_cad_microarea = MyBase.Columns("data_cad_microarea")
            Me.columnagente_microarea = MyBase.Columns("agente_microarea")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncod_microarea = New System.Data.DataColumn("cod_microarea", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncod_microarea)
            Me.columndata_cad_microarea = New System.Data.DataColumn("data_cad_microarea", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndata_cad_microarea)
            Me.columnagente_microarea = New System.Data.DataColumn("agente_microarea", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnagente_microarea)
            Me.columncod_microarea.AllowDBNull = false
            Me.columndata_cad_microarea.AllowDBNull = false
            Me.columnagente_microarea.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newrl_microareaRow() As rl_microareaRow
            Return CType(Me.NewRow,rl_microareaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New rl_microareaRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(rl_microareaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.rl_microareaRowChangedEvent) Is Nothing) Then
                RaiseEvent rl_microareaRowChanged(Me, New rl_microareaRowChangeEvent(CType(e.Row,rl_microareaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.rl_microareaRowChangingEvent) Is Nothing) Then
                RaiseEvent rl_microareaRowChanging(Me, New rl_microareaRowChangeEvent(CType(e.Row,rl_microareaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.rl_microareaRowDeletedEvent) Is Nothing) Then
                RaiseEvent rl_microareaRowDeleted(Me, New rl_microareaRowChangeEvent(CType(e.Row,rl_microareaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.rl_microareaRowDeletingEvent) Is Nothing) Then
                RaiseEvent rl_microareaRowDeleting(Me, New rl_microareaRowChangeEvent(CType(e.Row,rl_microareaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removerl_microareaRow(ByVal row As rl_microareaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtsRelatorios = New dtsRelatorios
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "rl_microareaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class rl_usuarioDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnnome_usuario As System.Data.DataColumn
        
        Private columncargo_usuario As System.Data.DataColumn
        
        Private columnend_usuario As System.Data.DataColumn
        
        Private columntel_res_usuario As System.Data.DataColumn
        
        Private columntel_cel_usuario As System.Data.DataColumn
        
        Private columnemail_usuario As System.Data.DataColumn
        
        Private columnCPF_usuario As System.Data.DataColumn
        
        Private columnRG_usuario As System.Data.DataColumn
        
        Private columnnome_perfil As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "rl_usuario"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nome_usuarioColumn() As System.Data.DataColumn
            Get
                Return Me.columnnome_usuario
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cargo_usuarioColumn() As System.Data.DataColumn
            Get
                Return Me.columncargo_usuario
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property end_usuarioColumn() As System.Data.DataColumn
            Get
                Return Me.columnend_usuario
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tel_res_usuarioColumn() As System.Data.DataColumn
            Get
                Return Me.columntel_res_usuario
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tel_cel_usuarioColumn() As System.Data.DataColumn
            Get
                Return Me.columntel_cel_usuario
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property email_usuarioColumn() As System.Data.DataColumn
            Get
                Return Me.columnemail_usuario
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CPF_usuarioColumn() As System.Data.DataColumn
            Get
                Return Me.columnCPF_usuario
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RG_usuarioColumn() As System.Data.DataColumn
            Get
                Return Me.columnRG_usuario
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nome_perfilColumn() As System.Data.DataColumn
            Get
                Return Me.columnnome_perfil
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As rl_usuarioRow
            Get
                Return CType(Me.Rows(index),rl_usuarioRow)
            End Get
        End Property
        
        Public Event rl_usuarioRowChanging As rl_usuarioRowChangeEventHandler
        
        Public Event rl_usuarioRowChanged As rl_usuarioRowChangeEventHandler
        
        Public Event rl_usuarioRowDeleting As rl_usuarioRowChangeEventHandler
        
        Public Event rl_usuarioRowDeleted As rl_usuarioRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addrl_usuarioRow(ByVal row As rl_usuarioRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addrl_usuarioRow(ByVal nome_usuario As String, ByVal cargo_usuario As String, ByVal end_usuario As String, ByVal tel_res_usuario As String, ByVal tel_cel_usuario As String, ByVal email_usuario As String, ByVal CPF_usuario As String, ByVal RG_usuario As String, ByVal nome_perfil As String) As rl_usuarioRow
            Dim rowrl_usuarioRow As rl_usuarioRow = CType(Me.NewRow,rl_usuarioRow)
            rowrl_usuarioRow.ItemArray = New Object() {nome_usuario, cargo_usuario, end_usuario, tel_res_usuario, tel_cel_usuario, email_usuario, CPF_usuario, RG_usuario, nome_perfil}
            Me.Rows.Add(rowrl_usuarioRow)
            Return rowrl_usuarioRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As rl_usuarioDataTable = CType(MyBase.Clone,rl_usuarioDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New rl_usuarioDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnome_usuario = MyBase.Columns("nome_usuario")
            Me.columncargo_usuario = MyBase.Columns("cargo_usuario")
            Me.columnend_usuario = MyBase.Columns("end_usuario")
            Me.columntel_res_usuario = MyBase.Columns("tel_res_usuario")
            Me.columntel_cel_usuario = MyBase.Columns("tel_cel_usuario")
            Me.columnemail_usuario = MyBase.Columns("email_usuario")
            Me.columnCPF_usuario = MyBase.Columns("CPF_usuario")
            Me.columnRG_usuario = MyBase.Columns("RG_usuario")
            Me.columnnome_perfil = MyBase.Columns("nome_perfil")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnome_usuario = New System.Data.DataColumn("nome_usuario", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnome_usuario)
            Me.columncargo_usuario = New System.Data.DataColumn("cargo_usuario", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncargo_usuario)
            Me.columnend_usuario = New System.Data.DataColumn("end_usuario", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnend_usuario)
            Me.columntel_res_usuario = New System.Data.DataColumn("tel_res_usuario", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntel_res_usuario)
            Me.columntel_cel_usuario = New System.Data.DataColumn("tel_cel_usuario", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntel_cel_usuario)
            Me.columnemail_usuario = New System.Data.DataColumn("email_usuario", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnemail_usuario)
            Me.columnCPF_usuario = New System.Data.DataColumn("CPF_usuario", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCPF_usuario)
            Me.columnRG_usuario = New System.Data.DataColumn("RG_usuario", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRG_usuario)
            Me.columnnome_perfil = New System.Data.DataColumn("nome_perfil", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnome_perfil)
            Me.columnnome_usuario.AllowDBNull = false
            Me.columnnome_usuario.MaxLength = 100
            Me.columncargo_usuario.AllowDBNull = false
            Me.columncargo_usuario.MaxLength = 100
            Me.columnend_usuario.AllowDBNull = false
            Me.columnend_usuario.MaxLength = 100
            Me.columntel_res_usuario.AllowDBNull = false
            Me.columntel_res_usuario.MaxLength = 13
            Me.columntel_cel_usuario.AllowDBNull = false
            Me.columntel_cel_usuario.MaxLength = 13
            Me.columnemail_usuario.AllowDBNull = false
            Me.columnemail_usuario.MaxLength = 100
            Me.columnCPF_usuario.AllowDBNull = false
            Me.columnCPF_usuario.MaxLength = 15
            Me.columnRG_usuario.AllowDBNull = false
            Me.columnRG_usuario.MaxLength = 20
            Me.columnnome_perfil.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newrl_usuarioRow() As rl_usuarioRow
            Return CType(Me.NewRow,rl_usuarioRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New rl_usuarioRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(rl_usuarioRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.rl_usuarioRowChangedEvent) Is Nothing) Then
                RaiseEvent rl_usuarioRowChanged(Me, New rl_usuarioRowChangeEvent(CType(e.Row,rl_usuarioRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.rl_usuarioRowChangingEvent) Is Nothing) Then
                RaiseEvent rl_usuarioRowChanging(Me, New rl_usuarioRowChangeEvent(CType(e.Row,rl_usuarioRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.rl_usuarioRowDeletedEvent) Is Nothing) Then
                RaiseEvent rl_usuarioRowDeleted(Me, New rl_usuarioRowChangeEvent(CType(e.Row,rl_usuarioRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.rl_usuarioRowDeletingEvent) Is Nothing) Then
                RaiseEvent rl_usuarioRowDeleting(Me, New rl_usuarioRowChangeEvent(CType(e.Row,rl_usuarioRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removerl_usuarioRow(ByVal row As rl_usuarioRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtsRelatorios = New dtsRelatorios
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "rl_usuarioDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class rl_pacienteDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnnome_paciente As System.Data.DataColumn
        
        Private columnend_paciente As System.Data.DataColumn
        
        Private columndata_nasc_paciente As System.Data.DataColumn
        
        Private columnsexo_paciente As System.Data.DataColumn
        
        Private columntel_paciente As System.Data.DataColumn
        
        Private columnnome_mae_paciente As System.Data.DataColumn
        
        Private columnCPF_paciente As System.Data.DataColumn
        
        Private columnRG_paciente As System.Data.DataColumn
        
        Private columnFKcod_microarea As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "rl_paciente"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nome_pacienteColumn() As System.Data.DataColumn
            Get
                Return Me.columnnome_paciente
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property end_pacienteColumn() As System.Data.DataColumn
            Get
                Return Me.columnend_paciente
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property data_nasc_pacienteColumn() As System.Data.DataColumn
            Get
                Return Me.columndata_nasc_paciente
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sexo_pacienteColumn() As System.Data.DataColumn
            Get
                Return Me.columnsexo_paciente
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tel_pacienteColumn() As System.Data.DataColumn
            Get
                Return Me.columntel_paciente
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nome_mae_pacienteColumn() As System.Data.DataColumn
            Get
                Return Me.columnnome_mae_paciente
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CPF_pacienteColumn() As System.Data.DataColumn
            Get
                Return Me.columnCPF_paciente
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RG_pacienteColumn() As System.Data.DataColumn
            Get
                Return Me.columnRG_paciente
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FKcod_microareaColumn() As System.Data.DataColumn
            Get
                Return Me.columnFKcod_microarea
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As rl_pacienteRow
            Get
                Return CType(Me.Rows(index),rl_pacienteRow)
            End Get
        End Property
        
        Public Event rl_pacienteRowChanging As rl_pacienteRowChangeEventHandler
        
        Public Event rl_pacienteRowChanged As rl_pacienteRowChangeEventHandler
        
        Public Event rl_pacienteRowDeleting As rl_pacienteRowChangeEventHandler
        
        Public Event rl_pacienteRowDeleted As rl_pacienteRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addrl_pacienteRow(ByVal row As rl_pacienteRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addrl_pacienteRow(ByVal nome_paciente As String, ByVal end_paciente As String, ByVal data_nasc_paciente As String, ByVal sexo_paciente As String, ByVal tel_paciente As String, ByVal nome_mae_paciente As String, ByVal CPF_paciente As String, ByVal RG_paciente As String, ByVal FKcod_microarea As Long) As rl_pacienteRow
            Dim rowrl_pacienteRow As rl_pacienteRow = CType(Me.NewRow,rl_pacienteRow)
            rowrl_pacienteRow.ItemArray = New Object() {nome_paciente, end_paciente, data_nasc_paciente, sexo_paciente, tel_paciente, nome_mae_paciente, CPF_paciente, RG_paciente, FKcod_microarea}
            Me.Rows.Add(rowrl_pacienteRow)
            Return rowrl_pacienteRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As rl_pacienteDataTable = CType(MyBase.Clone,rl_pacienteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New rl_pacienteDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnome_paciente = MyBase.Columns("nome_paciente")
            Me.columnend_paciente = MyBase.Columns("end_paciente")
            Me.columndata_nasc_paciente = MyBase.Columns("data_nasc_paciente")
            Me.columnsexo_paciente = MyBase.Columns("sexo_paciente")
            Me.columntel_paciente = MyBase.Columns("tel_paciente")
            Me.columnnome_mae_paciente = MyBase.Columns("nome_mae_paciente")
            Me.columnCPF_paciente = MyBase.Columns("CPF_paciente")
            Me.columnRG_paciente = MyBase.Columns("RG_paciente")
            Me.columnFKcod_microarea = MyBase.Columns("FKcod_microarea")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnome_paciente = New System.Data.DataColumn("nome_paciente", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnome_paciente)
            Me.columnend_paciente = New System.Data.DataColumn("end_paciente", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnend_paciente)
            Me.columndata_nasc_paciente = New System.Data.DataColumn("data_nasc_paciente", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndata_nasc_paciente)
            Me.columnsexo_paciente = New System.Data.DataColumn("sexo_paciente", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsexo_paciente)
            Me.columntel_paciente = New System.Data.DataColumn("tel_paciente", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntel_paciente)
            Me.columnnome_mae_paciente = New System.Data.DataColumn("nome_mae_paciente", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnome_mae_paciente)
            Me.columnCPF_paciente = New System.Data.DataColumn("CPF_paciente", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCPF_paciente)
            Me.columnRG_paciente = New System.Data.DataColumn("RG_paciente", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRG_paciente)
            Me.columnFKcod_microarea = New System.Data.DataColumn("FKcod_microarea", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFKcod_microarea)
            Me.columnnome_paciente.AllowDBNull = false
            Me.columnnome_paciente.MaxLength = 100
            Me.columnend_paciente.AllowDBNull = false
            Me.columnend_paciente.MaxLength = 100
            Me.columndata_nasc_paciente.AllowDBNull = false
            Me.columndata_nasc_paciente.MaxLength = 10
            Me.columnsexo_paciente.AllowDBNull = false
            Me.columnsexo_paciente.MaxLength = 1
            Me.columntel_paciente.AllowDBNull = false
            Me.columntel_paciente.MaxLength = 13
            Me.columnnome_mae_paciente.AllowDBNull = false
            Me.columnnome_mae_paciente.MaxLength = 100
            Me.columnCPF_paciente.AllowDBNull = false
            Me.columnCPF_paciente.MaxLength = 15
            Me.columnRG_paciente.AllowDBNull = false
            Me.columnRG_paciente.MaxLength = 20
            Me.columnFKcod_microarea.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newrl_pacienteRow() As rl_pacienteRow
            Return CType(Me.NewRow,rl_pacienteRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New rl_pacienteRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(rl_pacienteRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.rl_pacienteRowChangedEvent) Is Nothing) Then
                RaiseEvent rl_pacienteRowChanged(Me, New rl_pacienteRowChangeEvent(CType(e.Row,rl_pacienteRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.rl_pacienteRowChangingEvent) Is Nothing) Then
                RaiseEvent rl_pacienteRowChanging(Me, New rl_pacienteRowChangeEvent(CType(e.Row,rl_pacienteRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.rl_pacienteRowDeletedEvent) Is Nothing) Then
                RaiseEvent rl_pacienteRowDeleted(Me, New rl_pacienteRowChangeEvent(CType(e.Row,rl_pacienteRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.rl_pacienteRowDeletingEvent) Is Nothing) Then
                RaiseEvent rl_pacienteRowDeleting(Me, New rl_pacienteRowChangeEvent(CType(e.Row,rl_pacienteRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removerl_pacienteRow(ByVal row As rl_pacienteRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtsRelatorios = New dtsRelatorios
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "rl_pacienteDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class rl_medicamentoDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnnome_medicamento As System.Data.DataColumn
        
        Private columncomposicao_medicamento As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "rl_medicamento"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nome_medicamentoColumn() As System.Data.DataColumn
            Get
                Return Me.columnnome_medicamento
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property composicao_medicamentoColumn() As System.Data.DataColumn
            Get
                Return Me.columncomposicao_medicamento
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As rl_medicamentoRow
            Get
                Return CType(Me.Rows(index),rl_medicamentoRow)
            End Get
        End Property
        
        Public Event rl_medicamentoRowChanging As rl_medicamentoRowChangeEventHandler
        
        Public Event rl_medicamentoRowChanged As rl_medicamentoRowChangeEventHandler
        
        Public Event rl_medicamentoRowDeleting As rl_medicamentoRowChangeEventHandler
        
        Public Event rl_medicamentoRowDeleted As rl_medicamentoRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addrl_medicamentoRow(ByVal row As rl_medicamentoRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addrl_medicamentoRow(ByVal nome_medicamento As String, ByVal composicao_medicamento As String) As rl_medicamentoRow
            Dim rowrl_medicamentoRow As rl_medicamentoRow = CType(Me.NewRow,rl_medicamentoRow)
            rowrl_medicamentoRow.ItemArray = New Object() {nome_medicamento, composicao_medicamento}
            Me.Rows.Add(rowrl_medicamentoRow)
            Return rowrl_medicamentoRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As rl_medicamentoDataTable = CType(MyBase.Clone,rl_medicamentoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New rl_medicamentoDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnome_medicamento = MyBase.Columns("nome_medicamento")
            Me.columncomposicao_medicamento = MyBase.Columns("composicao_medicamento")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnome_medicamento = New System.Data.DataColumn("nome_medicamento", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnome_medicamento)
            Me.columncomposicao_medicamento = New System.Data.DataColumn("composicao_medicamento", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncomposicao_medicamento)
            Me.columnnome_medicamento.AllowDBNull = false
            Me.columnnome_medicamento.MaxLength = 100
            Me.columncomposicao_medicamento.AllowDBNull = false
            Me.columncomposicao_medicamento.MaxLength = 100
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newrl_medicamentoRow() As rl_medicamentoRow
            Return CType(Me.NewRow,rl_medicamentoRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New rl_medicamentoRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(rl_medicamentoRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.rl_medicamentoRowChangedEvent) Is Nothing) Then
                RaiseEvent rl_medicamentoRowChanged(Me, New rl_medicamentoRowChangeEvent(CType(e.Row,rl_medicamentoRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.rl_medicamentoRowChangingEvent) Is Nothing) Then
                RaiseEvent rl_medicamentoRowChanging(Me, New rl_medicamentoRowChangeEvent(CType(e.Row,rl_medicamentoRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.rl_medicamentoRowDeletedEvent) Is Nothing) Then
                RaiseEvent rl_medicamentoRowDeleted(Me, New rl_medicamentoRowChangeEvent(CType(e.Row,rl_medicamentoRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.rl_medicamentoRowDeletingEvent) Is Nothing) Then
                RaiseEvent rl_medicamentoRowDeleting(Me, New rl_medicamentoRowChangeEvent(CType(e.Row,rl_medicamentoRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removerl_medicamentoRow(ByVal row As rl_medicamentoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtsRelatorios = New dtsRelatorios
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "rl_medicamentoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class rl_saida_secretariaDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columndata_sai_sec As System.Data.DataColumn
        
        Private columnnome_medicamento As System.Data.DataColumn
        
        Private columnvalidade_sai_sec As System.Data.DataColumn
        
        Private columnquantidade_sai_sec As System.Data.DataColumn
        
        Private columnnome_usuario As System.Data.DataColumn
        
        Private columnnome_regiao As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "rl_saida_secretaria"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property data_sai_secColumn() As System.Data.DataColumn
            Get
                Return Me.columndata_sai_sec
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nome_medicamentoColumn() As System.Data.DataColumn
            Get
                Return Me.columnnome_medicamento
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property validade_sai_secColumn() As System.Data.DataColumn
            Get
                Return Me.columnvalidade_sai_sec
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property quantidade_sai_secColumn() As System.Data.DataColumn
            Get
                Return Me.columnquantidade_sai_sec
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nome_usuarioColumn() As System.Data.DataColumn
            Get
                Return Me.columnnome_usuario
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nome_regiaoColumn() As System.Data.DataColumn
            Get
                Return Me.columnnome_regiao
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As rl_saida_secretariaRow
            Get
                Return CType(Me.Rows(index),rl_saida_secretariaRow)
            End Get
        End Property
        
        Public Event rl_saida_secretariaRowChanging As rl_saida_secretariaRowChangeEventHandler
        
        Public Event rl_saida_secretariaRowChanged As rl_saida_secretariaRowChangeEventHandler
        
        Public Event rl_saida_secretariaRowDeleting As rl_saida_secretariaRowChangeEventHandler
        
        Public Event rl_saida_secretariaRowDeleted As rl_saida_secretariaRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addrl_saida_secretariaRow(ByVal row As rl_saida_secretariaRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addrl_saida_secretariaRow(ByVal data_sai_sec As String, ByVal nome_medicamento As String, ByVal validade_sai_sec As String, ByVal quantidade_sai_sec As String, ByVal nome_usuario As String, ByVal nome_regiao As String) As rl_saida_secretariaRow
            Dim rowrl_saida_secretariaRow As rl_saida_secretariaRow = CType(Me.NewRow,rl_saida_secretariaRow)
            rowrl_saida_secretariaRow.ItemArray = New Object() {data_sai_sec, nome_medicamento, validade_sai_sec, quantidade_sai_sec, nome_usuario, nome_regiao}
            Me.Rows.Add(rowrl_saida_secretariaRow)
            Return rowrl_saida_secretariaRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As rl_saida_secretariaDataTable = CType(MyBase.Clone,rl_saida_secretariaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New rl_saida_secretariaDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columndata_sai_sec = MyBase.Columns("data_sai_sec")
            Me.columnnome_medicamento = MyBase.Columns("nome_medicamento")
            Me.columnvalidade_sai_sec = MyBase.Columns("validade_sai_sec")
            Me.columnquantidade_sai_sec = MyBase.Columns("quantidade_sai_sec")
            Me.columnnome_usuario = MyBase.Columns("nome_usuario")
            Me.columnnome_regiao = MyBase.Columns("nome_regiao")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columndata_sai_sec = New System.Data.DataColumn("data_sai_sec", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndata_sai_sec)
            Me.columnnome_medicamento = New System.Data.DataColumn("nome_medicamento", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnome_medicamento)
            Me.columnvalidade_sai_sec = New System.Data.DataColumn("validade_sai_sec", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvalidade_sai_sec)
            Me.columnquantidade_sai_sec = New System.Data.DataColumn("quantidade_sai_sec", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnquantidade_sai_sec)
            Me.columnnome_usuario = New System.Data.DataColumn("nome_usuario", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnome_usuario)
            Me.columnnome_regiao = New System.Data.DataColumn("nome_regiao", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnome_regiao)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newrl_saida_secretariaRow() As rl_saida_secretariaRow
            Return CType(Me.NewRow,rl_saida_secretariaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New rl_saida_secretariaRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(rl_saida_secretariaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.rl_saida_secretariaRowChangedEvent) Is Nothing) Then
                RaiseEvent rl_saida_secretariaRowChanged(Me, New rl_saida_secretariaRowChangeEvent(CType(e.Row,rl_saida_secretariaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.rl_saida_secretariaRowChangingEvent) Is Nothing) Then
                RaiseEvent rl_saida_secretariaRowChanging(Me, New rl_saida_secretariaRowChangeEvent(CType(e.Row,rl_saida_secretariaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.rl_saida_secretariaRowDeletedEvent) Is Nothing) Then
                RaiseEvent rl_saida_secretariaRowDeleted(Me, New rl_saida_secretariaRowChangeEvent(CType(e.Row,rl_saida_secretariaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.rl_saida_secretariaRowDeletingEvent) Is Nothing) Then
                RaiseEvent rl_saida_secretariaRowDeleting(Me, New rl_saida_secretariaRowChangeEvent(CType(e.Row,rl_saida_secretariaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removerl_saida_secretariaRow(ByVal row As rl_saida_secretariaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtsRelatorios = New dtsRelatorios
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "rl_saida_secretariaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class rl_entrada_policlinicaDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columndata_ent_poli As System.Data.DataColumn
        
        Private columnnome_medicamento As System.Data.DataColumn
        
        Private columnvalidade_ent_poli As System.Data.DataColumn
        
        Private columnquantidade_ent_poli As System.Data.DataColumn
        
        Private columnnome_usuario As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "rl_entrada_policlinica"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property data_ent_poliColumn() As System.Data.DataColumn
            Get
                Return Me.columndata_ent_poli
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nome_medicamentoColumn() As System.Data.DataColumn
            Get
                Return Me.columnnome_medicamento
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property validade_ent_poliColumn() As System.Data.DataColumn
            Get
                Return Me.columnvalidade_ent_poli
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property quantidade_ent_poliColumn() As System.Data.DataColumn
            Get
                Return Me.columnquantidade_ent_poli
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nome_usuarioColumn() As System.Data.DataColumn
            Get
                Return Me.columnnome_usuario
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As rl_entrada_policlinicaRow
            Get
                Return CType(Me.Rows(index),rl_entrada_policlinicaRow)
            End Get
        End Property
        
        Public Event rl_entrada_policlinicaRowChanging As rl_entrada_policlinicaRowChangeEventHandler
        
        Public Event rl_entrada_policlinicaRowChanged As rl_entrada_policlinicaRowChangeEventHandler
        
        Public Event rl_entrada_policlinicaRowDeleting As rl_entrada_policlinicaRowChangeEventHandler
        
        Public Event rl_entrada_policlinicaRowDeleted As rl_entrada_policlinicaRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addrl_entrada_policlinicaRow(ByVal row As rl_entrada_policlinicaRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addrl_entrada_policlinicaRow(ByVal data_ent_poli As String, ByVal nome_medicamento As String, ByVal validade_ent_poli As String, ByVal quantidade_ent_poli As String, ByVal nome_usuario As String) As rl_entrada_policlinicaRow
            Dim rowrl_entrada_policlinicaRow As rl_entrada_policlinicaRow = CType(Me.NewRow,rl_entrada_policlinicaRow)
            rowrl_entrada_policlinicaRow.ItemArray = New Object() {data_ent_poli, nome_medicamento, validade_ent_poli, quantidade_ent_poli, nome_usuario}
            Me.Rows.Add(rowrl_entrada_policlinicaRow)
            Return rowrl_entrada_policlinicaRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As rl_entrada_policlinicaDataTable = CType(MyBase.Clone,rl_entrada_policlinicaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New rl_entrada_policlinicaDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columndata_ent_poli = MyBase.Columns("data_ent_poli")
            Me.columnnome_medicamento = MyBase.Columns("nome_medicamento")
            Me.columnvalidade_ent_poli = MyBase.Columns("validade_ent_poli")
            Me.columnquantidade_ent_poli = MyBase.Columns("quantidade_ent_poli")
            Me.columnnome_usuario = MyBase.Columns("nome_usuario")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columndata_ent_poli = New System.Data.DataColumn("data_ent_poli", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndata_ent_poli)
            Me.columnnome_medicamento = New System.Data.DataColumn("nome_medicamento", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnome_medicamento)
            Me.columnvalidade_ent_poli = New System.Data.DataColumn("validade_ent_poli", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvalidade_ent_poli)
            Me.columnquantidade_ent_poli = New System.Data.DataColumn("quantidade_ent_poli", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnquantidade_ent_poli)
            Me.columnnome_usuario = New System.Data.DataColumn("nome_usuario", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnome_usuario)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newrl_entrada_policlinicaRow() As rl_entrada_policlinicaRow
            Return CType(Me.NewRow,rl_entrada_policlinicaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New rl_entrada_policlinicaRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(rl_entrada_policlinicaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.rl_entrada_policlinicaRowChangedEvent) Is Nothing) Then
                RaiseEvent rl_entrada_policlinicaRowChanged(Me, New rl_entrada_policlinicaRowChangeEvent(CType(e.Row,rl_entrada_policlinicaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.rl_entrada_policlinicaRowChangingEvent) Is Nothing) Then
                RaiseEvent rl_entrada_policlinicaRowChanging(Me, New rl_entrada_policlinicaRowChangeEvent(CType(e.Row,rl_entrada_policlinicaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.rl_entrada_policlinicaRowDeletedEvent) Is Nothing) Then
                RaiseEvent rl_entrada_policlinicaRowDeleted(Me, New rl_entrada_policlinicaRowChangeEvent(CType(e.Row,rl_entrada_policlinicaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.rl_entrada_policlinicaRowDeletingEvent) Is Nothing) Then
                RaiseEvent rl_entrada_policlinicaRowDeleting(Me, New rl_entrada_policlinicaRowChangeEvent(CType(e.Row,rl_entrada_policlinicaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removerl_entrada_policlinicaRow(ByVal row As rl_entrada_policlinicaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtsRelatorios = New dtsRelatorios
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "rl_entrada_policlinicaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class rl_saida_policlinicaDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columndata_sai_poli As System.Data.DataColumn
        
        Private columnnome_medicamento As System.Data.DataColumn
        
        Private columnvalidade_sai_poli As System.Data.DataColumn
        
        Private columnquantidade_sai_poli As System.Data.DataColumn
        
        Private columnnome_usuario As System.Data.DataColumn
        
        Private columnnome_paciente As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "rl_saida_policlinica"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property data_sai_poliColumn() As System.Data.DataColumn
            Get
                Return Me.columndata_sai_poli
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nome_medicamentoColumn() As System.Data.DataColumn
            Get
                Return Me.columnnome_medicamento
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property validade_sai_poliColumn() As System.Data.DataColumn
            Get
                Return Me.columnvalidade_sai_poli
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property quantidade_sai_poliColumn() As System.Data.DataColumn
            Get
                Return Me.columnquantidade_sai_poli
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nome_usuarioColumn() As System.Data.DataColumn
            Get
                Return Me.columnnome_usuario
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nome_pacienteColumn() As System.Data.DataColumn
            Get
                Return Me.columnnome_paciente
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As rl_saida_policlinicaRow
            Get
                Return CType(Me.Rows(index),rl_saida_policlinicaRow)
            End Get
        End Property
        
        Public Event rl_saida_policlinicaRowChanging As rl_saida_policlinicaRowChangeEventHandler
        
        Public Event rl_saida_policlinicaRowChanged As rl_saida_policlinicaRowChangeEventHandler
        
        Public Event rl_saida_policlinicaRowDeleting As rl_saida_policlinicaRowChangeEventHandler
        
        Public Event rl_saida_policlinicaRowDeleted As rl_saida_policlinicaRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addrl_saida_policlinicaRow(ByVal row As rl_saida_policlinicaRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addrl_saida_policlinicaRow(ByVal data_sai_poli As String, ByVal nome_medicamento As String, ByVal validade_sai_poli As String, ByVal quantidade_sai_poli As String, ByVal nome_usuario As String, ByVal nome_paciente As String) As rl_saida_policlinicaRow
            Dim rowrl_saida_policlinicaRow As rl_saida_policlinicaRow = CType(Me.NewRow,rl_saida_policlinicaRow)
            rowrl_saida_policlinicaRow.ItemArray = New Object() {data_sai_poli, nome_medicamento, validade_sai_poli, quantidade_sai_poli, nome_usuario, nome_paciente}
            Me.Rows.Add(rowrl_saida_policlinicaRow)
            Return rowrl_saida_policlinicaRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As rl_saida_policlinicaDataTable = CType(MyBase.Clone,rl_saida_policlinicaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New rl_saida_policlinicaDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columndata_sai_poli = MyBase.Columns("data_sai_poli")
            Me.columnnome_medicamento = MyBase.Columns("nome_medicamento")
            Me.columnvalidade_sai_poli = MyBase.Columns("validade_sai_poli")
            Me.columnquantidade_sai_poli = MyBase.Columns("quantidade_sai_poli")
            Me.columnnome_usuario = MyBase.Columns("nome_usuario")
            Me.columnnome_paciente = MyBase.Columns("nome_paciente")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columndata_sai_poli = New System.Data.DataColumn("data_sai_poli", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndata_sai_poli)
            Me.columnnome_medicamento = New System.Data.DataColumn("nome_medicamento", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnome_medicamento)
            Me.columnvalidade_sai_poli = New System.Data.DataColumn("validade_sai_poli", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvalidade_sai_poli)
            Me.columnquantidade_sai_poli = New System.Data.DataColumn("quantidade_sai_poli", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnquantidade_sai_poli)
            Me.columnnome_usuario = New System.Data.DataColumn("nome_usuario", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnome_usuario)
            Me.columnnome_paciente = New System.Data.DataColumn("nome_paciente", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnome_paciente)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newrl_saida_policlinicaRow() As rl_saida_policlinicaRow
            Return CType(Me.NewRow,rl_saida_policlinicaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New rl_saida_policlinicaRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(rl_saida_policlinicaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.rl_saida_policlinicaRowChangedEvent) Is Nothing) Then
                RaiseEvent rl_saida_policlinicaRowChanged(Me, New rl_saida_policlinicaRowChangeEvent(CType(e.Row,rl_saida_policlinicaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.rl_saida_policlinicaRowChangingEvent) Is Nothing) Then
                RaiseEvent rl_saida_policlinicaRowChanging(Me, New rl_saida_policlinicaRowChangeEvent(CType(e.Row,rl_saida_policlinicaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.rl_saida_policlinicaRowDeletedEvent) Is Nothing) Then
                RaiseEvent rl_saida_policlinicaRowDeleted(Me, New rl_saida_policlinicaRowChangeEvent(CType(e.Row,rl_saida_policlinicaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.rl_saida_policlinicaRowDeletingEvent) Is Nothing) Then
                RaiseEvent rl_saida_policlinicaRowDeleting(Me, New rl_saida_policlinicaRowChangeEvent(CType(e.Row,rl_saida_policlinicaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removerl_saida_policlinicaRow(ByVal row As rl_saida_policlinicaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtsRelatorios = New dtsRelatorios
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "rl_saida_policlinicaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class rl_estoqueRow
        Inherits System.Data.DataRow
        
        Private tablerl_estoque As rl_estoqueDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablerl_estoque = CType(Me.Table,rl_estoqueDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nome_medicamento() As String
            Get
                Return CType(Me(Me.tablerl_estoque.nome_medicamentoColumn),String)
            End Get
            Set
                Me(Me.tablerl_estoque.nome_medicamentoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property val_medicamento() As String
            Get
                Return CType(Me(Me.tablerl_estoque.val_medicamentoColumn),String)
            End Get
            Set
                Me(Me.tablerl_estoque.val_medicamentoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property quant_medicamento() As Long
            Get
                Return CType(Me(Me.tablerl_estoque.quant_medicamentoColumn),Long)
            End Get
            Set
                Me(Me.tablerl_estoque.quant_medicamentoColumn) = value
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class rl_entrada_secretariaRow
        Inherits System.Data.DataRow
        
        Private tablerl_entrada_secretaria As rl_entrada_secretariaDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablerl_entrada_secretaria = CType(Me.Table,rl_entrada_secretariaDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property data_ent_sec() As String
            Get
                Return CType(Me(Me.tablerl_entrada_secretaria.data_ent_secColumn),String)
            End Get
            Set
                Me(Me.tablerl_entrada_secretaria.data_ent_secColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lote_ent_sec() As String
            Get
                Return CType(Me(Me.tablerl_entrada_secretaria.lote_ent_secColumn),String)
            End Get
            Set
                Me(Me.tablerl_entrada_secretaria.lote_ent_secColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nota_ent_sec() As String
            Get
                Return CType(Me(Me.tablerl_entrada_secretaria.nota_ent_secColumn),String)
            End Get
            Set
                Me(Me.tablerl_entrada_secretaria.nota_ent_secColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nome_medicamento() As String
            Get
                Return CType(Me(Me.tablerl_entrada_secretaria.nome_medicamentoColumn),String)
            End Get
            Set
                Me(Me.tablerl_entrada_secretaria.nome_medicamentoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property validade_ent_sec() As String
            Get
                Return CType(Me(Me.tablerl_entrada_secretaria.validade_ent_secColumn),String)
            End Get
            Set
                Me(Me.tablerl_entrada_secretaria.validade_ent_secColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property quantidade_ent_sec() As Long
            Get
                Return CType(Me(Me.tablerl_entrada_secretaria.quantidade_ent_secColumn),Long)
            End Get
            Set
                Me(Me.tablerl_entrada_secretaria.quantidade_ent_secColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nome_usuario() As String
            Get
                Return CType(Me(Me.tablerl_entrada_secretaria.nome_usuarioColumn),String)
            End Get
            Set
                Me(Me.tablerl_entrada_secretaria.nome_usuarioColumn) = value
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class rl_microareaRow
        Inherits System.Data.DataRow
        
        Private tablerl_microarea As rl_microareaDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablerl_microarea = CType(Me.Table,rl_microareaDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cod_microarea() As Long
            Get
                Return CType(Me(Me.tablerl_microarea.cod_microareaColumn),Long)
            End Get
            Set
                Me(Me.tablerl_microarea.cod_microareaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property data_cad_microarea() As String
            Get
                Return CType(Me(Me.tablerl_microarea.data_cad_microareaColumn),String)
            End Get
            Set
                Me(Me.tablerl_microarea.data_cad_microareaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property agente_microarea() As String
            Get
                Return CType(Me(Me.tablerl_microarea.agente_microareaColumn),String)
            End Get
            Set
                Me(Me.tablerl_microarea.agente_microareaColumn) = value
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class rl_usuarioRow
        Inherits System.Data.DataRow
        
        Private tablerl_usuario As rl_usuarioDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablerl_usuario = CType(Me.Table,rl_usuarioDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nome_usuario() As String
            Get
                Return CType(Me(Me.tablerl_usuario.nome_usuarioColumn),String)
            End Get
            Set
                Me(Me.tablerl_usuario.nome_usuarioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cargo_usuario() As String
            Get
                Return CType(Me(Me.tablerl_usuario.cargo_usuarioColumn),String)
            End Get
            Set
                Me(Me.tablerl_usuario.cargo_usuarioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property end_usuario() As String
            Get
                Return CType(Me(Me.tablerl_usuario.end_usuarioColumn),String)
            End Get
            Set
                Me(Me.tablerl_usuario.end_usuarioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tel_res_usuario() As String
            Get
                Return CType(Me(Me.tablerl_usuario.tel_res_usuarioColumn),String)
            End Get
            Set
                Me(Me.tablerl_usuario.tel_res_usuarioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tel_cel_usuario() As String
            Get
                Return CType(Me(Me.tablerl_usuario.tel_cel_usuarioColumn),String)
            End Get
            Set
                Me(Me.tablerl_usuario.tel_cel_usuarioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property email_usuario() As String
            Get
                Return CType(Me(Me.tablerl_usuario.email_usuarioColumn),String)
            End Get
            Set
                Me(Me.tablerl_usuario.email_usuarioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CPF_usuario() As String
            Get
                Return CType(Me(Me.tablerl_usuario.CPF_usuarioColumn),String)
            End Get
            Set
                Me(Me.tablerl_usuario.CPF_usuarioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RG_usuario() As String
            Get
                Return CType(Me(Me.tablerl_usuario.RG_usuarioColumn),String)
            End Get
            Set
                Me(Me.tablerl_usuario.RG_usuarioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nome_perfil() As String
            Get
                Return CType(Me(Me.tablerl_usuario.nome_perfilColumn),String)
            End Get
            Set
                Me(Me.tablerl_usuario.nome_perfilColumn) = value
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class rl_pacienteRow
        Inherits System.Data.DataRow
        
        Private tablerl_paciente As rl_pacienteDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablerl_paciente = CType(Me.Table,rl_pacienteDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nome_paciente() As String
            Get
                Return CType(Me(Me.tablerl_paciente.nome_pacienteColumn),String)
            End Get
            Set
                Me(Me.tablerl_paciente.nome_pacienteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property end_paciente() As String
            Get
                Return CType(Me(Me.tablerl_paciente.end_pacienteColumn),String)
            End Get
            Set
                Me(Me.tablerl_paciente.end_pacienteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property data_nasc_paciente() As String
            Get
                Return CType(Me(Me.tablerl_paciente.data_nasc_pacienteColumn),String)
            End Get
            Set
                Me(Me.tablerl_paciente.data_nasc_pacienteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sexo_paciente() As String
            Get
                Return CType(Me(Me.tablerl_paciente.sexo_pacienteColumn),String)
            End Get
            Set
                Me(Me.tablerl_paciente.sexo_pacienteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tel_paciente() As String
            Get
                Return CType(Me(Me.tablerl_paciente.tel_pacienteColumn),String)
            End Get
            Set
                Me(Me.tablerl_paciente.tel_pacienteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nome_mae_paciente() As String
            Get
                Return CType(Me(Me.tablerl_paciente.nome_mae_pacienteColumn),String)
            End Get
            Set
                Me(Me.tablerl_paciente.nome_mae_pacienteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CPF_paciente() As String
            Get
                Return CType(Me(Me.tablerl_paciente.CPF_pacienteColumn),String)
            End Get
            Set
                Me(Me.tablerl_paciente.CPF_pacienteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RG_paciente() As String
            Get
                Return CType(Me(Me.tablerl_paciente.RG_pacienteColumn),String)
            End Get
            Set
                Me(Me.tablerl_paciente.RG_pacienteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FKcod_microarea() As Long
            Get
                Return CType(Me(Me.tablerl_paciente.FKcod_microareaColumn),Long)
            End Get
            Set
                Me(Me.tablerl_paciente.FKcod_microareaColumn) = value
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class rl_medicamentoRow
        Inherits System.Data.DataRow
        
        Private tablerl_medicamento As rl_medicamentoDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablerl_medicamento = CType(Me.Table,rl_medicamentoDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nome_medicamento() As String
            Get
                Return CType(Me(Me.tablerl_medicamento.nome_medicamentoColumn),String)
            End Get
            Set
                Me(Me.tablerl_medicamento.nome_medicamentoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property composicao_medicamento() As String
            Get
                Return CType(Me(Me.tablerl_medicamento.composicao_medicamentoColumn),String)
            End Get
            Set
                Me(Me.tablerl_medicamento.composicao_medicamentoColumn) = value
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class rl_saida_secretariaRow
        Inherits System.Data.DataRow
        
        Private tablerl_saida_secretaria As rl_saida_secretariaDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablerl_saida_secretaria = CType(Me.Table,rl_saida_secretariaDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property data_sai_sec() As String
            Get
                Try 
                    Return CType(Me(Me.tablerl_saida_secretaria.data_sai_secColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'data_sai_sec' in table 'rl_saida_secretaria' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerl_saida_secretaria.data_sai_secColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nome_medicamento() As String
            Get
                Try 
                    Return CType(Me(Me.tablerl_saida_secretaria.nome_medicamentoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'nome_medicamento' in table 'rl_saida_secretaria' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablerl_saida_secretaria.nome_medicamentoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property validade_sai_sec() As String
            Get
                Try 
                    Return CType(Me(Me.tablerl_saida_secretaria.validade_sai_secColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'validade_sai_sec' in table 'rl_saida_secretaria' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablerl_saida_secretaria.validade_sai_secColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property quantidade_sai_sec() As String
            Get
                Try 
                    Return CType(Me(Me.tablerl_saida_secretaria.quantidade_sai_secColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'quantidade_sai_sec' in table 'rl_saida_secretaria' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablerl_saida_secretaria.quantidade_sai_secColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nome_usuario() As String
            Get
                Try 
                    Return CType(Me(Me.tablerl_saida_secretaria.nome_usuarioColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'nome_usuario' in table 'rl_saida_secretaria' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerl_saida_secretaria.nome_usuarioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nome_regiao() As String
            Get
                Try 
                    Return CType(Me(Me.tablerl_saida_secretaria.nome_regiaoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'nome_regiao' in table 'rl_saida_secretaria' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerl_saida_secretaria.nome_regiaoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isdata_sai_secNull() As Boolean
            Return Me.IsNull(Me.tablerl_saida_secretaria.data_sai_secColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setdata_sai_secNull()
            Me(Me.tablerl_saida_secretaria.data_sai_secColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnome_medicamentoNull() As Boolean
            Return Me.IsNull(Me.tablerl_saida_secretaria.nome_medicamentoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnome_medicamentoNull()
            Me(Me.tablerl_saida_secretaria.nome_medicamentoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isvalidade_sai_secNull() As Boolean
            Return Me.IsNull(Me.tablerl_saida_secretaria.validade_sai_secColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setvalidade_sai_secNull()
            Me(Me.tablerl_saida_secretaria.validade_sai_secColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isquantidade_sai_secNull() As Boolean
            Return Me.IsNull(Me.tablerl_saida_secretaria.quantidade_sai_secColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setquantidade_sai_secNull()
            Me(Me.tablerl_saida_secretaria.quantidade_sai_secColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnome_usuarioNull() As Boolean
            Return Me.IsNull(Me.tablerl_saida_secretaria.nome_usuarioColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnome_usuarioNull()
            Me(Me.tablerl_saida_secretaria.nome_usuarioColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnome_regiaoNull() As Boolean
            Return Me.IsNull(Me.tablerl_saida_secretaria.nome_regiaoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnome_regiaoNull()
            Me(Me.tablerl_saida_secretaria.nome_regiaoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class rl_entrada_policlinicaRow
        Inherits System.Data.DataRow
        
        Private tablerl_entrada_policlinica As rl_entrada_policlinicaDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablerl_entrada_policlinica = CType(Me.Table,rl_entrada_policlinicaDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property data_ent_poli() As String
            Get
                Try 
                    Return CType(Me(Me.tablerl_entrada_policlinica.data_ent_poliColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'data_ent_poli' in table 'rl_entrada_policlinica' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablerl_entrada_policlinica.data_ent_poliColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nome_medicamento() As String
            Get
                Try 
                    Return CType(Me(Me.tablerl_entrada_policlinica.nome_medicamentoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'nome_medicamento' in table 'rl_entrada_policlinica' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablerl_entrada_policlinica.nome_medicamentoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property validade_ent_poli() As String
            Get
                Try 
                    Return CType(Me(Me.tablerl_entrada_policlinica.validade_ent_poliColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'validade_ent_poli' in table 'rl_entrada_policlinica' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerl_entrada_policlinica.validade_ent_poliColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property quantidade_ent_poli() As String
            Get
                Try 
                    Return CType(Me(Me.tablerl_entrada_policlinica.quantidade_ent_poliColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'quantidade_ent_poli' in table 'rl_entrada_policlinica' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerl_entrada_policlinica.quantidade_ent_poliColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nome_usuario() As String
            Get
                Try 
                    Return CType(Me(Me.tablerl_entrada_policlinica.nome_usuarioColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'nome_usuario' in table 'rl_entrada_policlinica' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerl_entrada_policlinica.nome_usuarioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isdata_ent_poliNull() As Boolean
            Return Me.IsNull(Me.tablerl_entrada_policlinica.data_ent_poliColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setdata_ent_poliNull()
            Me(Me.tablerl_entrada_policlinica.data_ent_poliColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnome_medicamentoNull() As Boolean
            Return Me.IsNull(Me.tablerl_entrada_policlinica.nome_medicamentoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnome_medicamentoNull()
            Me(Me.tablerl_entrada_policlinica.nome_medicamentoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isvalidade_ent_poliNull() As Boolean
            Return Me.IsNull(Me.tablerl_entrada_policlinica.validade_ent_poliColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setvalidade_ent_poliNull()
            Me(Me.tablerl_entrada_policlinica.validade_ent_poliColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isquantidade_ent_poliNull() As Boolean
            Return Me.IsNull(Me.tablerl_entrada_policlinica.quantidade_ent_poliColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setquantidade_ent_poliNull()
            Me(Me.tablerl_entrada_policlinica.quantidade_ent_poliColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnome_usuarioNull() As Boolean
            Return Me.IsNull(Me.tablerl_entrada_policlinica.nome_usuarioColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnome_usuarioNull()
            Me(Me.tablerl_entrada_policlinica.nome_usuarioColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class rl_saida_policlinicaRow
        Inherits System.Data.DataRow
        
        Private tablerl_saida_policlinica As rl_saida_policlinicaDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablerl_saida_policlinica = CType(Me.Table,rl_saida_policlinicaDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property data_sai_poli() As String
            Get
                Try 
                    Return CType(Me(Me.tablerl_saida_policlinica.data_sai_poliColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'data_sai_poli' in table 'rl_saida_policlinica' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerl_saida_policlinica.data_sai_poliColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nome_medicamento() As String
            Get
                Try 
                    Return CType(Me(Me.tablerl_saida_policlinica.nome_medicamentoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'nome_medicamento' in table 'rl_saida_policlinica' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablerl_saida_policlinica.nome_medicamentoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property validade_sai_poli() As String
            Get
                Try 
                    Return CType(Me(Me.tablerl_saida_policlinica.validade_sai_poliColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'validade_sai_poli' in table 'rl_saida_policlinica' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablerl_saida_policlinica.validade_sai_poliColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property quantidade_sai_poli() As String
            Get
                Try 
                    Return CType(Me(Me.tablerl_saida_policlinica.quantidade_sai_poliColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'quantidade_sai_poli' in table 'rl_saida_policlinica' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerl_saida_policlinica.quantidade_sai_poliColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nome_usuario() As String
            Get
                Try 
                    Return CType(Me(Me.tablerl_saida_policlinica.nome_usuarioColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'nome_usuario' in table 'rl_saida_policlinica' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerl_saida_policlinica.nome_usuarioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nome_paciente() As String
            Get
                Try 
                    Return CType(Me(Me.tablerl_saida_policlinica.nome_pacienteColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'nome_paciente' in table 'rl_saida_policlinica' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerl_saida_policlinica.nome_pacienteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isdata_sai_poliNull() As Boolean
            Return Me.IsNull(Me.tablerl_saida_policlinica.data_sai_poliColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setdata_sai_poliNull()
            Me(Me.tablerl_saida_policlinica.data_sai_poliColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnome_medicamentoNull() As Boolean
            Return Me.IsNull(Me.tablerl_saida_policlinica.nome_medicamentoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnome_medicamentoNull()
            Me(Me.tablerl_saida_policlinica.nome_medicamentoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isvalidade_sai_poliNull() As Boolean
            Return Me.IsNull(Me.tablerl_saida_policlinica.validade_sai_poliColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setvalidade_sai_poliNull()
            Me(Me.tablerl_saida_policlinica.validade_sai_poliColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isquantidade_sai_poliNull() As Boolean
            Return Me.IsNull(Me.tablerl_saida_policlinica.quantidade_sai_poliColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setquantidade_sai_poliNull()
            Me(Me.tablerl_saida_policlinica.quantidade_sai_poliColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnome_usuarioNull() As Boolean
            Return Me.IsNull(Me.tablerl_saida_policlinica.nome_usuarioColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnome_usuarioNull()
            Me(Me.tablerl_saida_policlinica.nome_usuarioColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnome_pacienteNull() As Boolean
            Return Me.IsNull(Me.tablerl_saida_policlinica.nome_pacienteColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnome_pacienteNull()
            Me(Me.tablerl_saida_policlinica.nome_pacienteColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class rl_estoqueRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As rl_estoqueRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As rl_estoqueRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As rl_estoqueRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class rl_entrada_secretariaRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As rl_entrada_secretariaRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As rl_entrada_secretariaRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As rl_entrada_secretariaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class rl_microareaRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As rl_microareaRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As rl_microareaRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As rl_microareaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class rl_usuarioRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As rl_usuarioRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As rl_usuarioRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As rl_usuarioRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class rl_pacienteRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As rl_pacienteRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As rl_pacienteRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As rl_pacienteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class rl_medicamentoRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As rl_medicamentoRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As rl_medicamentoRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As rl_medicamentoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class rl_saida_secretariaRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As rl_saida_secretariaRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As rl_saida_secretariaRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As rl_saida_secretariaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class rl_entrada_policlinicaRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As rl_entrada_policlinicaRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As rl_entrada_policlinicaRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As rl_entrada_policlinicaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class rl_saida_policlinicaRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As rl_saida_policlinicaRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As rl_saida_policlinicaRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As rl_saida_policlinicaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
